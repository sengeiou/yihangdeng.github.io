{"meta":{"title":"yhdblog","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"Repositories","date":"2020-08-25T13:03:56.000Z","updated":"2020-08-25T13:08:55.059Z","comments":true,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-08-25T12:50:00.000Z","updated":"2020-08-25T13:04:12.688Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"数据结构 第三章 循环链表&双向链表","slug":"数据结构 第三章 循环链表&双向链表","date":"2020-09-17T09:12:32.000Z","updated":"2020-09-17T09:12:33.199Z","comments":true,"path":"2020/09/17/数据结构 第三章 循环链表&双向链表/","link":"","permalink":"http://yoursite.com/2020/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8&%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/","excerpt":"","text":"读物：《大话数据结构》 印次：2020年5月第25次印刷(2020.5重印) 大纲 循环链表 双向链表 小结 循环链表基本概念单循环链表(circular linked)： 将单链表的终端结点指针端口由空指针改为指向头结点，是整个单链表形成一个环。 相对单链表，循环链表可以实现从任意一个结点出发，可访问到链表的全部结点的操作。 为了方便操作，循环链表为空链表时，头结点的指针域也“循环”地指向自己。如下图所示： 实际应用 但实际中，很多操作是在表的首或尾两端进行。不用头指针，而是使用指向终端结点的尾指针(rear表示) 对于终端结点复杂度即为O(1)，对于头结点即rear-&gt;next，头指针即rear-&gt;next-&gt;next，复杂度均为O(1) 循环链表没有增加任何存储量，仅对链接方式稍作改变，因此基本操作的实现与链表相似。如ListLength、GetElem、LocateElem等这些操作只要设计一个方向的指针即可，另一个指针多了也不能提供什么帮助。 合并循环链表通过尾指针链接两个循环链表 123456p = rearA-&gt;next; /* 保存A表的头结点*/ rearA-&gt;next = rearB-&gt;next-&gt;next; /*将本是指向B表的第一个结点（不是头结点） */ /* 赋值给reaA-&gt;next，即*/q = rearB-&gt;next; rearB-&gt;next = p; /* 将原A表的头结点赋值给rearB-&gt;next，即③ */free(q); /* 释放q*/ 双向链表定义及其初始化双向链表(double linked list)**：是在单链表的每个结点中，在设置一个指向其前驱结点**的指针域。定义如下： 123456/*线性表的双向链表存储结构*/typedef struct DulNode&#123; ElemType data; struct DulNode *prior; struct DulNode *next;&#125;DulNode,*DuLinkList; 双链表的插入相对于单链表的插入操作，双链表的插入需要修改4个指针。关键修改代码如下(在结点p的后面插入一个新结点s)： 1234s-&gt;prior = p;s-&gt;next = p-&gt;next;p-&gt;next-&gt;prior = s;p-&gt;next = s; 双链表的删除因为有两个指针域，在指向调整上更加灵活。若p指向待删除结点，则删除的关键代码部分如下(未被验证)： 12p-&gt;prior-&gt;next = p-&gt;next;p-&gt;next-&gt;prior = p-&gt;prior; 小结 双向链表先对于单链表来说，更加复杂，对于对于插入和删除时，需要歌外注意 双向链表有两个指针域，因此空间上占用略多一些 由于双向链表有良好的对称性，使得对某个结点的前后结点操作带来了方便 因此总的来说，双向链表通过复杂的设计用空间效率在某种情况下换取了时间效率","categories":[],"tags":[{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"mysql基础总结","slug":"mysql基础总结","date":"2020-09-17T03:40:32.000Z","updated":"2020-09-17T06:22:52.375Z","comments":true,"path":"2020/09/17/mysql基础总结/","link":"","permalink":"http://yoursite.com/2020/09/17/mysql%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/","excerpt":"","text":"本单元目标12345678910111213141516171819202122232425262728293031323334353637一、为什么要学习数据库二、数据库的相关概念 DBMS、DB、SQL三、数据库存储数据的特点四、初始MySQL MySQL产品的介绍 MySQL产品的安装 ★ MySQL服务的启动和停止 ★ MySQL服务的登录和退出 ★ MySQL的常见命令和语法规范 五、DQL语言的学习 ★ 基础查询 ★ 条件查询 ★ 排序查询 ★ 常见函数 ★ 分组函数 ★ 分组查询 ★ 连接查询 ★ 子查询 √ 分页查询 ★ union联合查询 √ 六、DML语言的学习 ★ 插入语句 修改语句 删除语句 七、DDL语言的学习 库和表的管理 √ 常见数据类型介绍 √ 常见约束 √ 八、TCL语言的学习 事务和事务处理 九、视图的讲解 √十、变量 十一、存储过程和函数 十二、流程控制结构 数据库的好处121.持久化数据到本地2.可以实现结构化查询，方便管理 数据库相关概念1231、DB：数据库，保存一组有组织的数据的容器2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据3、SQL:结构化查询语言，用于和DBMS通信的语言 数据库存储数据的特点123451、将数据放到表中，表再放到库中2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”5、表中的数据是按行存储的，每一行类似于java中的“对象”。 MySQL产品的介绍和安装MySQL服务的启动和停止1234方式一：计算机——右击管理——服务方式二：通过管理员身份运行net start 服务名（启动服务）net stop 服务名（停止服务） MySQL服务的登录和退出123456789方式一：通过mysql自带的客户端只限于root用户方式二：通过windows自带的客户端登录：mysql 【-h主机名 -P端口号 】-u用户名 -p密码退出：exit或ctrl+C MySQL的常见命令12345678910111213141516171819202122232425261.查看当前所有的数据库show databases;2.打开指定的库use 库名3.查看当前库的所有表show tables;4.查看其它库的所有表show tables from 库名;5.创建表create table 表名( 列名 列类型, 列名 列类型， 。。。);6.查看表结构desc 表名;7.查看服务器的版本方式一：登录到mysql服务端select version();方式二：没有登录到mysql服务端mysql --version或mysql --V MySQL的语法规范12345671.不区分大小写,但建议关键字大写，表名、列名小写2.每条命令最好用分号结尾3.每条命令根据需要，可以进行缩进 或换行4.注释 单行注释：#注释文字 单行注释：-- 注释文字 多行注释：&#x2F;* 注释文字 *&#x2F; SQL的语言分类12345678DQL（Data Query Language）：数据查询语言 select DML(Data Manipulate Language):数据操作语言 insert 、update、deleteDDL（Data Define Languge）：数据定义语言 create、drop、alterTCL（Transaction Control Language）：事务控制语言 commit、rollback SQL的常见命令1234567891011show databases； 查看所有的数据库use 库名； 打开指定 的库show tables ; 显示库中的所有表show tables from 库名;显示指定库中的所有表create table 表名( 字段名 字段类型, 字段名 字段类型); 创建表desc 表名; 查看指定表的结构select * from 表名;显示表中的所有数据 DQL语言的学习进阶1：基础查询12345678语法：SELECT 要查询的东西【FROM 表名】;类似于Java中 :System.out.println(要打印的东西);特点：①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数 进阶2：条件查询1234567891011121314151617181920212223242526条件查询：根据条件过滤原始表的数据，查询到想要的数据语法：select 要查询的字段|表达式|常量值|函数from 表where 条件 ;分类：一、条件表达式 示例：salary&gt;10000 条件运算符： &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D; !&#x3D; &lt;&gt;二、逻辑表达式示例：salary&gt;10000 &amp;&amp; salary&lt;20000逻辑运算符： and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false or(||)：两个条件只要有一个成立，结果为true，否则为false not(!)：如果条件成立，则not后为false，否则为true三、模糊查询示例：last_name like &#39;a%&#39; 进阶3：排序查询123456789语法：select 要查询的东西from 表where 条件order by 排序的字段|表达式|函数|别名 【asc|desc】 进阶4：常见函数1234567891011121314151617181920212223242526272829303132333435363738一、单行函数1、字符函数 concat拼接 substr截取子串 upper转换成大写 lower转换成小写 trim去前后指定的空格和字符 ltrim去左边空格 rtrim去右边空格 replace替换 lpad左填充 rpad右填充 instr返回子串第一次出现的索引 length 获取字节个数2、数学函数 round 四舍五入 rand 随机数 floor向下取整 ceil向上取整 mod取余 truncate截断3、日期函数 now当前系统日期+时间 curdate当前系统日期 curtime当前系统时间 str_to_date 将字符转换成日期 date_format将日期转换成字符4、流程控制函数 if 处理双分支 case语句 处理多分支 情况1：处理等值判断 情况2：处理条件判断5、其他函数 version版本 database当前库 user当前连接用户 二、分组函数 123456789101112131415sum 求和max 最大值min 最小值avg 平均值count 计数特点：1、以上五个分组函数都忽略null值，除了count(*)2、sum和avg一般用于处理数值型 max、min、count可以处理任何数据类型3、都可以搭配distinct使用，用于统计去重后的结果4、count的参数可以支持： 字段、*、常量值，一般放1 建议使用 count(*) 进阶5：分组查询1234567891011121314151617语法：select 查询的字段，分组函数from 表group by 分组的字段特点：1、可以按单个字段分组2、和分组函数一同查询的字段最好是分组后的字段3、分组筛选 针对的表 位置 关键字分组前筛选： 原始表 group by的前面 where分组后筛选： 分组后的结果集 group by的后面 having4、可以按多个字段分组，字段之间用逗号隔开5、可以支持排序6、having后可以支持别名 进阶6：多表连接查询12笛卡尔乘积：如果连接条件省略或无效则会出现解决办法：添加上连接条件 一、传统模式下的连接 ：等值连接——非等值连接 12341.等值连接的结果 &#x3D; 多个表的交集2.n表连接，至少需要n-1个连接条件3.多个表不分主次，没有顺序要求4.一般为表起别名，提高阅读性和性能 二、sql99语法：通过join关键字实现连接 123456789101112131415161718含义：1999年推出的sql语法支持：等值连接、非等值连接 （内连接）外连接交叉连接语法：select 字段，...from 表1【inner|left outer|right outer|cross】join 表2 on 连接条件【inner|left outer|right outer|cross】join 表3 on 连接条件【where 筛选条件】【group by 分组字段】【having 分组后的筛选条件】【order by 排序的字段或表达式】好处：语句上，连接条件和筛选条件实现了分离，简洁明了！ 三、自连接 案例：查询员工名和直接上级的名称 sql99 123SELECT e.last_name,m.last_nameFROM employees eJOIN employees m ON e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;; sql92 123SELECT e.last_name,m.last_nameFROM employees e,employees m WHERE e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;; 进阶7：子查询含义： 12一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询 特点： 123456789101112131415161、子查询都放在小括号内2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧3、子查询优先于主查询执行，主查询使用了子查询的执行结果4、子查询根据查询结果的行数不同分为以下两类：① 单行子查询 结果集只有一行 一般搭配单行操作符使用：&gt; &lt; &#x3D; &lt;&gt; &gt;&#x3D; &lt;&#x3D; 非法使用子查询的情况： a、子查询的结果为一组值 b、子查询的结果为空② 多行子查询 结果集有多行 一般搭配多行操作符使用：any、all、in、not in in： 属于子查询结果中的任意一个就行 any和all往往可以用其他查询代替 进阶8：分页查询应用场景： 1实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句 语法： 1234567select 字段|表达式,...from 表【where 条件】【group by 分组字段】【having 条件】【order by 排序的字段】limit 【起始的条目索引，】条目数; 特点： 123456781.起始条目索引从0开始2.limit子句放在查询语句的最后3.公式：select * from 表 limit （page-1）*sizePerPage,sizePerPage假如:每页显示条目数sizePerPage要显示的页数 page 进阶9：联合查询引入： union 联合、合并 语法： 12345select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】 特点： 1231、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型几乎相同3、union代表去重，union all代表不去重 DML语言插入语法： insert into 表名(字段名，…) values(值1，…); 特点： 123451、字段类型和值类型一致或兼容，而且一一对应2、可以为空的字段，可以不用插入值，或用null填充3、不可以为空的字段，必须插入值4、字段个数和值的个数必须一致5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致 修改修改单表语法： 12update 表名 set 字段&#x3D;新值,字段&#x3D;新值【where 条件】 修改多表语法： 1234update 表1 别名1,表2 别名2set 字段&#x3D;新值，字段&#x3D;新值where 连接条件and 筛选条件 删除方式1：delete语句 单表的删除： ★ delete from 表名 【where 筛选条件】 多表的删除： delete 别名1，别名2 from 表1 别名1，表2 别名2 where 连接条件 and 筛选条件; 方式2：truncate语句 1truncate table 表名 两种方式的区别【面试题】 12345678#1.truncate不能加where条件，而delete可以加where条件#2.truncate的效率高一丢丢#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始#4.truncate删除不能回滚，delete删除可以回滚 DDL语句库和表的管理库的管理： 1234一、创建库create database 库名二、删除库drop database 库名 表的管理： #1.创建表 12345678910111213141516171819202122232425262728293031CREATE TABLE IF NOT EXISTS stuinfo( stuId INT, stuName VARCHAR(20), gender CHAR, bornDate DATETIME);DESC studentinfo;#2.修改表 alter语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;#①修改字段名ALTER TABLE studentinfo CHANGE COLUMN sex gender CHAR;#②修改表名ALTER TABLE stuinfo RENAME [TO] studentinfo;#③修改字段类型和列级约束ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;#④添加字段ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;#⑤删除字段ALTER TABLE studentinfo DROP COLUMN email;#3.删除表DROP TABLE [IF EXISTS] studentinfo; 常见类型12345678整型：小数： 浮点型 定点型字符型：日期型：Blob类型： 常见约束123456NOT NULLDEFAULTUNIQUECHECKPRIMARY KEYFOREIGN KEY 数据库事务含义1通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态 特点12345（ACID）原子性：要么都执行，要么都回滚一致性：保证数据的状态操作前和操作后保持一致隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改 相关步骤： 1231、开启事务2、编写事务的一组逻辑操作单元（多条sql语句）3、提交事务或回滚事务 事务的分类：隐式事务，没有明显的开启和结束事务的标志 12比如insert、update、delete语句本身就是一个事务 显式事务，具有明显的开启和结束事务的标志 1234567891、开启事务取消自动提交事务的功能2、编写事务的一组逻辑操作单元（多条sql语句）insertupdatedelete3、提交事务或回滚事务 使用到的关键字12345678set autocommit&#x3D;0;start transaction;commit;rollback;savepoint 断点commit to 断点rollback to 断点 事务的隔离级别:事务并发问题如何发生？ 1当多个事务同时操作同一个数据库的相同数据时 事务的并发问题有哪些？ 123脏读：一个事务读取到了另外一个事务未提交的数据不可重复读：同一个事务中，多次读取到的数据不一致幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据 如何避免事务的并发问题？ 12345通过设置事务的隔离级别1、READ UNCOMMITTED2、READ COMMITTED 可以避免脏读3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读4、SERIALIZABLE可以避免脏读、不可重复读和幻读 设置隔离级别： 1set session|global transaction isolation level 隔离级别名; 查看隔离级别： 1select @@tx_isolation; 视图含义：理解成一张虚拟的表 视图和表的区别： 12345 使用方式 占用物理空间视图 完全相同 不占用，仅仅保存的是sql逻辑表 完全相同 占用 视图的好处： 121、sql语句提高重用性，效率高2、和表实现了分离，提高了安全性 视图的创建1234语法：CREATE VIEW 视图名AS查询语句; 视图的增删改查1234567891011121314151、查看视图的数据 ★SELECT * FROM my_v4;SELECT * FROM my_v1 WHERE last_name&#x3D;&#39;Partners&#39;;2、插入视图的数据INSERT INTO my_v4(last_name,department_id) VALUES(&#39;虚竹&#39;,90);3、修改视图的数据UPDATE my_v4 SET last_name &#x3D;&#39;梦姑&#39; WHERE last_name&#x3D;&#39;虚竹&#39;;4、删除视图的数据DELETE FROM my_v4; 某些视图不能更新123456包含以下关键字的sql语句：分组函数、distinct、group by、having、union或者union all常量视图Select中包含子查询joinfrom一个不能更新的视图where子句的子查询引用了from子句中的表 视图逻辑的更新123456789101112#方式一：CREATE OR REPLACE VIEW test_v7ASSELECT last_name FROM employeesWHERE employee_id&gt;100;#方式二:ALTER VIEW test_v7ASSELECT employee_id FROM employees;SELECT * FROM test_v7; 视图的删除1DROP VIEW test_v1,test_v2,test_v3; 视图结构的查看12DESC test_v7;SHOW CREATE VIEW test_v7; 存储过程含义：一组经过预先编译的sql语句的集合 好处： 1231、提高了sql语句的重用性，减少了开发程序员的压力2、提高了效率3、减少了传输次数 分类： 1234561、无返回无参2、仅仅带in类型，无返回有参3、仅仅带out类型，有返回无参4、既带in又带out，有返回有参5、带inout，有返回有参注意：in、out、inout都可以在一个存储过程中带多个 创建存储过程语法： 12345create procedure 存储过程名(in|out|inout 参数名 参数类型,...)begin 存储过程体end 类似于方法： 1234修饰符 返回类型 方法名(参数类型 参数名,...)&#123; 方法体;&#125; 注意 1234567891011121314151617181、需要设置新的结束标记delimiter 新的结束标记示例：delimiter $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)BEGIN sql语句1; sql语句2;END $2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end3、参数前面的符号的意思in:该参数只能作为输入 （该参数不能做返回值）out：该参数只能作为输出（该参数只能做返回值）inout：既能做输入又能做输出 调用存储过程1call 存储过程名(实参列表) 函数创建函数学过的函数：LENGTH、SUBSTR、CONCAT等 语法： 12345CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型BEGIN 函数体END 调用函数1SELECT 函数名（实参列表） 函数和存储过程的区别123 关键字 调用语法 返回值 应用场景函数 FUNCTION SELECT 函数() 只能是一个 一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个存储过程 PROCEDURE CALL 存储过程() 可以有0个或多个 一般用于更新 流程控制结构系统变量一、全局变量 作用域：针对于所有会话（连接）有效，但不能跨重启 123456789查看所有全局变量SHOW GLOBAL VARIABLES;查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;查看指定的系统变量的值SELECT @@global.autocommit;为某个系统变量赋值SET @@global.autocommit&#x3D;0;SET GLOBAL autocommit&#x3D;0; 二、会话变量 作用域：针对于当前会话（连接）有效 12345678910查看所有会话变量SHOW SESSION VARIABLES;查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.tx_isolation;为某个会话变量赋值SET @@session.tx_isolation&#x3D;&#39;read-uncommitted&#39;;SET SESSION tx_isolation&#x3D;&#39;read-committed&#39;; 自定义变量一、用户变量 声明并初始化： 123SET @变量名&#x3D;值;SET @变量名:&#x3D;值;SELECT @变量名:&#x3D;值; 赋值： 123456789方式一：一般用于赋简单的值SET 变量名&#x3D;值;SET 变量名:&#x3D;值;SELECT 变量名:&#x3D;值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表; 使用： 1select @变量名; 二、局部变量 声明： 1declare 变量名 类型 【default 值】; 赋值： 123456789方式一：一般用于赋简单的值SET 变量名&#x3D;值;SET 变量名:&#x3D;值;SELECT 变量名:&#x3D;值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表; 使用： 1select 变量名 二者的区别： 1作用域 定义位置 语法 用户变量 当前会话 会话的任何地方 加@符号，不用指定类型 局部变量 定义它的BEGIN END中 BEGIN END的第一句话 一般不用加@,需要指定类型 分支一、if函数 语法：if(条件，值1，值2) 特点：可以用在任何位置 二、case语句 语法： 123456789101112131415情况一：类似于switchcase 表达式when 值1 then 结果1或语句1(如果是语句，需要加分号) when 值2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）情况二：类似于多重ifcase when 条件1 then 结果1或语句1(如果是语句，需要加分号) when 条件2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要） 特点： 可以用在任何位置 三、if elseif语句 语法： 12345if 情况1 then 语句1;elseif 情况2 then 语句2;...else 语句n;end if; 特点： 只能用在begin end中！！！！！！！！！！！！！！！ 三者比较： 应用场合 if函数 简单双分支 case结构 等值判断 的多分支 if结构 区间判断 的多分支 循环语法： 123【标签：】WHILE 循环条件 DO 循环体END WHILE 【标签】; 特点： 12345只能放在BEGIN END里面如果要搭配leave跳转语句，需要使用标签，否则可以不用标签leave类似于java中的break语句，跳出所在循环！！！ 引用：尚硅谷—mysql基础语法总结","categories":[],"tags":[{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"数据结构 第三章 静态链表","slug":"数据结构 第三章 静态链表","date":"2020-09-09T13:38:32.000Z","updated":"2020-09-16T08:46:29.418Z","comments":true,"path":"2020/09/09/数据结构 第三章 静态链表/","link":"","permalink":"http://yoursite.com/2020/09/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/","excerpt":"","text":"读物：《大话数据结构》 印次：2020年5月第25次印刷(2020.5重印) 大纲 基本概念 静态链表的初始化 静态链表的插入操作 小结 基本概念 静态链表：用数组描述的链表叫做静态链表。 如Basic、Fortran等早期编程语言，没有指针，就可通过数组实现链表结构(游标实现法)。 静态链表使用两个数据域组成，分别叫data、cur，cur类似单链表中的next。不记录指针，而是记录后继元素的数组下标。 123456/*线性表的静态链表存储结构*/#define MAXSIZE 1000typedef struct&#123; ElemType data; int cur; /*游标(Cursor)，为0时表示无指向*/&#125; 静态链表的第一个和最后一个元素作为特殊处理，不存数据。 未被使用的数组元素称为备用链表。 下标为0的第一个元素cur称为头指针，用于存放备用链表的下标。 数组最后一个元素的cur，存放第一个有数值元素的下标(相当于头结点)。 静态链表初始化123456789/*将一维数组space中各个分量链成一备用链表*/Status InitList(StaticLinkList space)&#123; int i; for(i = 0; i &lt; MAXSIZE - 1; i++)/*为链表所有元素cur赋值，将其中各个分量链成一备用链表*/ space[i] = i + 1; space[MAXSIZE - 1].cur = 0; /*目前链表为空，最后一个元素的cur为0*/ return OK;&#125; 静态链表的插入操作链表的插入/删除操作都需要调用存储空间的申请/释放函数。标准定义的malloc，free函数直接调用就可自动申请或释放空间。对于通过数组实现链表功能的静态链表实现插入/删除操作首先要解决的问题：如何用**静态模拟动态链表对存储空间的分配/管理(申请/释放)**。需要时申请、无用时释放。 Malloc_SSL 因此静态链表需要自己实现单链表的malloc函数功能。 功能描述：若备用空间链表非空，则返回可分配的结点下标(类似向内存申请空间，返回地址值)，否则返回0。 实现思路： 静态链表设计本身然下标为0的元素存放备用链表的下标，所以直接返回下标0的cur即可。 同时，需要把即将返回的备用链表的cur值重新填充到下标为0的cur，为下次分配使用。 12345678910/*若备用空间链表非空，则返回可分配的结点下标，否则返回0*/int Malloc_SSL(StaticLinkList space) &#123; int i = space[0].cur; /* 当前数组第一个元素的cur存的值 */ /* 就是要返回的第一个备用空闲的下标 */ if (space[0]. cur) space[0]. cur = space[i].cur; /* 由于要拿出一个分量来使用了， */ /* 所以我们就得把它的下一个 */ /* 分量用来做备用 */ return i;&#125; ListInsert思路： 基本插入错误过滤 获取空闲分量下标 填充数据域 定位前继结点 头插法 12345678910111213141516171819202122Status ListInsert(StaticLinkList L, int i, ElemType e) &#123; if (i &lt; 1 || i &gt; ListLength(L) + 1) //若链表已满 return ERROR; int j = Malloc_SLL(L); //获得空闲分量的下标 if (j) &#123; L[j].data = e;//将数据赋值给此分量的data int k = MAXSIZE -1,l; //找到插入位置的前继元素，(计数器+while+工作指针后移) //静态链表的头结点在尾部 for (l = 1; l &lt;= i - 1; l++) k = L[k].cur; L[j].cur = L[k].cur;//改变游标指向(头插法) L[k].cur = j; //先把前继节点的后继游标传给新节点的后继游标 return OK; &#125; return ERROR; //若获取分量失败则返回错误 &#125; 注意： 获取头结点下标：int k = MAXSIZE -1 Free_SSL同样，静态链表实现删除操作也要先实现free函数 1234567/*将下标为k的空闲结点回收到备用链表*/void Free_SSL(StaticLinkList space, int k) &#123; space[k].cur = space[0].cur; //让即将要删除的位置成为第一个优先的空位 space[0].cur = k; //即删除节点与备用链表交换两个参数&#125; ListDelete12345678910111213141516Status ListDelete(StaticLinkList L, int i) &#123; if (i &lt; 1 || i &gt; ListLength(L))//删除索引过滤 return ERROR; int k = MAXSIZE - 1; int l; for (l = 1; l &lt;= i -1; l++) //定位前继节点 k = L[k].cur; int d = L[k].cur;//创建临时变量存储欲删除cur L[k].cur = L[d].cur; Free_SSL(L,d); return OK;&#125; 小结静态链表其实为了给没有指针的高级语言设计的一种实现单链表能力的方法。特性与单链表类似，尽管以后这种方法不一定用上，但这样的思考方式是非常巧妙的。","categories":[],"tags":[{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"将hexo发布在gitee教程","slug":"将hexo发布在gitee","date":"2020-09-07T07:38:32.000Z","updated":"2020-09-08T08:36:37.251Z","comments":true,"path":"2020/09/07/将hexo发布在gitee/","link":"","permalink":"http://yoursite.com/2020/09/07/%E5%B0%86hexo%E5%8F%91%E5%B8%83%E5%9C%A8gitee/","excerpt":"","text":"前提 已经安装hexo，并且能够通过hexo d命令推送到GitHub实现远程推送。 实现方案具体可参考《基于Hexo框架的博客搭建及其GitHub部署》 已经注册Gitee账号并且绑定手机。 Gitee新建仓库 新建仓库时名称最好是保持跟你注册时的个人空间地址是一样的。因为这样你就不会生成二级域名了。如果不跟注册时的个人空间地址一样的话，到时候自己的网站就会有二级域名的存在了。 输入仓库名称与路径后会在“归属”一栏下生成一个仓库链接，记录下来为之后的_config.yml文件配置做准备 _config.yml文件配置修改配置文件中repo 属性为：{仓库地址} .git 仓库地址在创建仓库的时候会显示，或者在刚创建完的时候浏览器的url就是仓库地址 仓库地址一般组成： https://gitee.com/{个人空间名}/{仓库名称} 123456# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy: type: &#39;git&#39; repo: &#123;仓库地址&#125;.git branch: master repo: https://gitee.com/yihangdeng/yihangdeng.git 修改配置保存后，可以像推送到GitHub上那样，通过hexo d命令上传到gitee。刷新gitee仓库查看是否有内容 开启仓库page服务 进入页面后直接点击启动即可。 启动完成后会生成网站地址，这个网站地址就是访问你博客的地址。 gitee page 只有付费版才能自动更新，免费版只能手动点击 “设置” 中的更新按钮更新部署。 参考链接 gitee：https://www.cnblogs.com/chaojilaoshi/p/13266271.html gitee：https://www.jianshu.com/p/5014133ba61a page更新：https://www.jianshu.com/p/6460df84a099","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"数据结构 第三章 单链表","slug":"数据结构 第三章 单链表","date":"2020-09-05T14:38:32.000Z","updated":"2020-09-08T08:40:56.445Z","comments":true,"path":"2020/09/05/数据结构 第三章 单链表/","link":"","permalink":"http://yoursite.com/2020/09/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%8D%95%E9%93%BE%E8%A1%A8/","excerpt":"","text":"读物：《大话数据结构》 印次：2020年5月第25次印刷(2020.5重印) 大纲 线性表链式存储结构定义 单链表的创建 单链表的读取 单链表的插入和删除 总结 线性表链式存储结构定义基本概念为保持线性结构“前驱后继，一对一”逻辑结构前提下，同时避免顺序存储结构中对相邻关系的依赖性。链式结构，除了要存数据元素信息外，还要存储它的后继元素的存储地址。 数据域：存储数据元素信息的域 指针域：存储直接后继位置的域，其中存储的信息称做指针或链 结点(Node)：数据域和指针域组成数据元素ai的存储映像 链表：由n个结点链成的一个链表 单链表：链表中的每个结点只包含一个指针域 单链表正是通过每个结点的指针域将线性表的数据元素按其逻辑次序链接在一起，如图所示： 线性表链式存储结构代码描述 相关规定，线性链表的最后一个结点为“空”(用NULL或“^”符号表示) 头结点：在单链表的第一个结点前附设的一个结点，指针域指向第一个结点，若指针域为“空”，表示线性表为空 头结点主要作用是为便于对链表进行统一操作，头结点的数据域可不存储信息，或者存储线性表长度等附加信息。 单链表的定义123456//线性表的单链表存储结构typedef struct Node &#123; ElemType data; struct Node *next;&#125;Node;typedef struct Node *LinkList;//定义LinkList，指针变量的typedef typedef struct Node &#123;...&#125;Node;中的Node同名对象(实例)Node的作用：常用于为sizeof()函数传参。 typedef struct Node *LinkList; 语法理解：如typedef int Status; ‘Status‘等价于int，在这里可以看作类似变量的声明，即 声明一个int类型变量Status int Status，而int *Status表示定义一个int型的指针变量。同样类比在typedef中，“*”表示typedef的对象是Node 结构体的指针变量，即LinkList 等价于 struct Node *linkList; (不过写法上确实有点新颖，有点融合着写) 单链表的创建单链表的初始化单链表的初始化，即空表的建立 InitList123456789/* 初始化顺序线性表 */Status InitList(LinkList *L) &#123; *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点(向内存申请一个结点的空间),并使L指向此头结点 */ if(!(*L)) /* 存储分配失败 */ return ERROR; (*L)-&gt;next=NULL; /* 指针域为空 */ return OK;&#125; malloc函数：void *malloc(long NumBytes)向内存申请NumBytes个字节的空间，并返回了指向这块内存的指针。若分配失败，则返回一个空指针(NULL）,如系统空间不足等失败情况。使用malloc函数需注意如下几点： 申请了内存空间后，必须检查是否分配成功。 当不需要再使用申请的内存时，记得释放；并把这块内存的指针指向NULL，防止程序后面不小心使用了它。 malloc与free这两个函数应该是配对使用。如果申请后不释放就是内存泄露；如果无故释放那就是什么也没有做。释放只能一次，如果释放两次及两次以上会出现错误（释放空指针例外，释放空指针其实也等于啥也没做，所以释放空指针释放多少次都没有问题）。 虽然malloc()函数的类型是(void *)，任何类型的指针都可以转换成(void *),但是最好还是在前面进行强制类型转换，因为这样可以躲过一些编译器的检查。 参考链接：malloc()和free()的基本概念以及基本用法 LinkList *L形参的理解： Status InitList(LinkList *L)注意，此时传入形参L已是二级指针(指针的指针)。 一级指针与二级指针的区别与使用： 形参传递永远是值传递(临时变量)，想要通过调用函数去改变传入实参的内容，则需要至少传入欲修改参数类型基础上的一级指针，并且通过“*” 调用实体内容进行修改。而并不能仅修改传入新参的内容，因为新参内容本身怎么修改都不会影响传入的实参。(值传递原则) 当传值时，只可以引用值而不可以改变值， 当你传指针时，只可以改变指针所指的内容，不可以改变指针本身 但传指针的指针时，即可以改变指针所指的内容，又可以改变指针本身 LinkList *L二级指针的用处：回归目的本身，很明确。即想要LinkList L;这个指针变量L最终指向通过malloc函数申请空间后返回的地址值(即地址的赋值)。理应L=malloc(sizeof(Node));即可，从一条语句操作上是完全正确的，类型也是一致的。但问题在于如今想要通过调用函数且把L作为实参传入修改其地址值。这样的前提下，若只传入想要修改内容类型的本身(这里就是指针变量/一级指针)，安装值传递原则是达不到效果的，代码如下所示： 12345678910111213Status InitList(LinkList L) &#123; //形参修改成一级指针 L = (LinkList)malloc(sizeof(Node)); if (!(L)) return ERROR; L-&gt;next = NULL; &#125;void main() &#123; LinkList L = NULL; InitList(L); if (L == NULL) printf(&quot;L=NULL&quot;);//最终L还是NULL被打印出来，没有被改变 getchar();&#125; “想要通过调用函数去改变传入实参的内容，则需要至少传入欲修改参数类型基础上的一级指针”，即先要修改指针值本身，则至少需要传入该参数类型上的一级指针，即指针的指针，这就是Status InitList(LinkList L) &#123;...&#125; 二级指针形参的意义。 参考链接： (C++)函数参数传递中的一级指针和二级指针 引用传递和值传递以及链表中的LinkList L、LinkList *L、LinkList &amp;L 单链表的整表创建单链表的整表创建又分为“头插法”，“尾插法”两种。 CreateListHead“头插法”即生成新结点永远只和头结点“交易”，“后到却排头”，把NULL不断后移 123456789101112131415/* 随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */void CreateListHead(LinkList *L, int n) &#123; LinkList p; int i; srand(time(0)); /* 初始化(修改)随机数种子 */ *L = (LinkList)malloc(sizeof(Node)); (*L)-&gt;next = NULL; /* 先建立一个带头结点的单链表 */ for (i=0; i&lt;n; i++) &#123; p = (LinkList)malloc(sizeof(Node)); /* 生成新结点 */ p-&gt;data = rand()%100+1; /* 随机生成100以内的数字填充数据域 */ p-&gt;next = (*L)-&gt;next; (*L)-&gt;next = p; /* 插入到表头 */ &#125;&#125; srand函数与rand函数使用(stdio.h) void srand(unsigned int seed)：设置随机数种子 srand函数用来设置rand函数产生随机数时的随机数种子，参数seed必须是整数，通常可以用time(0)的返回值作为seed。如果每次seed都设置相同的值，rand()产生 一系列 随机数值每次都一样。当计算机正常开机后，随机种子的值是定了的，除非你破坏了系统，或者通过srand函数修改。 int rand(void)：生成随机数 在0到RAND_MAX之间的整数值生成一个随机数，rand的内部是用线性同余法做的，不是真的随机数，只不过因为其周期特别长，所以在一定范围内可以看成是随机的。(RAND_MAX的范围最少在32767之间（int），即双字节（16位）。若unsigned int双字节是65535) 参考链接：C语言的srand与rand函数浅谈 time函数的使用 函数原型：time_t time(time_t *seconds) time函数用于返回格林尼治时间(1970年1月1日00:00:00到当前时刻的时长)，单位是秒。存在与&lt;time.h&gt;库，一般使用方式t1=time(NULL) 或 t1=time(0)来获取当前格林尼治时间。 CreateListTail“尾插法”，符合日常排队思维，后到的排在后。即新结点放在头结点的指针域，接下来所有新结点都在当前的尾结点后插入。 123456789101112131415/* 随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */void CreateListTail(LinkList *L, int n) &#123; LinkList p,r; int i; srand(time(0)); /* 初始化随机数种子 */ *L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */ r=*L; /* r为指向尾部的结点 */ for (i=0; i&lt;n; i++) &#123; p = (Node *)malloc(sizeof(Node)); /* 生成新结点 */ p-&gt;data = rand()%100+1; /* 随机生成100以内的数字 */ r-&gt;next=p; /* 将表尾终端结点的指针指向新结点 */ r = p; /* 将当前的新结点定义为表尾终端结点 */ &#125; r-&gt;next = NULL; /* 表示当前链表结束 */&#125; 除了首次循环r是头结点，其余r成为了永远的尾结点。 r = p;功能是，注意这里没有真正修改了地址值，而是局部变量顺应循环设计的循环变换，变换内容是将最新插入的结点成为下次循环的尾结点。 单链表的整表删除思路： 声明一结点p和q； 将第一个结点赋值给p； 循环： 将下一个结点赋值给q； 释放p； 将q赋值给p 123456789101112/* 初始条件：顺序线性表L已存在。操作结果：将L重置为空表 */Status ClearList(LinkList *L)&#123; LinkList p,q; p=(*L)-&gt;next; /* p指向第一个结点 */ while(p)&#123; /* 没到表尾 */ q=p-&gt;next; free(p); p=q; &#125; (*L)-&gt;next=NULL; /* 头结点指针域为空 */ return OK;&#125; free函数，它的作用就是让系统回收一个Node结点，释放内存。 单链表的读取GetElem思路： 声明一个LinkList p，指向链表的第一个结点(查询不查头结点)。 设置计时器变量 j，并初始化为1，通过重新数数的方式找到序号位置。 当j&lt;i时，遍历链表，让p的**指针向后移动**，称为“工作指针后移”，计时器j累加1. 若到链表末尾p为空，则说明第i个结点不存在。 否则查找成功，返回结点p的数据。 123456789101112131415161718/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) *//* 操作结果：用e返回L中第i个数据元素的值 */Status GetElem(LinkList L,int i,ElemType *e)&#123; //--------------查询部分--------------- int j; LinkList p; /* 声明一结点p */ p = L-&gt;next; /* 让p指向链表L的第一个结点 */ j = 1; /* j为计数器 */ while (p &amp;&amp; j&lt;i)&#123; /* p不为空或者计数器j还没有等于i时，循环继续 */ p = p-&gt;next; /* 让p指向下一个结点 */ ++j; &#125; if ( !p || j&gt;i ) //注意这里是 大于 &gt; 符号 return ERROR; /* 第i个元素不存在 */ //--------------查询部分--------------- *e = p-&gt;data; /* 取第i个元素的数据 */ return OK;&#125; 链式存储没有表长，更加没有序号。事先不知循环次数，只能设置计数器，使用while循环解决; 最坏情况复杂度是O(n); 单链表的插入和删除ListInsert思路： 按照插入原理，首先需定位到i -1 **结点位置，即插入位置的前继结点**，调整GetElem函数查询部分代码即可； 创建空节点s，并把数据元素e填充到数据域； 插入原理(单链表插入标准语句)：s-&gt;next = p-&gt;next; P-&gt;next=s;； 返回成功； 12345678910111213141516171819/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， *//* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */Status ListInsert(LinkList *L,int i,ElemType e)&#123; int j; LinkList p,s; p = *L; j = 1; while (p &amp;&amp; j &lt; i)&#123; /* 寻找第i-1个结点 */ p = p-&gt;next; ++j; &#125; if (!p || j &gt; i) return ERROR; /* 第i个元素不存在 */ s = (LinkList)malloc(sizeof(Node)); /* 生成新结点(C语言标准函数) */ s-&gt;data = e; s-&gt;next = p-&gt;next; /* 将p的后继结点赋值给s的后继 */ p-&gt;next = s; /* 将s赋值给p的后继 */ return OK;&#125; 要点： ListInsert函数巧妙将p赋值为头结点地址p = *L;来实现定位i - 1结点位置功能(插入位置的前继结点)。有别于GetElem函数p = (*L)-&gt;next;。 插入原理：新结点的指针域通过修改i - 1结点的后继节点指向完成结点的插入。 插入原理的两条语句不能颠倒执行顺序。 ListDelete思路： 按照删除原理，同样需定位到i -1 **结点位置，并且不能删除头结点**； 定位成功后，创建一个用于临时存放的节点指针q，将欲删除的节点p-&gt;next赋值给q； 将q节点中的数据赋值给e，作为返回； 释放q节点； 返回成功； 12345678910111213141516171819/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) *//* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */Status ListDelete(LinkList *L,int i,ElemType *e) &#123; int j; LinkList p,q; p = *L; j = 1; while (p-&gt;next &amp;&amp; j &lt; i)&#123; /* 遍历寻找第i个元素 */ p = p-&gt;next; ++j; &#125; if (!(p-&gt;next) || j &gt; i) return ERROR; /* 第i个元素不存在 */ q = p-&gt;next; p-&gt;next = q-&gt;next; /* 将q的后继赋值给p的后继 */ *e = q-&gt;data; /* 将q结点中的数据给e */ free(q); /* 让系统回收此结点，释放内存 */ return OK;&#125; 要点： 有别于GetElem与ListInsert函数while或if条件p，ListDelete函数的条件改为p-&gt;next。 GetElem条件判断p是否为NULL，是因为p的初始值就定义成 p = (*)L-&gt;next，不存在对头结点操作的可能性; ListInsert条件判断p是否为NULL，是因为插入数据是允许空表插入; ListDelete条件判断p是否为NULL，是因为删除不允许空表删除。 与整表删除要点一致，均需要通过一个变量q去记录将要删除的结点地址，不然会丢失地址，造成内存泄漏。 插入和删除复杂度分析 当不知第i个结点指针位置(首次插入/删除)，时间复杂度为O(n)； 若需要在i个位置插入若干个结点，则除了第一次外其余结点插入或删除的时间复杂度为O(1)； 结论：插入或删除数据越频繁的操作，单链表的效率优势就越明显。 总结单链表各方法实现思路 GetEelm：计数器 + while循环匹配 + 工作指针后移 p-&gt;next = p;； ListInsert / CreateListHead：均采用了插入的方法，`s-&gt;next=p-&gt;next; p-&gt;next=s;； ListInsert/ ListDelete：均需要定位到欲操作位置的前继结点，通过初始赋值头结点地址p=(*L)； ListDelete： “绕指针删除”q=p-&gt;next; p-&gt;next=q-&gt;next;； ListDelete / ClearList：均需将欲删除结点用另一个变量暂存后再删除，不然会丢失地址，造成内存泄漏； CreateListTail / ClearList：同样在循环内通过局部变量直接交换节点地址实现，节点操作按序进行(从前到后)，如尾插法r-&gt;next=p; r =p;或整表删除q=p-&gt;next; free(p); p=q; 不同操作中指针类型的要求原理：形参传递永远是值传递(临时变量)，想要通过调用函数去改变传入实参的内容必须： 至少传入欲修改参数类型基础上的一级指针 *通过“” 调用实体内容进行修改。 结论： 当传值时，只可以引用值而不可以改变值， 当你传指针时，只可以改变指针所指的内容，不可以改变指针本身 但传指针的指针时，即可以改变指针所指的内容，又可以改变指针本身 初始化链表需要用二级指针； 销毁链表(头结点也销毁)需要用到二级指针； 插入、删除、遍历、清空结点用一级指针即可； 单链表结构与顺序存储结构优缺点 存储结构 存储分配方式 时间性能 空间性能 顺序存储 连续存储单元 查找：O(1)，插删：O(n) 需预定分配存储空间，而大小不好掌握 链式存储 任意存储单元 查找：O(n)，插删：O(n) 或 O(1) 无需事先预定，内存有空间即可，不限数量 若线性表需要频繁查找且很少进行插入和删除操作，宜采用顺序存储结构； 如用户注册的个人信息，除了注册时插入数据外，绝大多数都是读取而且 若线性表需要频繁增加和删除，宜采用链式存储结构； 如游戏中玩家的武器装备仓库列表等 若线性表元素个数变化较大，或者根本不知道有多大时，最好用单链表结构不用考虑空间分配问题；","categories":[],"tags":[{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"数据结构 第三章 线性表及其顺序存储结构","slug":"数据结构 第三章 线性表及其顺序存储结构","date":"2020-09-03T04:40:32.000Z","updated":"2020-09-07T08:29:58.058Z","comments":true,"path":"2020/09/03/数据结构 第三章 线性表及其顺序存储结构/","link":"","permalink":"http://yoursite.com/2020/09/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%8F%8A%E5%85%B6%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","excerpt":"","text":"读物：《大话数据结构》 印次：2020年5月第25次印刷(2020.5重印) 大纲 线性表的定义 线性表的抽象数据类型 线性表的顺序存储结构 地址计算方法 顺序存储结构的存入与取出 顺序存储结构的插入与删除 线性表顺序存储结构的优缺点 线性表的定义线性表（List）：零个(空表)或多个数据元素的有限序列。即线性表的长度n≧0。关键点如下： 序列：表示元素之间是有严格的顺序。元素之间的关系是一对一的关系。 若线性表记为(a1，…ai-1，ai，ai+1，…，an)，称ai-1是ai的直接前驱元素，ai+1则是ai的直接后继元素 第一个元素无前驱，最后一个元素无后继，其他元素有且只有一个前驱和后继 有限 元素类型相同 线性表的抽象数据类型线性表的抽象数据类型定义如下： 1234567891011121314ADT 线性表（List）Data &#123;a1,a2,…,an&#125;Operation InitList(*L): 初始化操作，建立一个空的线性表L。 ListEmpty(L): 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 ClearList(*L): 将线性表清空。 GetElem(L,i,*e): 将线性表L中的第i个位置元素值返回给e。 LocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功， 返回该元素在表中序号表示成功；否则，返回0表示失败。 ListInsert(*L,i,e): 在线性表L中第i个位置插入新元素e。 ListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。 ListLength(L): 返回线性表L的元素个数。endADT ps：上述为最基本操作，其他更复杂的操作完全可以通过这些基本操作组合实现。 线性表的顺序存储结构线性表的顺序存储定义线性表的顺序存储结构：指的是用一段地址连续的存储单元依次存储线性表的数据元素。 最常见的就是用一维数组来实现顺序存储结构 线性表的顺序存储结构代码如下： 123456#define MAXSIZE 20 //存储空间处时分配量typedef int ElemType //数据类型根据实际情况而定，这里假设为inttypedef strcuct&#123; ElemType data [MAXSIZE]; int length; //线性表当前长度&#125;SqList; 据上述可知，描述顺序存储结构需要三个属性： 存储空间的起始位置：其实就是数组data(首地址) 线性表的最大存储容量：数组长度MaxSize 线性表的当前长度：length 顺序线性表的初始化12345/* 初始化顺序线性表 */Status InitList(SqList *L) &#123; L-&gt;length=0; return OK;&#125; 地址计算方法数组长度与线性表长度的区别 数组长度：是指存放线性表存储空间的长度，一般是固定值。int data[3]={1,2,3}长度为3。 线性表长度：线性表中存在数据元素个数，是经常变化的。 数组下标从“0”开始，线性表是从“1”数起的。 地址计算方法数据元素的序号和存放它的数组下标之间对应关系如下图所示： 对于第i个数据元素ai的存储位置可由a1推算出： LOC(ai) = LOC(a1)+(i-1)*c LOC表示获得存储位置的函数，c表示数据元素的类型的存储单元 顺序存储结构的存入与取出GetElem思路： 线性表必须存在数据; i 的数值在数组下标范围内; 返回数组的第 i-1 下标的值即可; 123456789101112131415#define OK 1#define ERROR 0#define TRUE 1#define FALSE 0typedef int Status;//基本说明：Status是函数的类型，其值是函数结果状态代码，如OK等//初始条件(输入条件)：线性表L已存在，位置参数i范围应处于： 1 ≤ i ≤ ListLength(L)//操作结果：用e返回L中的第i个元素Status GetElem(SqList L,int i,ElemType *e) &#123; if (L.length == 0 || i &lt; 1 || i &gt; L.length) return ERROR; *e = L.data[i - 1]; return OK;&#125; 任意位置的存取时间复杂度都为O(1)**，即存取性能为O(1)，称为“随机存取结构**”。 “存取”，不等于“插删” 顺序线性表的存取仅需要知道存入的位置逻辑即可，因此查询位置的复杂度决定了存取的复杂度 顺序存储结构的插入与删除存在线性表定义如下： 1234567#define MAXSIZE 20typedef int ElemType;typedef struct &#123; ElemType data[MAXSIZE]; int length;&#125;SqList; ListInsert思路： 如果线性表的长度等于数组长度，则抛出异常或者动态增加容量; 如果插入位置不合理，抛出异常; 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置; 将要插入元素填入位置 i 中; 1234567891011121314151617181920212223/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， *//* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */Status ListInsert(SqList *L,int i,ElemType e)&#123; int k; if (L-&gt;length==MAXSIZE) /* 顺序线性表已经满 */ return ERROR; if (i&lt;1 || i&gt;L-&gt;length+1)/* 当i比第一位置小或者比最后一位置后一位置还要大时 */ return ERROR; if (i&lt;=L-&gt;length)&#123; /* 若插入数据位置不在表尾 */ for(k=L-&gt;length-1;k&gt;=i-1;k--) /* 将要插入位置之后的数据元素向后移动一位 */ L-&gt;data[k+1]=L-&gt;data[k]; &#125; /*索引改良 for (k = L-&gt;length; k &gt;= i; k--) &#123; L-&gt;data[k] = L-&gt;data[k - 1]; &#125; */ L-&gt;data[i-1]=e; /* 将新元素插入 */ L-&gt;length++; return OK;&#125; ListDelete思路： 线性表必须存在数据; 如果删除位置不合理，抛出异常; 从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置; 表的长度减少1; 12345678910111213141516171819/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) *//* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */Status ListDelete(SqList *L,int i,ElemType *e) &#123; if (L-&gt;length==0) /* 线性表为空 */ return ERROR; if (i&lt;1 || i&gt;L-&gt;length) /* 删除位置不正确 */ return ERROR; *e=L-&gt;data[i-1]; int k; if (i&lt;L-&gt;length)&#123; /* 如果删除不是最后位置 */ for(k=i;k&lt;L-&gt;length;k++)/* 将删除位置后继元素前移 */ L-&gt;data[k-1]=L-&gt;data[k]; &#125; L-&gt;length--; return OK;&#125; 线性表顺序存储结构的优缺点时间复杂度分析存入与取出查询任意位置可由公式直接查出，从而决定存取的时间复杂度**均为O(1)**。 插入与删除 最优情况复杂度：插入与删除位置为最后一个元素，复杂度为O(1) 最坏情况复杂度：插入与删除位置为第一个位置，复杂度为O(n) 平均情况复杂度：位置靠前，移动元素多。位置靠后，移动元素少。平均为(n-1)/2，复杂度即为O(n) 优缺点总结优点： 无须为表示表中元素之间的逻辑关系而增加额外的存储空间(即可由公式直接关联) 可以快速地存取表中任意位置的元素 缺点： 插入和删除操作需要移动大量的元素 当线性表长度变化较大时，难以确定存储空间的容量。即难以确定MAXSIZE属性的大小 造成存储空间的“碎片” 小结 顺序存储结构的线性表，适合于元素个数不太需要变化，更多用于存取数据的应用。 插入和删除效率低的原因在于，相邻两元素之间的存储位置也依赖于邻居关系本身。","categories":[],"tags":[{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"数据结构 第二章 算法基础","slug":"数据结构 第二章 算法基础","date":"2020-09-01T03:40:32.000Z","updated":"2020-09-05T04:00:31.834Z","comments":true,"path":"2020/09/01/数据结构 第二章 算法基础/","link":"","permalink":"http://yoursite.com/2020/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/","excerpt":"","text":"读物：《大话数据结构》 印次：2020年5月第25次印刷(2020.5重印) 大纲 算法的定义 算法的特性 算法设计的要求 算法效率的度量方法 函数的渐进增长 算法时间复杂度 算法空间复杂度 最坏情况与平均情况 算法的定义算法：算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。 算法的特性算法具有的五个基本特性：输入、输出、有穷性、确定性、可行性。 输入与输出 算法具有零个或多个输入。 算法至少有一个或多个输出。 有穷性 算法在执行有限步骤之后，自动结束而不会出现无限循环。 每一个步骤在可接受的时间内完成。即实际意义。 确定性确定性：算法的每一步骤都具有确定的含义，不会出现二义性，类似函数。 可行性 算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。 可行性意味着算法可转换为程序上机运行。 算法设计的要求算法设计的要求包含：正确性、可读性、健壮性、时间效率高和存储量低。 正确性正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。大体分为以下四个层次： 没有语法错误 对于合法的输入数据能够产生满足要求的输出结果 对于非法的输入数据能够得出满足规格说明的结果 对于精心选择的，甚至刁难的测试数据都有满足要求的输出结构。 一般情况下，我们把层次3作为一个算法是否正确的标准 可读性可读性：算法设计的另一个目的是为了便于阅读、理解和交流。 健壮性健壮性：当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名奇妙的结果。 时间效率高和存储量低设计算法应该尽量满足时间效率高和存储量(占用内存与外部硬盘存储空间)低的需求。 算法效率的度量方法ps：这里指的效率大都是指算法的执行时间。 事后统计方法事后统计方法：这种方法主要是通过事先设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。 但这种方法显然存在很大的缺陷： 必须依据算法事先编制对应的测试程序，费时费力，工作量可能翻倍。 计时器的计时效果比较依赖计算机硬件和软件等环境因素。 算法的测试数据设计困难。 事前分析估算方法事前分析估算方法：在计算机程序编程前，依据统计方法对算法提前进行估算。 事前分析一个程序在计算机运行所消耗的时间取决于下列因素： 算法采用的策略、方法。 编译产生的代码质量。 问题的输入规模。 机器执行指令的速度。 结论： 一个程序的运行时间，依赖于算法的好坏和问题的**输入规模(输入变量的值)**。 测定运行时间最可靠的方法就是依据输入规模计算语句的执行次数。 执行次数，也成为基本操作数量，记作 f(n)，n表示输入规模。 函数的渐进增长ps：判断两个算法效率的高低，会存在因不同量级的输入规模而得出相反的结果。 因此给出定义，输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，我们称函数是渐进增长快的。 函数渐进增长：给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n&gt;N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐进快于g(n)。 结论：判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而**更应该关注主项(最高阶项)**的阶数。 算法时间复杂度时间复杂度的定义算法时间复杂度，记作T(n)=O(f(n))，通过大写O( )**来体现时间复杂度的记法，也称之为大O记法**。 在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)= O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。 推导大O阶方法 写出每一条语句的执行次数。 把所有语句的执行次数相加并且进行基本的数学化简。 用常数1取代运行时间中的所有加法常数。 只保留最高阶项。 若最高阶项存在且不是1，则去除与这个项相乘的常数。 123456789int i,j; //执行1次for(i = 0; i &lt; n; i++)&#123; //执行n次 for(j = i; j &lt; n; j++)&#123; /*时间复杂度O(1)的程序步骤序列*/ //执行n-2次...n-1,n,执行1次 //执行n-2次...n-1,n,执行1次 &#125; &#125;printf(&quot;end&quot;); //执行1次 总执行次数为：1+n+(n-1)+(n-2)+…+1 + 1= n(n+1)/2 +2 = n2/2+n/2 + 2 去除常数： n2/2+n/2 保留最高阶项： n2/2 最高阶项存在且不等于1，去除相乘常数：n2，即最终时间复杂度为 O(n2) 可看作等差数列求和：na1 + n(n-1)/2 * d 首项a1=1，公差d=1，项数n=n 常见时间复杂度 阶 非正式术语 常见结构 例 O(1) 常数阶 顺序结构、无循环分支结构 12 O(n) 线性阶 无内嵌循环结构 2n+3 O(n2) 平方阶 二层内嵌循环结构 3n2+2n+1 O(log n) 对数阶 非1线性增长的循环索引 log2n+20 O(n log n) nlog n阶 2n+3nlog2n O(n3) 立方阶 三层内嵌循环 n3+2 2n 指数阶 2n 常用时间复杂度所耗费得时间从小到大依次是： O(1) &lt; O(log⁡n) &lt; O(n) &lt; O(nlog⁡n) &lt; O(n2) &lt; O(n3) &lt; O(an) &lt; O(n!) &lt; O(nn) 对数阶补充说明 123456int count =1;while(count &lt; n)&#123; count = count * 2; /*时间复杂度O(1)的程序步骤序列*/&#125; 每次count乘2之后，就距离n更接近一分，而需要乘多少次？接需要执行多少次，才能跳出循环？ 把需要乘的次数设为x，则2x=n，得到执行次数x=log2n 算法的空间复杂度空间复杂度：算法的空间复杂度即算法所需的存储空间，记作：S(n)=O(f(n)，此时n为问题的规模，f(n)为语句关于n所占存储空间函数。 当不用限定词地使用“复杂度”，则通常指时间复杂度。 时间复杂度和空间复杂度一般情况下可以相互转换。 最坏情况与平均情况最坏情况：即一个算法存在的最低执行效率情况。 在应用中，最坏情况是一种重要的需求，通常，除非特别指定，提及的运行时间都是指最坏情况的运行时间 平均运行时间是所有情况中最有意义的，它属于期望的运行时间。","categories":[],"tags":[{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"数据结构 第一章 绪论","slug":"数据结构 第一章 绪论","date":"2020-08-29T14:03:32.000Z","updated":"2020-09-01T09:33:31.519Z","comments":true,"path":"2020/08/29/数据结构 第一章 绪论/","link":"","permalink":"http://yoursite.com/2020/08/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E7%BB%AA%E8%AE%BA/","excerpt":"","text":"读物：《大话数据结构》 印次：2020年5月第25次印刷(2020.5重印) 知识大纲 数据结构的起源 基本概念和术语 逻辑结构与物理结构 抽象数据类型 数据结构的起源早期认知人们都把计算机理解为数值计算工具。解决问题方式如下： 分析问题 抽像其数据模型 设计数据模型对应算法 编写程序 实际环境现实中，更多是解决非数值型问题，因此需要更加有效的科学手段。**(比如表、树图等数据结构)。 基本概念和术语数据数据的基本概念数据：是描述客观事物的符号，是计算机中可操作的对象，是能被计算机识别，并能够输入给计算机处理的符号集合。 比如编程所用到的数据类型，还包括字符、声音、图像、视频等这里所描述的数据，其实就是符号 数据的基本特性 可输入到计算机中 能被计算机程序处理 数据元素数据元素：组成数据的，有一定意义的基本单位，在及算你中通常作为整体处理。也被称为记录。 数据项数据项：一个数据元素可以由若干个数据项组成。 比如人这样的数据元素，可以有眼、耳、口、鼻，姓名、年龄、性别这些数据项 数据项是数据的最小单位 在研究数据结构问题时，数据元素才是建立数据模型的着眼点 数据对象数据对象：是性质相同的数据元素的集合，是数据的子集。 小结 数据：就是符号，数值型和非数值型集合 数据元素：组成数据有意义的基本单位，即java中的“类” 数据项：组成数据元素的基本单位，即类里面的“属性” 数据对象：是数据的子集。即类里面的“对象/实例” 数据结构数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。结构即关系！ 一个“好”的程序，必须分析待处理对象的特性及其**各处理对象之间存在的关系**这就是研究数据结构的意义所在。 “分析待处理对象的特性”，即以前接触高级语言的“面向对象编程” 博主如今缺乏的，即是学习“各处理对象之间存在的关系” 逻辑结构与物理结构逻辑结构逻辑结构：是指数据对象中数据元素之间的相互关系，也是今后讨论的重点。主要类型包含如下 集合结果 线性结构 树形结构 图像结构 集合结构集合结构：集合结构中的数据元素除了同一个集合外，它们之间没有其他关系。 它们相互平等，唯一且共同的属性就是“同属一个集合”，类似数学的集合，形如“鱼塘” 线性结构线性结构：线性结构中的数据元素之间是一对一的关系，类似“火车，项链”。 树形结构树形结构：树形结构中的数据元素之间存在一种一对多的的层次关系。形如“大树”分支。 图形结构图像结构：图形结构的数据元素是多对多的关系，类似“人际关系”，交错复杂。 小结用示意图表示数据的逻辑结构时，要注意两点 将每一个数据元素看做一个结点，用圆圈表示 元素之间的逻辑关系用结点之间的连线表示，如果这个关系是有方向的，必须标明箭头 物理结构/存储结构物理结构：是指数据的逻辑结构在计算机中的存储形式。 即数据元素如何存储到计算机的存储器中，这里的存储器主要针对内存而言 数据的存储结构应正确反映数据元素之间的逻辑关系，这才是重点 存储结构形式有两种：顺序存储和链式存储 顺序存储结构顺序存储结构：是把数据元素存放在地址连续的存储单元里。此时，其数据间的逻辑关系和物理关系是一致的。 形如理想状态下的排队，又如编程中的数组存储/开辟空间机制 链式存储结构链式存储结构：是把数据元素存放在任意的存储单元里，而这组存储单元可以是连续的，也可以是不连续的。 形如去银行、医院等地方，设置了“叫号排序”的机制。实际，把变量的地址存储在一个指针变量中，通过指针变量找到对应的数据 小结 逻辑结构是面向问题的，而物理结构就是面向计算机的 顺序存储：连续开辟-按序对应 链式存储：任意开辟-叫号对应 抽象数据类型数据类型数据类型：是指一组性质相同的值的集合,及定义在此集合上的一些操作的总称。 在计算机中，内存也不是无限大的，计算机的研究者们就考虑，要对数据类型进行分类，分出多种数据类型来适合各种不同的计算条件差异，同时节省内存 C语言中数据类型可以分为两类 原子类型：不可以再分解的基本类型，例如整型、浮点型、字符型等。 结构类型：由若干种数据类型组合而成，是可再分解。如整型数组由若干整型数据组成的 抽象数据类型抽象抽象：抽象是指抽取出事物具有的普遍性的本质。即抽出问题的特征而忽略非本质的细节。 抽象数据类型抽象数据类型(Abstract Data Type，ADT)：是指一个数学模型及定义在该模型上的一组操作。 抽象数据类型不仅仅指那些已经定义并实现的数据类型(int、char等)，还可以是计算机编程者在设计软件程序时自己定义的数据类型，即如同高级语言的即“类”一样。而“及定义在该模型上的一组操作”即如同定义类，及其基本“方法” 比如，无论在PC、平版电脑、只能手机上都拥有“整数”这个类型，那么可以说“整型”其实就是一个抽象的数据类型，而且“抽象”的意义在于数据类型的数学抽象特征。 抽象数据类型体现了程序设计中，问题分解、抽线、信息隐藏的特性。 抽象数据类型的标准格式ADT 抽象数据类型名 Data 数据元素之间逻辑关系的定义 Operation 操作1 初始条件 操作结构描述 操作2 ... endADT 总结 现实问题中更需要解决的是非数值运算问题。 数据 数据即符号 数据元素即“类” 数据对象即可“实例” 数据项即“属性” 结构即关系 数据结构定义：是相互之间存在一种或多种特定关系的数据元素的集合 逻辑结构与物理结构，即面向问题，与面向存储。 四大逻辑结构(“四形”) 集合结构 线性结构 树形结构 图形结构 两大物理结构 顺序存储(数组) 链式存储(指针) 抽象数据类型 数据类型 原子类型(不可分割/int，char) 结构类型(组合而成) 抽象数据类型 已定义数据类型抽象，即int，char 自定义数据类型抽象，即struct，类 抽象数据类型规范:ADT、Data、Operation、endADT 作者建议研读方法 复习c语言的基础知识。 第一遍阅读，建议从头至尾进行通读。 阅读时，摘抄/笔记是非常好的习惯。“最淡的墨水也胜于最强的记忆” 阅读每一章时，特别是阅读****算法的推导过程，一定要在电脑中运行代码和进行调试，设置断点和逐行执行，参照书的讲解，观察变量的变化情况来理解算法的编写原理。 阅读完每一章时，一定要在理解基础上记忆一些关键东西，最佳效果就是不看书也可以一点不错的默写相关的算法。 阅读完每一章时，一定要适当练习。 在之后的学习或工作中，尽量把学到的数据结构和算法运用到现实开发中。 《大话数据树结构》初读后有感教材和自学读物，所面向的读者是完全不同的教材特性 好的教材应试是提纲挈领、重点突出。 一定要留出思考空间，否则就没必要再听老师上课了。教材很多内容的讲解都是由老师在课堂上完成的。 教材中必定有练习、课后习题、思考题等，而这些大多可以通过老师来解答。 比如我们中学时的语文、数学课本，很薄的一本书通常要用一个学期、甚至一年的时间来学，这就是因为它们是教材而不是自学读物。如果小说,可能一两天就读完了。 读物——隔空交流的介质作者角度 作者认为，读者拿到的虽然只是一本没有表情、不会说话的书，但其实也是在隔空与另一个朋友交流。 人与人的交流不可能只是就事论事，一定会有情感的沟通，这种情感如果能产生共鸣、达成互信，就会让沟通的事情本身更容易理解和接受。 博主理解 读物本是以内容第一为原则。但其作者的表诉方式，引用，感受等情感会附带许多作者本人的价值观。即情感交流，也是阅读的影响之一。 对于技术类读物，除技术内外，最明显的就是学习读者的编书方式，从编书结构从而建立更全面，深刻，有效的知识的架构。 如本书最明显的其中一个特征就是会对每一个小知识群进行小结提炼。这也会影响到我摘抄笔记的录入结构。","categories":[],"tags":[{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"基于Hexo框架的博客搭建及其GitHub部署","slug":"基于Hexo框架的博客搭建及其GitHub部署","date":"2020-08-28T01:09:02.000Z","updated":"2020-09-02T09:50:08.071Z","comments":true,"path":"2020/08/28/基于Hexo框架的博客搭建及其GitHub部署/","link":"","permalink":"http://yoursite.com/2020/08/28/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B6GitHub%E9%83%A8%E7%BD%B2/","excerpt":"","text":"Hexo简介 Hexo 是一个快速、简洁且高效的静态博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo受众面较广，对应的问题、扩展等内容在网上均有成熟解决方案，推荐安装使用。 安装安装前提安装Hexo之前需要先安装Node.js与Git。 ps：本文所有安装过程基于Windows环境下操作 Git安装 官网下载地址：https://git-scm.com/downloads 默认自动弹出适配版本，若没有则在“Git for Windows Setup”选择对应电脑位数下载 安装过程一直next直到完成即刻。 设置Git用户名 ps:Windows终端(cmd)内操作,不设置用户名和密码在安装hexo的过程中会报错 设置用户名git config --global user.name &quot;username&quot; 设置邮箱git config --global user.email useremail@qq.com 修改后可以检查一下，查看用户名和密码 git config user.name git config user.email 查看其他配置信息 git config --list Node.js安装 官方下载地址：https://nodejs.org/en/ 一般选择左边的 XX.XX.X LTS (长期支持版) 安装过程简单，直接操作即可。 安装完成后存在两个组件，一个是Node.js本身，另一个是npm(包管理器) hexo下载与安装 以管理员身份进入Windows终端。 检查node.js的安装结果node –vnpm –v 通过npm或cnpm安装hexo npm是外国的镜像源速度很慢，用淘宝的cnpm比较快 npm install -g cnpm --registry=http://registry.npm.taobao.org 通过cnpm下载安装hexocnmp install -g hexo cli 安装完成后通过命令可查看版本表示安装成功hexo –v hexo博客初始化 以下操作均在”总文件”路径下完成，且实例说明以名为”myblog”的文件夹表示hexo总文件夹。 若接下来的操作出现什么错误，直接把这个总文件夹删除重新来过即可 在想要安装博客的路径下创建一个总文件夹，如“myblog” 通过终端进入到这个总文件夹路径下 初始化博客 hexo init 常用组成文件功能介绍 ├_config.yml├&lt;source&gt;&emsp;&emsp;├&lt;_posts&gt;├&lt;themes&gt; _config.yml：配置文件，用于配置博客的重要属性 &lt;source&gt;：用于存放各种类型的md文件 &lt;_posts&gt; ：hexo new命令生成的md文件存位置 &lt;themes&gt;：存放不同的主题 启动博客，通过浏览器尝试访问 hexo s 终端会提示本地端口访问，一般为：localhost:4000 基本操作 ps：所有hexo命令操作都需要在安装hexo的总文件夹路径下操作 创建一篇文章， 新建的文章即md文件存放在/source/_posts hexo new &quot;My New Post&quot; 停止运行hexoctrl + c 清理之前生成的内容 hexo clean 校验并生成新的内容 hexo g GitHub部署仓库设置 登录github，创建仓库：repository name设置为：username.github.io 您github账号中的username,如博主账号username为yihangdeng则repository name 设置为：yihangdeng.github.io 其他保持默认即可，点击“Create repository”完成仓库创建 生成的链接结构为： https://github.com/username/username.github.io.git如：https://github.com/yihangdeng/yihangdeng.github.io.git Git远程部署插件安装cnpm install --save hexo-deployer-git 配置_config.yml设置总文件夹下的配置文件_config.yml，在配置信息的最底部修改并添加内容如下 123456# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy: type: ‘git’ repo: (仓库创建后生成的链接) branch: master 123456# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;yihangdeng&#x2F;yihangdeng.github.io.git branch: master 内容推送 通过命令远程部署到GitHub仓库hexo d 在远程部署的过程中有时要求输入GitHub的用户名和密码，如：Username for &quot;https://github.com\\&quot; 输入用户名Password for &quot;https://username@github.com\\&quot; 输入密码(密码默认不显示，直接输入后回车即可)若出错请检查是否有配置git的用户名和邮箱 刷新GitHub仓库可查看生成内容已部署到GitHub中 通过浏览器访问你的博客 url：username.github.io 如：yiahngdeng.github.io 若访问不了，请先尝试访问博主的博客(yiahngdeng.github.io)进而确认是部署出错还是访问GitHub的网络出现问题，具体参加博文《GitHub访问及其下载问题解决方案》。 常见错误 建议每次修改内容后都执行“hexo g”命令校验生成一下，报错的内容会显示在终端上。 标明错误行数：一般是配置文件中的“键值对”敲错，记住是英文冒号加空格，“: ” Git错误提示之：fatal: Not a git repository (or any of the parent directories): .git 提示说没有.git这样一个目录，在命令行 输入 git init 然后回车就好了 参考链接 codesheep：https://www.bilibili.com/video/BV1Yb411a7ty","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-08-25T09:05:12.504Z","updated":"2020-08-25T09:05:12.504Z","comments":true,"path":"2020/08/25/hello-world/","link":"","permalink":"http://yoursite.com/2020/08/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"技术积累","slug":"技术积累","permalink":"http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]}