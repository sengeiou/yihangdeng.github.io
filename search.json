[{"title":"Hexo在Gitee平台部署过程","url":"/2020/08/29/Hexo%E5%9C%A8Gitee%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/","content":"前提\n已经安装hexo，并且能够通过hexo d命令推送到GitHub实现远程推送。\n\n实现方案具体可参考《基于Hexo框架的博客搭建及其GitHub部署》\n\n\n已经注册Gitee账号并且绑定手机。\n\n\nGitee新建仓库\n新建仓库时名称最好是保持跟你注册时的个人空间地址是一样的。因为这样你就不会生成二级域名了。如果不跟注册时的个人空间地址一样的话，到时候自己的网站就会有二级域名的存在了。\n输入仓库名称与路径后会在“归属”一栏下生成一个仓库链接，记录下来为之后的_config.yml文件配置做准备\n\n\n_config.yml文件配置修改配置文件中repo 属性为：{仓库地址} .git\n\n\n仓库地址在创建仓库的时候会显示，或者在刚创建完的时候浏览器的url就是仓库地址\n仓库地址一般组成： https://gitee.com/{个人空间名}/{仓库名称}\n\n\n# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy:  type: &#39;git&#39;  repo:  &#123;仓库地址&#125;.git  branch: master\n\n\nrepo:  https://gitee.com/yihangdeng/yihangdeng.git\n\n修改配置保存后，可以像推送到GitHub上那样，通过hexo d命令上传到gitee。刷新gitee仓库查看是否有内容\n开启仓库page服务\n进入页面后直接点击启动即可。\n\n启动完成后会生成网站地址，这个网站地址就是访问你博客的地址。\n\n\ngitee page 只有付费版才能自动更新，免费版只能手动点击 “设置” 中的更新按钮，来更新部署。\n\n参考链接\ngitee：https://www.cnblogs.com/chaojilaoshi/p/13266271.html\ngitee：https://www.jianshu.com/p/5014133ba61a\npage更新：https://www.jianshu.com/p/6460df84a099\n\n","tags":["Hexo","环境搭建","Gitee"]},{"title":"JavaSE进阶核心积累","url":"/2021/04/05/JavaSE%E8%BF%9B%E9%98%B6%E6%A0%B8%E5%BF%83%E7%A7%AF%E7%B4%AF/","content":"引言：本文主要基于JDK8介绍JavaSE中多线程、常用类、枚举与注解、集合、泛型与File、IO流与网络编程、反射与动态代理、以及Java8、9、10、11等新特性。\n\n[TOC]\n\n多线程基础概念程序程序(programm)：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。(如软件安装的物理位置中的文件)\n进程进程(process)：程序的一次执行过程，或是正在运行的一个程序。\n\n进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域。(如软件启动后在任务管理器”进程”看到的状态)\n有其自身产生、存在合消亡的过程——生命周期\n每一个进程占用内存区域中的方法区与堆结构\n\n线程线程(thread)：进程可进一步细化为线程，是一个程序内部的一条执行路径。\n\n若一个进程同一时间并行执行多个线程，就是支持多线程的\n\n线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。\n\n一个进程中的多个线程共享相同的内存单元/内存地址空间，使得线程间通信更简便、高效。但多个线程操作共享的系统资 源可能就会带来安全的隐患。\n\n\n单核与多核CPU\n单核CPU：其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。只是CPU主频非常高，在快速切换地执行不同的线程。使其感觉像并行的多线程。\n\n多核CPU：若是多核的CPU，才能真正更好的发挥多线程的效率\n\n一个Java应用程序java.exe至少有三个线程：main主线程、GC垃圾回收线程、异常处理线程。\n\n\n并行与并发\n并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。\n并发：一个CPU(采用时间片)同时执行多个任务。比如：多个人做同一件事。\n\n多线程的优势\n背景：以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方 法），肯定比用多个线程来完成用的时间更短，为何仍需多线程呢？ \n\n多线程程序的优点：\n\n提高应用程序的响应。对图形化界面更有意义，可增强用户体验。\n提高计算机系统CPU的利用率。\n改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。\n\n\n多线程的常见需求场景：\n\n程序需要同时执行两个或多个任务。\n程序需要实现一些需要等待的任务时，如用户输入、文件读写 操作、网络操作、搜索等。\n需要一些后台运行的程序时。\n\n\n\n线程的创建Java语言的JVM允许程序运行多个线程，它通过java.lang.Thread 类来体现。最原始创建线程的方式有如下两种。\n\n通过继承Thread类来实现\n实现Runnable接口的方式\n\n继承Thread实现方式实现步骤\n创建一个基础于Thread类的子类\n重写Thread类的run()方法，并将执行的代码写在run方法中\n创建Thread类的子类的对象\n调用start()方法启动线程\n\n//如下创建一个线程打印100以内的偶数class MyThread extends Thread&#123;    @Override    public void run() &#123;        //打印100以内的偶数        for (int i = 0; i &lt; 100; i++) &#123;            if(i % 2 == 0)                System.out.println(&quot;MyThread-run()：&quot; + i);        &#125;    &#125;&#125;public class ThreadTest &#123;    //多次尝试运行可以发现两个线程存在交替执行    public static void main(String[] args) &#123;        Thread t1 = new MyThread();        t1.start();        //主线程 main，也打印100以内的偶数        for (int i = 0; i &lt; 100; i++) &#123;            if(i % 2 == 0)                System.out.println(&quot;main()：&quot; + i);        &#125;    &#125;&#125;\n\n说明\nstart方法的作用：①启动当前线程、②让 JVM 去调用当前线程的run()方法\n\n启动一个线程，必须调用start()**，不能调用run()**的方式启动线程。\n\n若直接调用run()方法执行代码。则只是在当前线程调用子类重写父类的一个方法而已，属于单线程。\n\n\n若想再启动一个线程，不能连续调用两次start()方法，否则报出IllegalThreadStateException异常\n\n在必须重新创建一个新的Thread子类的对象，调用此**对象的start()**方法。\n\npublic class ThreadTest &#123;    //多次尝试运行可以发现两个线程存在交替执行    public static void main(String[] args) &#123;        Thread t1 = new MyThread();        t1.start();        //t1.start();错误写法        Thread t2 = new MyThread();//正确写法，重新创建        t2.start();    &#125;&#125;\n\n\n\n","tags":["JavaSE"]},{"title":"Mybatis","url":"/2021/03/21/Mybatis/","content":"[TOC]\n基本历史原是Apache的一个开源项目iBatis, 2010年6月这 个项目由Apache Software Foundation 迁移到了 Google Code，随着开发团队转投Google Code 旗下， iBatis3.x正式更名为MyBatis ，代码于 2013年11月迁移到Github\nMybatis的优势java领域中，对比最常见的三种数据库编程。\nJDBC及相关工具相关工具：JDBC—&gt;Dbutils(QueryRunner)—&gt;JdbcTemplate(Spring)\n\nSQL夹在Java代码块里，耦合度高导致硬编码，维护不易且实际开发需求中sql是有变化，频繁修改的情况多见。\n\n若改动一下数据库或改变一下sql语句，则整个项目需要重新打包构建部署\n\n\n\n\nHibernateHibernate：全自动ORM（Object Relation Mapping）框架\n\n全黑箱操作，想优化sql，必须再学习Hibernate的HQL定制sql语句，开发者希望sql语句交给开发人员编写，不失去其灵活性。\n只能全自动全映射，数据表有100个列，则即使只查询某一个字段都需要把全部列映射过来。导致数据库性能下降\n\n\nMybatis\nMyBatis支持通过XML方式定制化 SQL、存储过程以及高级映射的优秀的持久层框架\n因此Mybatis是半自动，轻量级的框架。\nMyBatis 避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。\nMyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO(Plain Old Java  Objects，普通的Java对象)映射成数据库中的记录\n\n\nMybatis下载\nGitHub网址\n\n进入GitHub页面\n\n\n\n选的特定版本下载\n\n\n\n基本资料介绍\n\n解压mybatis-3.4.1，使用mybatis只需要导入mybatis-3.4.1.jar即可，lib目录下的jar包是mybatis需要添加其他功能才需要选择性导入的包\n\n\n\nHelloWorldhelloworld\n打开，mybatis在线官方文档。操作基本按照官方文档进行\n\n准备jar包\n\nmybatis-3.4.1.jar：mybatis核心jar包\nmysql-connector-java-5.1.37-bin.jar：数据库连接jar包\n\n\n创建测试数据库：本例数据库名为 mybatis，创建测试数据表tbl_employee\n\n\n新建一个java项目，并建立对应的JavaBean\n\n\n依据mybatis官方文档从XML中构建SqlSessionFactory\n\n本例是直接在类路径下创建XML文档：在项目内新建一个名为mybatis-config.xml (全局配置)文件，从官方文档中复制如下内容\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;!-- 需修改部分--------------------------------------------------------------tips --&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;         &lt;!-- 还缺少文件----------------------------------------------------------------tips --&gt;        &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;\n\n修改XML中的数据源信息：\n &lt;dataSource type=&quot;POOLED&quot;&gt;     &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;!-- 驱动 --&gt;     &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot;/&gt;&lt;!-- 数据库地址 --&gt;     &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;&lt;!-- 用户名 --&gt;     &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;&lt;!-- 密码 --&gt;&lt;/dataSource&gt;\n\n从mybatis-config.xml 中构建SqlSessionFactory\nString resource = &quot;mybatis-config.xml&quot;;InputStream inputStream = Resources.getResourceAsStream(resource);SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n添加如下代码从 SqlSessionFactory 中获取 SqlSession\nSqlSession session = sqlSessionFactory.openSession();\n\n拟执行查询操作，能查询已映射的 SQL语句\n//形参1：sql隐射XML文件的唯一标识符//形参2：执行sql语句的传入参数try&#123;\tBlog blog = (Blog) session.selectOne(&quot;org.mybatis.example.BlogMapper.selectBlog&quot;, 101);&#125;finally&#123;    session.close();&#125;\n\n创建已隐射的XML文件\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!-- sql映射文件 --&gt;&lt;!DOCTYPE mapper  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!-- 名称空间：暂时来说名字可以随便起，一般映射哪个实体对象就起名为 xxxMapper --&gt;&lt;mapper namespace=&quot;com.test.mybatis.bean.EmployeeMapper&quot;&gt;\t&lt;!-- id：唯一标识，一般起名为[操作类型 + 操作对象]selectXxx --&gt;\t&lt;!-- resultTupe：返回类型，若返回是一个对象，则填入这个类的全类名 --&gt;\t&lt;!-- #&#123;id&#125;：从传递过来的参数中取出id指，类似java占位符 ? --&gt;\t&lt;select id=&quot;selectEmp&quot; resultType=&quot;com.test.mybatis.bean.Employee&quot;&gt;\t\tselect * from tbl_employee where id = #&#123;id&#125;\t&lt;/select&gt;&lt;/mapper&gt;\n\n修改第8步代码，开始执行查询操作，能查询已映射的 SQL语句\n//形参1：sql映射XML文件的唯一标识符，可直接填入XML的id(若存在重名)//\t但建议使用XML中 namespace.id 的方式唯一标识//形参2：执行sql语句的传入参数，如下查询id=1的员工信息try&#123;    String id = &quot;com.test.mybatis.bean.EmployeeMapper.selectEmp&quot;;    Employee employee = (Employee) session.selectOne(id, 1);    System.out.println(employee);&#125;finally&#123;    session.close();&#125;\n\n在全局配置文件mybatis-config.xml中修改为自定义的sql隐射文件\n&lt;mappers&gt;\t&lt;!-- 将写好的sql隐射文件注册到全局配置文件中，文件在全类名路径下，因此直接写即可 --&gt;\t&lt;mapper resource=&quot;EmployeeMapper.xml&quot;/&gt;&lt;/mappers&gt;\n\n最终效果\n\n\n小结\n\n根据xml全局配置文件创建一个SqlSessionFactrory\n\n创建sql映射文件，配置了每一个sql，以及sql的 封装规则等\n\n将sql映射文件注册在全局配置文件中\n\n代码部分\n\n根据全局配置文件得到SqlSessionFactory\n\n使用sqlSession工厂，获得sqlSession对象来执行增删改查\n一个sqlSession就是代表和数据库的一次会话，用完关闭\n\n使用sql的唯一标志来告诉Mybatis执行哪个sql，sqk均保存在sql映射文件中\n\n\n\n\n\n\n接口式编程操作步骤对于上述的第8或12步骤的方式执行sql操作，mybatis还提供了一种更为智能，受众面更广的实现方式。即接口与配置文件进行动态绑定。以后使用mybatis均使用这种方式操作\n\n如日常开发创建dao的接口，EmployeeMapper.java\n\n\n规范化sql映射文件中的namespace与id的值，形成如下对应关系\n\nnamespace 值 == 对应dao操作的接口的全类名\nid 值 == 对应dao操作接口中特定的方法名(方法返回类型与传入参数也要对应sql语句本身)\n\n\n\n不再直接使用mybatis的session对象直接进行数据库操作，而是通过调用session.getMapper();方法，传入接口的类型，使其自动创建一个代理对象，通过这个代理对象实现类去执行增删改查。\ntry&#123;    //String id = &quot;com.test.mybatis.bean.EmployeeMapper.selectEmp&quot;;    //Employee employee = (Employee) session.selectOne(id, 1);    EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);    Employee employee = mapper.getEmpById(1);    System.out.println(employee);&#125;finally&#123;    session.close();&#125;\n\n\n\n优势\n代码不仅更清晰\n不用担心传入类型安全(8/12步骤方式传入类型为Object)，\n不用担心可能出错的字符串字面值以及返回类型需要强制类型转换\n\n小结\n接口式编程\n\n原生：      Dao         ===&gt;   DaoImpl\nmybatis：Mapper  ===&gt;  xxMapper.xml\n\n\nSqlSession代表和数据库的一次会话；用完必须关闭；\n\nSqlSession和connection一样她都是非线程安全。每次使用都应该去获取新的对象。\n\nmapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象(将接口和xml进行绑定)\nEmployeeMapper empMapper =\tsqlSession.getMapper(EmployeeMapper.class);\n\n两个重要的配置文件\n\nmybatis的全局配置文件：包含数据库连接池信息，事务管理器信息等…系统运行环境信息\n\nsql映射文件：保存了每一个sql语句的映射信息(将sql抽取出来)\n\n\n\n\nconfig_xml相关标签标签书写提示检查若配置文件书写中无法弹出mybatis标签的提示，可以进行如下操作，一般IDE都有\n\n准备mybatis-3-config.dtd文件\n\n联网状态下可以点击xml文件中链接下载：http://mybatis.org/dtd/mybatis-3-config.dtd\n或者在mybatis-3,4,1.jar包中ibatis.builder.xml中解压出来\n\n\n进入eclipse 进行如下设置\n\n\n最后在IDE中关闭所有xml文件，再打开测试即可\n\n\n\n\n以下介绍均为最基本，最常用的使用方式。详细使用与功能介绍可参详官方文档\n\npropertiesmybatis可以使用properties来引入外部 .properties配置文件的内容，主要使用在数据源信息上。\n\nresource：引入类路径下的资源\nurl：引入网络路径或者磁盘路径下的资源\n\n\n\n如在类路径下创建一个dbconfig.properties文件，用于存放数据源信息，内容如下\njdbc.driver&#x3D;com.mysql.jdbc.Driverjdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatisjdbc.username&#x3D;rootjdbc.password&#x3D;root\n\n通过properties标签引入相关信息\n&lt;configuration&gt;\t&lt;!-- 若不在类路径下，则按包名定位到，如com&#x2F;test&#x2F;dbconfig.properties... --&gt;\t&lt;properties resource&#x3D;&quot;dbconfig.properties&quot;&gt;&lt;&#x2F;properties&gt;\t&lt;environments default&#x3D;&quot;development&quot;&gt;\t\t&lt;environment id&#x3D;&quot;development&quot;&gt;\t\t\t&lt;transactionManager type&#x3D;&quot;JDBC&quot; &#x2F;&gt;\t\t\t&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;\t\t\t\t&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot; &#x2F;&gt;\t\t\t\t&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;\t\t\t\t&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot; &#x2F;&gt;\t\t\t\t&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot; &#x2F;&gt;\t\t\t&lt;&#x2F;dataSource&gt;\t\t&lt;&#x2F;environment&gt;\t&lt;&#x2F;environments&gt;\t&lt;mappers&gt;\t\t&lt;mapper resource&#x3D;&quot;EmployeeMapper.xml&quot; &#x2F;&gt;\t&lt;&#x2F;mappers&gt;&lt;&#x2F;configuration&gt;\n\n\n\n\nsettings这是 MyBatis中极为重要的调整设置，它们会改变MyBatis 的运行时行为。一般使用默认即可，不需要配置，需要再查看文档进行相应的配置。\n\nname为要设置对应的配置信息，\nvalue就是配置的值\n\n\n例如：选取官方文档其中一个设置mapUnderscoreToCamelCase  \n\n\n\n设置名\n描述\n有效值\n默认值\n\n\n\nmapUnderscoreToCamelCase\n是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn\ntrue|false\nFalse\n\n\n默认是False，若开启后，数据库列名为 last_Name 可直接映射java属性名lastName，而无需使用别名修改为lastName进行映射\n&lt;settings&gt;\t&lt;setting name&#x3D;&quot;mapUnderscoreToCamelCase&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;&lt;&#x2F;settings&gt;\n\ntypeAliases自定义类别名为某个java类全类名起别名\n\ntype：指定要起别名的类的全类名，默认别名就是类名(不分大小写)\nalias：指定新的别名\n\n&lt;typeAliases&gt;\t\t&lt;!-- 方式1.1：指定被起别名类全类名，使用默认别名(类名) --&gt;&lt;!-- \t\t&lt;typeAlias type&#x3D;&quot;com.test.mybatis.bean.Employee&quot;&#x2F;&gt;--&gt;\t\t \t\t&lt;!-- 方式1.2：在方式1的基础上，使用alias标签指定自定义别名 --&gt;&lt;!-- \t\t&lt;typeAlias type&#x3D;&quot;com.test.mybatis.bean.Employee&quot; alias&#x3D;&quot;emp&quot;&#x2F;&gt; --&gt;\t\t\t\t&lt;!-- 方式2.1：为指定包下所有类起别名，此时只能使用默认别名 --&gt;&lt;!-- \t\t&lt;package name&#x3D;&quot;com.test.mybatis.bean&quot;&#x2F;&gt;--&gt;\t\t\t\t&lt;!-- 方式2.2：若指定某包名与其子包下存在两个同名的类，则可以使用@Alias(&quot;Name&quot;)注解直接为指定java类起别名 --&gt;\t\t&lt;!-- 注意：需要指明使用别名注解的包是什么，即要保留方式2.1的package标签，否则会报错 --&gt;\t\t&lt;package name&#x3D;&quot;com.test.mybatis.bean&quot;&#x2F;&gt;&lt;&#x2F;typeAliases&gt;\n\n@Alias(&quot;ABC&quot;)public class Employee &#123;...&#125;\n\n\n示例方式1.2效果如下\n\n\n\n默认设置别名Mybatis官方已默认为java常用的一些基本数据类型，包装类型，集合操作等起了别名。自定义别名时注意不要于其发生冲突\n\n基本数据类型：别名加下划线’’_’’\njava类：小写\n\n\n\n\n别名\n映射的类型\n\n\n\n_byte\nbyte\n\n\n_long\nlong\n\n\n_short\nshort\n\n\n_int\nint\n\n\n_integer\nint\n\n\n_double\ndouble\n\n\n_float\nfloat\n\n\n_boolean\nboolean\n\n\nstring\nString\n\n\nbyte\nByte\n\n\nlong\nLong\n\n\nshort\nShort\n\n\nint\nInteger\n\n\ninteger\nInteger\n\n\ndouble\nDouble\n\n\nfloat\nFloat\n\n\nboolean\nBoolean\n\n\ndate\nDate\n\n\ndecimal\nBigDecimal\n\n\nbigdecimal\nBigDecimal\n\n\nobject\nObject\n\n\nmap\nMap\n\n\nhashmap\nHashMap\n\n\nlist\nList\n\n\narraylist\nArrayList\n\n\ncollection\nCollection\n\n\niterator\nIterator\n\n\ntypeHandlers","tags":["应用框架","ORM框架"]},{"title":"SQL总结","url":"/2020/10/22/SQL%E6%80%BB%E7%BB%93/","content":"数据库操作创建数据库\ncreate schema &lt;数据库名&gt; authorization &lt;用户名&gt; [内嵌定义];[内嵌定义] ：[&lt;表创建子句&gt;|&lt;视图创建子句&gt;|&lt;授权定义子句&gt;]\n\n\n\n删除数据库\ndrop schema &lt;数据库名&gt; &lt;cascade|restrict&gt;\n\n\n\n数据表操作创建表\ncreate table &lt;表名&gt;(&lt;字段定义&gt;);&lt;字段定义&gt;：(\t&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束]\t[, &lt;列名&gt;&lt;数据类型&gt;[列级完整性约束] ]\t…\t[, &lt;表级完整性约束&gt;]   )\n\n\n\n修改表\nalter table&lt;表名&gt;\t[add[column] &lt;新列名&gt;&lt;数据类型&gt;[列级完整性约束] ]  \t[add &lt;表级完整性约束&gt;] /*ADD **UNIQUE(Name)** */\t\t[drop [column] &lt;列名&gt;[cascade|restrict] ]              \t[drop constraint &lt;完整性约束**名**&gt;[cascade|restrict]]       \t[alter column &lt;已存在列名&gt;&lt;新数据类型&gt;]       \n\n删除表\ndrop table &lt;表名&gt;[restrict|cascade];\n\n\n\nDQL语言select [all|distinct]&lt;目标列表达式&gt; [,&lt;目标列表达式&gt;]…from &lt;表/视图名&gt;[,&lt;表/视图名&gt;…][where &lt;条件表达式&gt;][group by &lt;列名1&gt; [having&lt;条件表达式&gt;]][order by &lt;列名2&gt; [asc|desc]];\n\n\n&lt;目标列表达式&gt;：控制取某字段、字段别名、’常量列’、运算式、调用函数\n调用函数：count(*)、sum、avg、max、min。均可选择count( [distinct | all] &lt;列名&gt;)\n&lt;条件表达式&gt;：\n=，&gt;，&lt;，&gt;=，&lt;=，!=，&lt;&gt;，!&gt;，!&lt; ; NOT + 上述比较运算符\n范围：between and、not between and： &lt;字段名&gt;between &lt;值1&gt;and&lt;值2&gt;;\n集合：in，not in ：&lt;字段名&gt; in (&lt;数据集合|子查询&gt;);\n字符匹配：like、not like ：&lt;字段名&gt; like ‘&lt;匹配串&gt;’; [ESCAPE ‘&lt;换转义符字符&gt;’]\n空值：is null、is not null ：&lt;字段名&gt;is null;\n条件：and、or、not：&lt;条件表达式&gt; AND &lt;条件表达式&gt;;\n\n\n\nDL高级查询DQL高级查询：子查询、连接查询、集合查询\n子查询(嵌套查询)select…from…where &lt;字段&gt;&lt;子查询谓词&gt;(&lt;查询块&gt;)&lt;查询块&gt;：select…from…where\n\n\n&lt;子查询谓词&gt;：in、比较运算符、比较运算符+any/some,all、exists\nany，&lt;all等…，(any：某个值、all：所有值)\nexists：不返回任何数据，只产生逻辑真假“true/false”\n\n连接查询\n连接查询：等值、非等值、自连接、外连接(左外右外)\n连接查询：from 多表 + 表名点取字段 + 别名设计 + 连接谓词\n\n等值连接等值连接查询：连接条件/谓词使用 “=” 符号\nfrom &lt;表1&gt;[,表2]…where &lt;表1&gt;.&lt;字段&gt; = &lt;表2&gt;.&lt;字段&gt;…\n\n非等值连接查询非等值连接查询：连接条件/谓词不是使用 “=” 符号\n自身连接查询自身连接查询：同一个表设置不同的别名\nselect&lt;别名1&gt;.&lt;字段1&gt;,&lt;别名2&gt;.&lt;字段2&gt;from&lt;表名1&gt;.&lt;别名1&gt;,&lt;表名2&gt;.&lt;别名2&gt;where &lt;别名1&gt;.&lt;字段2&gt;=&lt;别名2&gt;.&lt;字段1&gt;\n\n外连接查询from &lt;表1&gt; left outer join &lt;表2&gt; on(&lt;连接条件&gt;) /*左外(保留左表数据)*/from &lt;表1&gt; right outer join &lt;表2&gt; on(&lt;连接条件&gt;) /* 右外(保留右表数据) */\n\n集合查询&lt;查询块集合1&gt; &lt;集合查询谓词&gt; &lt;查询块集合2&gt;&lt;集合查询谓词&gt;：交操作intersect，并操作union，差(集)操作except\n\n\n\nDML语言：​    插入\ninsert into&lt;表名&gt;[(&lt;属性列1[,属性列2]&gt;…)] values(&lt;常量1&gt;[,&lt;常量2&gt;…);\n\n\n若不写字段，则必须按序写完value参数\n\n插入多条语句values(),(),()…\n\n允许空的字段，value值可用null占位 \n\n若填写了属性列表，则value部分必须一一对应(数量上，类型上)。且属性列表不一定按序，可自动识别字段名，但数据要和字段名对应。\n子查询插入\n\n\ninsert into &lt;表名&gt;[(&lt;属性列1[,属性列2]&gt;…)] &lt;子查询&gt;\n\n\n通过子查询的形式不用写value，但子查询字段同样需要对应属性列信息\n\n​    修改\nupdate &lt;表名&gt; set &lt;列名&gt; = &lt;表达式&gt;[,&lt;列名&gt; = &lt;表达式&gt;][where &lt;条件&gt;]\n\n​    删除\ndelete from &lt;表名&gt; [where &lt;条件&gt;]; \n\n视图create view &lt;视图名&gt; [(&lt;列名&gt;[,&lt;列名&gt;]…)]as &lt;子查询&gt;[with check option]\n\n\n\n​    \n# 数据库安全性\n以下均为自主存储控制方法\n授予权限grant &lt;权限/操作类型&gt;[,权限]...on &lt;对象类型&gt; &lt;对象名&gt;[,&lt;对象类型&gt;&lt;对象名&gt;]... /*一般为： Table &lt;表名&gt;*/to &lt;用户&gt;[,&lt;用户&gt;]...\t/*注意：授予权限给用户前需存在这个用户(新建或原本存在)*/[with grant option]\n\nexample：\n/*把查询Student表的权限授给用户U1*/grant SELECTon TABLE Studentto U1;\n\n&lt;权限/操作类型&gt;：即为用户授予哪些操作\n\n\n\n可控制操作权限类型\n具体语句\n\n\n\n数据库\ncreate schema\n\n\n数据表\ncreate table，alter table\n\n\n视图\ncreate view\n\n\n索引\ncreate index\n\n\n基本表和视图\nselect，insert，update，delete，references，all privileges(所有权限)\n\n\n属性列\nselect，insert，update，references，all privileges\n\n\n&lt;对象类型&gt; &lt;对象名&gt;：一般最大是表级限制。即  Table &lt;表名&gt;\n&lt;用户&gt;：若不存在指定用户需要先建立用户才能进行对应的授权操作，sql server2008 R2 环境下创建新用户步骤如下：\n创建指定数据库的用户需要与这个用户的登录用户绑定：即想建立用户，必须先建立这个用户对应的登录用户\n\n创建新登录用户\n\n打开sql server，连接数据库后。找到根目录下的“安全性”文件夹。\n选中“登录名”文件夹并右键点击“新建登录名”\n设置登录名，并选择“sql server 身份验证”，设置密码(自己记住)。\n最后把“强制密码过期(x)**”的勾选去除**，最后点击右下加确认按钮保存即可\n\n\n\n创建用户\n\n进入到需创建用户的数据库文件夹内，找到指定数据库目录下的“安全性”文件夹\n此时在选中“安全性”文件夹后右键——&gt;新建——&gt;用户(U)\n输入用户名，可自定义(但一般与对应的登录用户名一致)\n点击在“登录名”输入栏最右边的“**[…]”按钮，展开后右边点击“浏览”，勾选刚刚建立的新登录用户名**，最后点击左下角确认按钮保存即可。\n\n\n\n\n[with grant option]：若使用该子句，获得权限的用户可以将次权限传递授予给其他用户，默认不允许。且SQL标准不允许循环授权\n实操备注：\n\n有别于教材，当前环境添加&lt;对象类型&gt;即table关键字会报错\n当前环境grant语句一次性只允许向一个表授权，可同时向多个用户授权\n\n收回权限数据库完整性数据库完整性指：数据的正确性与相容性\n","tags":["SQL","技术积累"]},{"title":"冒泡排序","url":"/2020/09/25/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","content":"冒泡排序分析\n\n每一轮交替比较把最值往**后排(下沉)**，能得出参与这次轮次所有数中的最值\n首次交替次数：最后一个数无需交替比较。即循环下标结构 for(j = 0;j &lt; len - 1; j ++ )\n\n\n接下来继续开始若干次从头开始的交替，逐一把“第2最值”，“第3最值”…排到最后(下沉)\n剩余轮次交替次数：每一次交替比较后的最值无需参与下一次交替比较，剩下轮次的交替比较次数呈递减1状态\n总比较轮次：每一个数都需走一遍轮次。，最后交替(数组最前的数)只需一个轮次完成，即总论次为：len - 1\n\n\n\n总结：理论支持每一轮交替比较把最值往**后排(下沉)**，能得出参与这次轮次所有数当中的最值\n核心部分\n把最值往后排(下沉)\n\n从大到小，降序，后排下沉最小值，a[ j ] &lt; a[ j + 1 ]\n从小到大，升序，后排下沉最大值，a[ j ] &gt; a[ j + 1 ]\n\n\n数组内部比较交替次数：\n\n首次比较交替次数：len - 1    即for(j = 0;j &lt; len - 1;j++)\n剩下轮次比较交替次数：每经一个轮次，交替比较次数减1\n\n\n整个完整排序的比较轮次：最后交替比较两个数(数组最前的两个数)只需一个轮次完成，len - 1。  \n\n\n代码表示\n比较轮次属于外循环：len - 1\n内部比较交替次数属于内循环：(首次)len - 1，(剩余)每一轮次，次数减1\n从大到小，降序，则后排下沉最小值(a[j] 到 a[j + 1])比较\n\n//外循环：比较轮次for(i = 0;i &lt; len - 1;i++)&#123;\t\t//数组遍历写法 i = 0; i &lt; len; i++ 正常遍历，len-1则少一次    //内循环：交替比较次数，递减1通过i增1来实现    for(j = 0;j &lt; len - 1 - i;j++)&#123;        //实现从大到小，降序，后排下沉最小值，a[ j ] &lt; a[ j + 1 ]        if(a[j] &lt; a[j + 1])//边界分析：i = 0，判断上溢d = j + 1，因为“&lt;”，所以j = (len-1) - 1，所以d = len - 1(没上溢)            //交换位置    &#125;&#125;\n\n\n\n时间复杂度分析\n参考：https://zhuanlan.zhihu.com/p/66768445\n\n","tags":["算法"]},{"title":"图床解决方案","url":"/2020/08/29/%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","content":"参考链接\n本人解决方案：https://www.jianshu.com/p/b69950a49ae2\n\nmarkdown各种解决方案：https://www.jianshu.com/p/ea1eb11db63f\n\npicgo连接gitee：\n\nhttps://www.jianshu.com/p/b69950a49ae2\nhttps://blog.csdn.net/disILLL/article/details/104944710\nhttps://www.cnblogs.com/qtzd/p/12554902.html \n\n\n\n软件关系简要说明\nTypora\n\n作为markdown编辑器本身具备的优势\n最新版支持 picgo自动上传功能呢\n\n\npicgo(图床工具)\n\n主要功能：与各大图床存储平台对接，实现快捷本地上传，返回各种需求的连接服务(markdown、html、svg链接等)\n\n\ngitee：作为一个免费图床存储平台，无防盗链设置\n\n\n","tags":["环境搭建"]},{"title":"基于Hexo框架的博客搭建及其GitHub部署","url":"/2020/08/28/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B6GitHub%E9%83%A8%E7%BD%B2/","content":"Hexo简介\nHexo 是一个快速、简洁且高效的静态博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。  \nHexo受众面较广，对应的问题、扩展等内容在网上均有成熟解决方案，推荐安装使用。\n\n安装安装前提安装Hexo之前需要先安装Node.js与Git。\n\nps：本文所有安装过程基于Windows环境下操作\n\nGit安装\n官网下载地址：https://git-scm.com/downloads\n\n默认自动弹出适配版本，若没有则在“Git for Windows Setup”选择对应电脑位数下载\n\n\n安装过程一直next直到完成即刻。\n\n设置Git用户名\n\nps:Windows终端(cmd)内操作,不设置用户名和密码在安装hexo的过程中会报错\n\n\n设置用户名git config --global user.name &quot;username&quot;\n设置邮箱git config --global user.email useremail@qq.com\n\n修改后可以检查一下，查看用户名和密码 git config user.name git config user.email  \n查看其他配置信息 git config --list\n\n\n\n\n\n\nNode.js安装\n官方下载地址：https://nodejs.org/en/\n\n一般选择左边的 XX.XX.X LTS (长期支持版)\n\n\n安装过程简单，直接操作即可。\n\n安装完成后存在两个组件，一个是Node.js本身，另一个是npm(包管理器)\n\n\nhexo下载与安装\n以管理员身份进入Windows终端。\n\n检查node.js的安装结果node –vnpm –v\n\n通过npm或cnpm安装hexo\n\nnpm是外国的镜像源速度很慢，用淘宝的cnpm比较快\n\nnpm install -g cnpm --registry=http://registry.npm.taobao.org\n\n通过cnpm下载安装hexocnmp install -g hexo cli\n\n安装完成后通过命令可查看版本表示安装成功hexo –v\n\n\nhexo博客初始化\n以下操作均在”总文件”路径下完成，且实例说明以名为”myblog”的文件夹表示hexo总文件夹。\n若接下来的操作出现什么错误，直接把这个总文件夹删除重新来过即可\n\n\n\n在想要安装博客的路径下创建一个总文件夹，如“myblog”\n通过终端进入到这个总文件夹路径下\n初始化博客 hexo init\n常用组成文件功能介绍\n├_config.yml├&lt;source&gt;&emsp;&emsp;├&lt;_posts&gt;├&lt;themes&gt;\n\n\n\n\n_config.yml：配置文件，用于配置博客的重要属性\n&lt;source&gt;：用于存放各种类型的md文件\n&lt;_posts&gt; ：hexo new命令生成的md文件存位置\n&lt;themes&gt;：存放不同的主题\n\n\n启动博客，通过浏览器尝试访问 hexo s\n\n终端会提示本地端口访问，一般为：localhost:4000\n\n\n\n基本操作\nps：所有hexo命令操作都需要在安装hexo的总文件夹路径下操作\n\n\n创建一篇文章， 新建的文章即md文件存放在/source/_posts   hexo new &quot;My New Post&quot;\n停止运行hexoctrl + c\n清理之前生成的内容   hexo clean\n校验并生成新的内容   hexo g\n\nGitHub部署仓库设置\n登录github，创建仓库：repository name设置为：username.github.io\n\n您github账号中的username,如博主账号username为yihangdeng则repository name 设置为：yihangdeng.github.io\n\n\n其他保持默认即可，点击“Create repository”完成仓库创建\n\n生成的链接结构为： https://github.com/username/username.github.io.git如：https://github.com/yihangdeng/yihangdeng.github.io.git\n\n\n\nGit远程部署插件安装cnpm install --save hexo-deployer-git\n配置_config.yml设置总文件夹下的配置文件_config.yml，在配置信息的最底部修改并添加内容如下\n# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy: \ttype: ‘git’ \trepo: (仓库创建后生成的链接)  \tbranch: master\n\n# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy: \ttype: git \trepo: https:&#x2F;&#x2F;github.com&#x2F;yihangdeng&#x2F;yihangdeng.github.io.git \tbranch: master\n\n内容推送\n通过命令远程部署到GitHub仓库hexo d\n\n在远程部署的过程中有时要求输入GitHub的用户名和密码，如：Username for &quot;https://github.com\\&quot;  输入用户名Password for &quot;https://username@github.com\\&quot; 输入密码(密码默认不显示，直接输入后回车即可)若出错请检查是否有配置git的用户名和邮箱\n\n\n刷新GitHub仓库可查看生成内容已部署到GitHub中\n\n通过浏览器访问你的博客  \n\nurl：username.github.io  \n如：yiahngdeng.github.io\n若访问不了，请先尝试访问博主的博客(yiahngdeng.github.io)进而确认是部署出错还是访问GitHub的网络出现问题，具体参加博文《GitHub访问及其下载问题解决方案》。\n\n\n\n\n\n常见错误\n建议每次修改内容后都执行“hexo g”命令校验生成一下，报错的内容会显示在终端上。\n标明错误行数：一般是配置文件中的“键值对”敲错，记住是英文冒号加空格，“: ”\nGit错误提示之：fatal: Not a git repository (or any of the parent directories): .git 提示说没有.git这样一个目录，在命令行 输入 git init  然后回车就好了\n\n参考链接\ncodesheep：https://www.bilibili.com/video/BV1Yb411a7ty\n\n","tags":["Hexo","环境搭建","技术积累"]},{"title":"数据库原理 第一章 绪论","url":"/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E7%BB%AA%E8%AE%BA/","content":"绪论\n数据库基本概念\n数据（data）：描述事物的符号记录称为数据\n数据库（DB，DataBase）：长期存储在计算机内、有组织的、可共享的大量数据的集合\n数据库管理系统（DBMS，Data Base Management System）：用于科学高效地存取、维护数据的计算机基础软件，是一个大小复杂的软件系统(如操作系统般)。其最主要的功能如下：\n数据定义功能（DDL，Data Definition Language）：如对库、表、字段等数据对象的定义(创建,修改,删除等)\n数据操纵功能（DML，Data Manipulation Language）：对数据的增删改查等操作\n\n\n数据库系统（DBS，DataBase System）：DB + DBMS(相关tool) + Program + DBA组成的存储、管理、处理和维护数据的系统\n\n数据模型\n两类数据模型：概念模型(信息模型)、逻辑模型与物理模型\n\n概念模型：以用户角度对数据进行信息建模，不依赖于具体DBMS，是概念级的模型。其他相关概念如下：\n\n实体(entity)：客观存在且相互区别的事物。如，一条具体的信息，类对象的一个实例\n\n实体型(entity type)：用实体名及其属性名的集合来抽象同类实体。如，面向对象中的类\n\n实体集(entity set)：同类型的实体的集合，如全体学生，一些对象的集合、表等\n\n属性(attribute)：实体具有的某一特性。如，数据表中的字段/列\n\n码(key)：唯一标识实体的属性集，(注意是属性集)\n\n联系(relationship)：现实世界中，实体(型/集)与实体(型/集)之间的联系，一般有一对一，一对多，多对多的联系\n   联系的定义与判断：在A实体集内取1个实体，而这个实体能在B实体集内对应多个实体。则称为一对多，其他类型联系以此类推。  \n\nE - R模型：概念模型的最常用的表示方法为实体-联系方法(Entity-Relationship approach)，也称E-R模型，用E-R图描述。具体设计与实现在“概念结构设计篇”讲解  \n\n\n\n逻辑模型与物理模型：以计算机系统角度对数据的建模，由DBMS。常见逻辑模型如层次、网状、关系、面向对象等模型。\n\n\n\n模型之间的关系\n\n\n数据模型的组成要素：数据模型由数据结构(对象的组成与对象间的联系)、数据操作(增删改查)、数据完整性约束条件(确保数据的完整性)组成。任何数据模型都需考虑的三个因素。\n\n\n数据库系统结构\n基本概念\n\n型（type）：某一类数据的结构与属性的说明。如类的定义\n\n值（value）：值是型的具体赋值。如某一个类的实体对象(实例)\n\n\n模式（schema）：是指数据库全体数据的逻辑结构和特征的描述，属于“型”的层次，相对稳定\n\n实例（instance）：模式对应的一个具体值称为实例，相对变动\n注意，这里“一个具体值”不是只有一个值，而是一个模式的值，即刻整个数据库的数据。\n\n\n\n二级映像下的三级结构：由模式对外(应用程序)，对内(数据存储)分别进行了模式映像。从而产生了两个二级映像，即外模式与内模式。\n\n三级结构：外模式，模式，内模式统称数据库三级模式的结构\n模式：具体概念不再赘述，强调模式是所有用户的公共数据视图\n外模式：又名子模式、用户模式。它是数据库用户(开发者与最终用户)能够看见与使用的局部数据的逻辑结构和特征的描述**\n内模式：又称为存储模式，一个数据库只有一个内模式，是数据在数据库内部的组织方式的描述\n\n\n模式映像的作用：外模式实现了逻辑独立性，内模式实现了物理独立性。从外到内保证模式的相对稳定\n\n\n\n\n数据库系统组成​    数据库系统由：硬件平台及数据库，软件，人员(数据库管理人员)(DBA，DataBase Administrator)组成。\n","tags":["SQL","技术积累","数据库"]},{"title":"数据库原理 第二章 关系数据库","url":"/2020/10/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"关系数据库\n基本概念\n定义：关系数据库是采用关系模型的数据库系统，而关系模型的数据结构(数据模型三部曲之一)就是关系本身。即现实世界的实体与实体间的联系都用关系来表示，其逻辑结构表现为一张二维表\n相关术语：\n\n\n\n\n关系术语\n一般表格术语\n\n\n\n关系（relation）\n表\n\n\n元组（tuple）\n行或记录\n\n\n属性（attribute）\n列\n\n\n分量\n列值/属性值\n\n\n域（domain）\n列值/属性值给定的取值范围(非数据类型上的范围)\n\n\n基数\n一个域允许的不同取值个数\n\n\n关系模式\n关系型，即对表格结构的描述\n\n\n\n[关系]关系的类型：三种，基本关系(基本表/基表)、查询表、视图表\n[域]笛卡儿积：从数学定义上，笛卡尔积的基数等于两个集合中各分量的组合。从数据表中，即每个表的元组总数的相乘。如表1有n行数据，表2有m行数据，则表1和表2构成的笛卡尔积为n*m\n\n关系操作\n关系操作类型：分为两类，查询操作(query)与(插入、删除、修改)操作两大类型组成\n\n查询操作：选择(select)、投影(project)、连接(join)、除(divide)、并(union)、差(except)、交(intersection)、笛卡尔积等。加粗部分为查询的五大基本操作，其他操作均可由其基本操作来实现。\n\n\n关系数据语言：\n\n定义：关系数据语言主要用于表达对数据库抽象层面的查询操作。\n关系数据语言的分类：关系代数语言、关系演算语言、结构化查询语言。\n关系代数语言：用对关系的运算来表达查询要求(操作)，重点掌握\n关系演算语言：用谓词来表达查询要求(操作)\n双重特点语言——结构化查询语言SQL(structured query language)：同时具备关系代数和关系演算双重特点的语言\n\n\n\n\n\n关系代数语言\n关系代数运算符：\n\n​    备注：R，relationship，关系/数据表、F，function，选择条件，逻辑表达式、A，attribute，属性列、θ，比较运算符\n\n传统集合运算：均为二目运算，交、并、差、笛卡尔积四种\n\n专门关系运算：选择、投影、连接、除运算等\n\n着重解释“连接”\n\n定义：\n\n连接运算过程：R与S均是关系表，从R和S的笛卡尔积(广义笛卡尔积)RxS中选取R关系在A属性组上的值与S关系在B属性组上的值满足比较关系θ的元组，即，只要进行连接运算，首先生成的肯定是笛卡尔乘积\n\n等值/非等值连接：θ为“=”等值连接，若θ为比较运算符则是非等值连接，而自然连接是一种特殊的等值连接。\n\n\n连接条件F运算符：\n\n\n\n\n\n\n\n\n\n\n类型\n格式定义\n例子\n\n\n\n选择\n∂F(R)\n∂Sage &lt; 20(Student)\n\n\n投影\n∏A(R)\n∏Sname，Sdept(Student)\n\n\n连接\nR1⋈R2 (因符号表示问题，常见上述定义)\n略\n\n\n关系的完整性\n实体完整性（entity integrity）：主键，表唯一，非空\n参照完整性（referential integrity）：外键，列唯一，可空\n用户定义的完整性：为某个属性定义取值约束\n\n注意：主键和外键如果存在则必须定义，否则就是数据库设计本身存在问题，实体完整性和参照完整性是关系的两不变性\n","tags":["SQL","技术积累","数据库"]},{"title":"数据库原理 第五章 数据库完整性","url":"/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7/","content":"数据库完整性\n什么是数据库完整性\n数据库完整性(integrity)：数据的正确性和相容性\n\n维护数据库完整性功能组成\n\n完整性约束机制：实体完整性、参照完整性、用户定义完整性等\n完整性检查方法：一般在增删改查或事务操作前后进行\n违约处理：not action(拒绝)，cascad(级联)，nullifies (置空)\n\n\n\n实体完整性\n定义：create table 中的 primary key定义(列级/表级)\ncreate table Student(\tSno char(9) /*primary key*/,  /*列级定义*/    primary key(Sno) /*表级定义*/);\n\n完整性检查\n\n检查主码值是否唯一，若不唯一拒绝插入与更新\n检查主码个属性是否为空，存在一个空，则同样拒绝操作\n\n\n违约处理：对于主键冲突，违约系统默认一概NOT ACTION(拒绝)处理\n\n\n参照完整性\n定义：create table 中的 foreign key() references定义(表级)\n\n完整性检查与违约处理\n\n隐式处理(默认策略)：NOT ACTION(拒绝)\n\n显示处理(自定义违约处理方式)：\n\n应用场景：只有被参照表(外码表)才可显示定义违约处理策略，即只允许在 foreign key 授权语句后追加，不可写在其他地方，且仅限于update与delete操作\n\n语句格式：[表级定义权限约束 &lt;空格&gt;]  ON  &lt;违约操作&gt; &lt;违约处理&gt; \n\n&lt;违约操作&gt;：且限于 update、delete\n\n&lt;违约处理&gt;：拒绝(NO ACTION)，级联(CASCADE)，置空(NULLIFIES)\n级联操作：若删除的参照表的数据在其他表被引用，连同删除\n\n\n\n\ncreate table Student(\t...    primary key(Sno,Cno),\t\t/*只允许在foreign key 后追加显示违约处理*/    foreign key(Sno) references Student(Sno) on delete cascade on update cascade);\n\n\n\n\n\n用户定义的完整性\n定义：用户可对具体列(字段)进行约束，一般分为两种\n\n属性上的约束条件：可对单个列级属性进行约束\n元组上的约束条件：可对多个列级属性进行约束，完整性约束限制类型同上\n\n\n完整性约束：限制类型含，not null(非空)，unique(唯一)，check&lt;条件表达式&gt;)\ncreate table SC(\tSno char(9) not null,    Sname varchar(10) not null,    Ssex char(2) check(Ssex IN(&#x27;男&#x27;,&#x27;女&#x27;)),    Sgrade samllint check(Sgrade &gt;=0 AND Sgrade &lt;= 100),    CHECK(Ssex = &#x27;女&#x27; OR Sname NOT LIKE &#x27;Ms.%&#x27;)/*同时约束多个列*/)\n\n违约处理：系统统一采取**拒绝(NOT ACTION)**处理\n\n\n完整性约束命名子句概念与子句的创建\n前言：上述所有约束都是在create table时设置，若需要修改约束，难道只能重新建表？\n\n命名子句：在create table设置约束时为每个约束操作命名，后序修改或删除约束可通过操作这个命名\n\n子句格式：constraint &lt;完整性约束条件名&gt;&lt;完整性约束条件&gt; \n\n&lt;完整性约束条件&gt;包含：primary key、foreign key，not null、unique、check\n\ncreate table Student(\tSno int constraint c1 check(Sno &gt;= 9000 AND Sno &lt;= 9999),/*列级操作*/    constraint StudentKey primary key(Sno) /*表级操作示例*/);\n\n\n\n修改完整性限制\n使用环境：在 alter table 语句下进行修改(add、drop)\n语句格式：`&lt;add | drop&gt; constraint &lt;完整性约束子句名 | 完整性约束子句&gt;\n\nalter table Student\tdrop constraint c1; /*删除Student表中名为c1的完整性约束*/\talter table Student  /*在Student表中添加新的完整性约束子句*/\tadd constraint Sno_domain check(Sno &gt;= 9000 AND Sno &lt;= 9999);\t/*若想修改约束，则只能先删除约束再添加过新的约束*/\n\n触发器\n定义：触发器(trigger)，由事件驱动的特殊过程(事件-&gt;条件-&gt;动作)\n\n创建触发器：[ 事件(触发时机) -&gt; 条件(触发条件) -&gt; 动作(存储过程)]\ncreate trigger &lt;触发器名&gt;&lt;before | after&gt; &lt;触发事件&gt; on &lt;表名&gt; /*定义触发的时机*/referencing &lt;new|old&gt; row as&lt;变量&gt; /*通过referencing引出变量*/for each&lt;row | statement&gt; /*指明动作体执行的频率*/[when &lt;触发条件&gt;]&lt;触发动作体&gt;\n\n\n只有创建表的用户才能在此表上创建触发器，而且数量有限，具体数量由数据库管理系统本身设计所定\n触发器名：必须唯一\n表名：只能是基本表，不能是视图\n触发事件：\n触发时机：可在语句执行前before，或执行后after\n操作类型：可以是增删改查，事务等操作，如insert，delete，update…\n事件组合：可以单一事件，可组合，insert or delete，或指定列触发 update of &lt;触发列,…&gt;\n\n\n触发器类型：\n语句级触发器(for each statement)：执行完这条语句后且符合触发条件才会调用触发器(有可能这条语句已经操作了若干行数  据)，因此语句级触发器是不允许通过referencing引出变量new或者old row数据的\n行级触发器(for each row)：相反，行级触发器，当检查到一行数据符合触发条件就会调用触发器。因为数据行是确定的，所  以可以通过referencing 引出变量new | row的数据  \n\n\n触发条件：触发条件的书写即&lt;条件表达式&gt;的书写\n触发动作体：匿名PL/SQL过程块，也可以是存储过程\n\n/*当对表SC的Grade属性进行修改时，若分数增加了10%，则将此次操作记录到另一个表SC_U(Sno、Cno、Oldgrade、Newgrade)中，其中Oldgrade是修改前的分数，Newgrade是修改后的分数。*/create trigger SC_T\n\n\n\n\n\n\n触发器的激活机制：\n\n同一表上的多个触发器按，执行before触发器—&gt; 激活sql语句 —&gt; 执行after触发器流程触发\n对于相同的触发器类型的触发器，遵循“谁先创建谁先执行原则”，有些DBMS按触发器名称字母排序。\n\n\n删除触发器：drop trigger &lt;触发器名&gt; on &lt;表名&gt;\n\n\n","tags":["SQL","技术积累","数据库"]},{"title":"数据结构 第一章 绪论","url":"/2020/08/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E7%BB%AA%E8%AE%BA/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n知识大纲\n数据结构的起源\n基本概念和术语\n逻辑结构与物理结构\n抽象数据类型\n\n数据结构的起源早期认知人们都把计算机理解为数值计算工具。解决问题方式如下：\n\n分析问题\n抽像其数据模型\n设计数据模型对应算法\n编写程序\n\n实际环境现实中，更多是解决非数值型问题，因此需要更加有效的科学手段。**(比如表、树图等数据结构)。\n基本概念和术语数据数据的基本概念数据：是描述客观事物的符号，是计算机中可操作的对象，是能被计算机识别，并能够输入给计算机处理的符号集合。\n\n比如编程所用到的数据类型，还包括字符、声音、图像、视频等这里所描述的数据，其实就是符号\n\n数据的基本特性\n可输入到计算机中\n能被计算机程序处理\n\n数据元素数据元素：组成数据的，有一定意义的基本单位，在及算你中通常作为整体处理。也被称为记录。\n数据项数据项：一个数据元素可以由若干个数据项组成。\n\n比如人这样的数据元素，可以有眼、耳、口、鼻，姓名、年龄、性别这些数据项\n\n\n数据项是数据的最小单位\n在研究数据结构问题时，数据元素才是建立数据模型的着眼点\n\n数据对象数据对象：是性质相同的数据元素的集合，是数据的子集。\n小结\n数据：就是符号，数值型和非数值型集合\n数据元素：组成数据有意义的基本单位，即java中的“类”\n数据项：组成数据元素的基本单位，即类里面的“属性”\n数据对象：是数据的子集。即类里面的“对象/实例”\n\n\n数据结构数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。结构即关系！\n一个“好”的程序，必须分析待处理对象的特性及其**各处理对象之间存在的关系**这就是研究数据结构的意义所在。\n\n\n“分析待处理对象的特性”，即以前接触高级语言的“面向对象编程”  \n博主如今缺乏的，即是学习“各处理对象之间存在的关系”\n\n\n数据结构实际涵盖三个主要内容：逻辑结构(表,队,树,图…)、存储结构(顺序存储,链式存储)、基本操作(ADT)组成\n逻辑结构与物理结构逻辑结构逻辑结构：是指数据对象中数据元素之间的相互关系，也是今后讨论的重点。主要类型包含如下\n\n集合结果\n线性结构\n树形结构\n图像结构\n\n集合结构集合结构：集合结构中的数据元素除了同一个集合外，它们之间没有其他关系。\n\n它们相互平等，唯一且共同的属性就是“同属一个集合”，类似数学的集合，形如“鱼塘”\n\n线性结构线性结构：线性结构中的数据元素之间是一对一的关系，类似“火车，项链”。\n树形结构树形结构：树形结构中的数据元素之间存在一种一对多的的层次关系。形如“大树”分支。\n图形结构图像结构：图形结构的数据元素是多对多的关系，类似“人际关系”，交错复杂。\n小结用示意图表示数据的逻辑结构时，要注意两点\n\n将每一个数据元素看做一个结点，用圆圈表示\n元素之间的逻辑关系用结点之间的连线表示，如果这个关系是有方向的，必须标明箭头\n\n\n物理结构/存储结构物理结构：是指数据的逻辑结构在计算机中的存储形式。\n\n\n即数据元素如何存储到计算机的存储器中，这里的存储器主要针对内存而言 \n数据的存储结构应正确反映数据元素之间的逻辑关系，这才是重点  \n\n\n\n存储结构形式有两种：顺序存储和链式存储\n顺序存储结构顺序存储结构：是把数据元素存放在地址连续的存储单元里。此时，其数据间的逻辑关系和物理关系是一致的。\n\n形如理想状态下的排队，又如编程中的数组存储/开辟空间机制\n\n链式存储结构链式存储结构：是把数据元素存放在任意的存储单元里，而这组存储单元可以是连续的，也可以是不连续的。\n\n形如去银行、医院等地方，设置了“叫号排序”的机制。实际，把变量的地址存储在一个指针变量中，通过指针变量找到对应的数据\n\n小结\n逻辑结构是面向问题的，而物理结构就是面向计算机的\n顺序存储：连续开辟-按序对应\n链式存储：任意开辟-叫号对应\n\n抽象数据类型数据类型数据类型：是指一组性质相同的值的集合,及定义在此集合上的一些操作的总称。\n\n在计算机中，内存也不是无限大的，计算机的研究者们就考虑，要对数据类型进行分类，分出多种数据类型来适合各种不同的计算条件差异，同时节省内存\n\nC语言中数据类型可以分为两类\n\n原子类型：不可以再分解的基本类型，例如整型、浮点型、字符型等。\n结构类型：由若干种数据类型组合而成，是可再分解。如整型数组由若干整型数据组成的\n\n抽象数据类型抽象抽象：抽象是指抽取出事物具有的普遍性的本质。即抽出问题的特征而忽略非本质的细节。\n抽象数据类型抽象数据类型(Abstract Data Type，ADT)：是指一个数学模型及定义在该模型上的一组操作。\n\n\n抽象数据类型不仅仅指那些已经定义并实现的数据类型(int、char等)，还可以是计算机编程者在设计软件程序时自己定义的数据类型，即如同高级语言的即“类”一样。而“及定义在该模型上的一组操作”即如同定义类，及其基本“方法”\n比如，无论在PC、平版电脑、只能手机上都拥有“整数”这个类型，那么可以说“整型”其实就是一个抽象的数据类型，而且“抽象”的意义在于数据类型的数学抽象特征。\n\n\n抽象数据类型体现了程序设计中，问题分解、抽线、信息隐藏的特性。\n抽象数据类型的标准格式ADT 抽象数据类型名\nData\n    数据元素之间逻辑关系的定义\nOperation\n    操作1\n        初始条件\n        操作结构描述\n    操作2\n        ...\n\nendADT\n总结\n现实问题中更需要解决的是非数值运算问题。\n\n数据  \n\n数据即符号\n数据元素即“类”\n数据对象即可“实例”\n数据项即“属性”\n\n\n结构即关系\n\n数据结构定义：是相互之间存在一种或多种特定关系的数据元素的集合\n\n\n逻辑结构与物理结构，即面向问题，与面向存储。\n\n四大逻辑结构(“四形”)\n集合结构\n线性结构\n树形结构\n图形结构\n\n\n两大物理结构\n顺序存储(数组)\n链式存储(指针)\n\n\n\n\n抽象数据类型\n\n数据类型\n原子类型(不可分割/int，char)\n结构类型(组合而成)\n\n\n抽象数据类型\n已定义数据类型抽象，即int，char\n自定义数据类型抽象，即struct，类\n\n\n抽象数据类型规范:ADT、Data、Operation、endADT\n\n\n\n作者建议研读方法\n复习c语言的基础知识。\n第一遍阅读，建议从头至尾进行通读。\n阅读时，摘抄/笔记是非常好的习惯。“最淡的墨水也胜于最强的记忆”\n阅读每一章时，特别是阅读****算法的推导过程，一定要在电脑中运行代码和进行调试，设置断点和逐行执行，参照书的讲解，观察变量的变化情况来理解算法的编写原理。\n阅读完每一章时，一定要在理解基础上记忆一些关键东西，最佳效果就是不看书也可以一点不错的默写相关的算法。\n阅读完每一章时，一定要适当练习。\n在之后的学习或工作中，尽量把学到的数据结构和算法运用到现实开发中。\n\n《大话数据树结构》初读后有感教材和自学读物，所面向的读者是完全不同的教材特性\n好的教材应试是提纲挈领、重点突出。\n一定要留出思考空间，否则就没必要再听老师上课了。教材很多内容的讲解都是由老师在课堂上完成的。\n教材中必定有练习、课后习题、思考题等，而这些大多可以通过老师来解答。\n比如我们中学时的语文、数学课本，很薄的一本书通常要用一个学期、甚至一年的时间来学，这就是因为它们是教材而不是自学读物。如果小说,可能一两天就读完了。\n\n\n\n读物——隔空交流的介质作者角度\n作者认为，读者拿到的虽然只是一本没有表情、不会说话的书，但其实也是在隔空与另一个朋友交流。\n人与人的交流不可能只是就事论事，一定会有情感的沟通，这种情感如果能产生共鸣、达成互信，就会让沟通的事情本身更容易理解和接受。\n\n博主理解\n读物本是以内容第一为原则。但其作者的表诉方式，引用，感受等情感会附带许多作者本人的价值观。即情感交流，也是阅读的影响之一。\n对于技术类读物，除技术内外，最明显的就是学习读者的编书方式，从编书结构从而建立更全面，深刻，有效的知识的架构。\n如本书最明显的其中一个特征就是会对每一个小知识群进行小结提炼。这也会影响到我摘抄笔记的录入结构。\n\n\n\n","tags":["技术积累","数据结构"]},{"title":"数据结构 第三章 循环链表&双向链表","url":"/2020/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8&%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲\n循环链表\n双向链表\n小结\n\n循环链表基本概念单循环链表(circular linked)： 将单链表的终端结点指针端口由空指针改为指向头结点，是整个单链表形成一个环。  \n\n\n相对单链表，循环链表可以实现从任意一个结点出发，可访问到链表的全部结点的操作。\n为了方便操作，循环链表为空链表时，头结点的指针域也“循环”地指向自己。如下图所示：\n\n\n实际应用​    而实际应用中，很多操作是在表的首或尾两端进行。传统单链表使用的头指针在首部操作时间复杂度为O(1)，而尾部操作时间复杂度则为O(n)。 此时，不设置头结点，而是借助”循环”本身的特性，通过设置终端结点的尾指针(rear)**，实现对首尾的高效操作**。  \n\n对于终端结点复杂度即为O(1)，对于头结点即rear-&gt;next，头指针即rear-&gt;next-&gt;next，复杂度均为O(1)\n循环链表没有增加任何存储量，仅对链接方式稍作改变，因此基本操作的实现与链表相似。如ListLength、GetElem、LocateElem等这些操作只要设计一个方向的指针即可，另一个指针多了也不能提供什么帮助。\n\n合并循环链表通过尾指针链接两个循环链表\np = rearA-&gt;next;\t/* 保存A表的头结点*/                    rearA-&gt;next = rearB-&gt;next-&gt;next;    /*将本是指向B表的第一个结点（不是头结点） */\t\t\t\t\t\t\t\t/* 赋值给reaA-&gt;next，即*/q = rearB-&gt;next; rearB-&gt;next = p;  /* 将原A表的头结点赋值给rearB-&gt;next，即③ */free(q);   /* 释放q*/\n\n\n\n双向链表定义及其初始化双向链表(double linked list)**：是在单链表的每个结点中，在设置一个指向其前驱结点**的指针域。定义如下：\n/*线性表的双向链表存储结构*/typedef struct DulNode&#123;    ElemType data;    struct DulNode *prior;    struct DulNode *next;&#125;DulNode,*DuLinkList;\n\n双链表的插入相对于单链表的插入操作，双链表的插入需要修改4个指针。关键修改代码如下(在结点p的后面插入一个新结点s)：\ns-&gt;prior = p;s-&gt;next = p-&gt;next;p-&gt;next-&gt;prior = s;p-&gt;next = s;\n\n\n双链表的删除因为有两个指针域，在指向调整上更加灵活。若p指向待删除结点，则删除的关键代码部分如下(未被验证)：\np-&gt;prior-&gt;next = p-&gt;next;p-&gt;next-&gt;prior = p-&gt;prior;\n\n\n小结\n双向链表先对于单链表来说，更加复杂，对于对于插入和删除时，需要歌外注意\n双向链表有两个指针域，因此空间上占用略多一些\n由于双向链表有良好的对称性，使得对某个结点的前后结点操作带来了方便\n因此总的来说，双向链表通过复杂的设计用空间效率在某种情况下换取了时间效率\n\n","tags":["技术积累","数据结构"]},{"title":"数据库原理 第六章  关系数据理论","url":"/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%90%86%E8%AE%BA/","content":"关系数据理论范式与范式之间的关系\n低级范式可通过分解转换为若干个高一级方式的关系模式的集合\n高一级的范式必是必定是低一级范式\n包含关系，\n1NF\n\n插入异常：Cno初始无，但为码\n删除异常：Cno，删除，连累其他数据\n修改复杂：存储冗余，修改复杂\n\n2NF\n小结：部分函数依赖\n依赖定义——&gt;常见依赖特性 == 完全函数依赖，按照依赖的标准定义能体现出，现实世界必定存在依赖关系，而完全性依赖必定存在若干不同且唯一元组(即数据冗余情况最严重(这里应该就不叫冗余了…是必要的))。若让这种情况(完全性依赖)混在其非主属性中(部分函数依赖)，则必定存在一个问题——&gt;存储冗余，而这种存储的冗余而引发的一系列异常如下\n\n存储冗余：不符合完全函数依赖的非主属性必定产生存储冗余\n修改复杂化：而当对存储冗余数据本身进行修改自然会呈现出修改的复杂化\n对非冗余(符合完全函数依赖/部分函数依赖中非依赖子集)进行删除操作的时候，出现删除异常(删除了同一关系下不符合完全函数依赖的属性)\n\n角度2：\n\n对原本就具备完全函数依赖的关系影响\n删除异常：进行删除操作的时候，出现删除异常(删除了同一关系下不符合完全函数依赖的属性)\n\n\n对不符合完全函数依赖(部分函数依赖)异常\n存储冗余：不符合完全函数依赖的非主属性必定产生存储冗余\n修改复杂化：而当对存储冗余数据本身进行修改自然会呈现出修改的复杂化\n\n\n\n解决方案：投影分解，\n3NF\n在2NF基础上消除传递函数依赖\nBCNF(修正/扩充的第三范式)\n全是非平凡的函数依赖\n小明，老1，物理\n小东，老1，物理\n传递函数依赖，同样是会产生存储冗余，(因为2NF不存在完全函数依赖与部分函数依赖的相互影响，因此不存在删除异常)，进而出现存储冗余与与之衍生的修改复杂化\n多值依赖\n判定方法：对于任意关系中，如果存在两个元组（就是行），记为A,B，如果他们的某一属性X的值相等，那么我们交换它们另外的其中一个属性Y的值后，得到的新的两个元组，这两个元组在原来的表中是可以找到的\n整个小结：\n劣势依赖：部分函数依赖、传递函数依赖\n其实按最基本的依赖关系，去建立数据库就基本符合常规规范\n出现部分函数依赖侧面表明该关系中，属性间的关系并非完全依赖，按照\nSdept、 Sloc部分函数依赖\n将一个1NF关系分解为多个2NF的关系，并不能完全消除关系模式中的各种异常情况和数据冗余\n不能说规范化程度越高的关系模式就越好在设计数据库模式结构时，必须对现实世界的实际情况和用户应用需求作进一步分析，确定一个合适的、能够反映现实世界的模式上面的规范化步骤可以在其中任何一步终止 \n规范化理论为数据库设计提供了理论的指南和工具也仅仅是指南和工具 \n并不是规范化程度越高，模式就越好必须结合应用环境和现实世界的具体情况合理地选择数据库模式 \n反规范化设计：规范化数据将导致数据库中产生更多的表，这些表的结构优化了数据变更性能，但是在有些情况却大大降低了数据查询效率。在这种情况下，通过引进额外的列或额外的表将有助于提高数据查询能力。在表格中有意识的引入一定的数据冗余以改进性能被称为反规范化。反规范化是查询效率与数据冗余的折中。\n","tags":["SQL","技术积累","数据库"]},{"title":"数据结构 第三章 线性表及其顺序存储结构","url":"/2020/09/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%8F%8A%E5%85%B6%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲\n线性表的定义\n线性表的抽象数据类型\n线性表的顺序存储结构\n地址计算方法\n顺序存储结构的存入与取出\n顺序存储结构的插入与删除\n线性表顺序存储结构的优缺点\n\n线性表的定义线性表（List）：零个(空表)或多个数据元素的有限序列。即线性表的长度n≧0。关键点如下：\n\n序列：表示元素之间是有严格的顺序。元素之间的关系是一对一的关系。\n\n\n若线性表记为(a1，…ai-1，ai，ai+1，…，an)，称ai-1是ai的直接前驱元素，ai+1则是ai的直接后继元素\n\n第一个元素无前驱，最后一个元素无后继，其他元素有且只有一个前驱和后继\n\n\n\n\n有限\n\n元素类型相同\n\n\n线性表的抽象数据类型线性表的抽象数据类型定义如下：\nADT 线性表（List）Data\t&#123;a1,a2,…,an&#125;Operation\tInitList(*L): \t\t初始化操作，建立一个空的线性表L。\tListEmpty(L): \t\t判断线性表是否为空表，若线性表为空，返回true，否则返回false。\tClearList(*L): \t\t将线性表清空。\tGetElem(L,i,*e): \t将线性表L中的第i个位置元素值返回给e。\tLocateElem(L,e): \t在线性表L中查找与给定值e相等的元素，如果查找成功，\t\t\t\t\t  返回该元素在表中序号表示成功；否则，返回0表示失败。\tListInsert(*L,i,e): \t在线性表L中第i个位置插入新元素e。\tListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。\tListLength(L): \t\t返回线性表L的元素个数。endADT\n\nps：上述为最基本操作，其他更复杂的操作完全可以通过这些基本操作组合实现。\n线性表的顺序存储结构线性表的顺序存储定义线性表的顺序存储结构：指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n\n最常见的就是用一维数组来实现顺序存储结构\n\n线性表的顺序存储结构代码如下：\n#define MAXSIZE 20\t\t//存储空间处时分配量typedef int ElemType\t//数据类型根据实际情况而定，这里假设为inttypedef strcuct&#123;\t\t\tElemType data [MAXSIZE];\tint length;\t\t\t//线性表当前长度&#125;SqList;\n\n据上述可知，描述顺序存储结构需要三个属性：\n\n存储空间的起始位置：其实就是数组data(首地址)\n线性表的最大存储容量：数组长度MaxSize\n线性表的当前长度：length\n\n顺序线性表的初始化/* 初始化顺序线性表 */Status InitList(SqList *L) &#123;     L-&gt;length=0;    return OK;&#125;\n\n\n\n地址计算方法数组长度与线性表长度的区别\n数组长度：是指存放线性表存储空间的长度，一般是固定值。int data[3]={1,2,3}长度为3。\n线性表长度：线性表中存在数据元素个数，是经常变化的。\n数组下标从“0”开始，线性表是从“1”数起的。\n\n地址计算方法数据元素的序号和存放它的数组下标之间对应关系如下图所示：\n\n\n对于第i个数据元素ai的存储地址可由a1推算出：\nLOC(ai) = LOC(a1)+(i-1)*c \n\n\n\nLOC表示获得存储位置的函数，c表示数据元素的类型的存储单元\n\n\n对于第 i 个数据元素ai的存取位置关系：\nai = data[i - 1]\n\n\n顺序存储结构的存入与取出GetElem思路：\n\n线性表必须存在数据;\ni 的数值在数组下标范围内;\n返回数组的第 i-1 下标的值即可;\n\n#define OK 1#define ERROR 0#define TRUE 1#define FALSE 0typedef int Status;//基本说明：Status是函数的类型，其值是函数结果状态代码，如OK等//初始条件(输入条件)：线性表L已存在，位置参数i范围应处于： 1 ≤ i ≤ ListLength(L)//操作结果：用e返回L中的第i个元素Status GetElem(SqList L,int i,ElemType *e) &#123;\tif (L.length == 0 || i &lt; 1 || i &gt; L.length)\t\treturn ERROR;\t*e = L.data[i - 1];\treturn OK;&#125;\n\n任意位置的存取时间复杂度都为O(1)**，即存取性能为O(1)，称为“随机存取结构**”。\n\n\n“存取”，不等于“插删”\n顺序线性表的存取仅需要知道存入的位置逻辑即可，因此查询位置的复杂度决定了存取的复杂度\n\n\n顺序存储结构的插入与删除存在线性表定义如下：\n#define MAXSIZE 20typedef int ElemType;typedef struct &#123;\t\tElemType data[MAXSIZE];\tint length;&#125;SqList;\n\n\n\nListInsert思路：\n\n如果线性表的长度等于数组长度，则抛出异常或者动态增加容量;\n如果插入位置不合理，抛出异常;\n从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置;\n将要插入元素填入位置 i 中;\n\n/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， *//* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */Status ListInsert(SqList *L,int i,ElemType e)&#123; \tint k;\tif (L-&gt;length==MAXSIZE)  /* 顺序线性表已经满 */\t\treturn ERROR;\tif (i&lt;1 || i&gt;L-&gt;length+1)/* 当i比第一位置小或者比最后一位置后一位置还要大时 */\t\treturn ERROR;\tif (i&lt;=L-&gt;length)&#123;        /* 若插入数据位置不在表尾 */\t\tfor(k=L-&gt;length-1;k&gt;=i-1;k--)  /* 将要插入位置之后的数据元素向后移动一位 */\t\t\tL-&gt;data[k+1]=L-&gt;data[k];\t&#125;     /*索引改良    for (k = L-&gt;length; k &gt;= i; k--) &#123;\t\t\tL-&gt;data[k] = L-&gt;data[k - 1];\t&#125;    */\tL-&gt;data[i-1]=e;          /* 将新元素插入 */\tL-&gt;length++;    \treturn OK;&#125;\n\nListDelete思路：\n\n线性表必须存在数据;\n如果删除位置不合理，抛出异常;\n从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置;\n表的长度减少1;\n\n/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) *//* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */Status ListDelete(SqList *L,int i,ElemType *e) &#123;         if (L-&gt;length==0)               /* 线性表为空 */\t\treturn ERROR;    if (i&lt;1 || i&gt;L-&gt;length)         /* 删除位置不正确 */        return ERROR;        *e=L-&gt;data[i-1];    int k;    if (i&lt;L-&gt;length)&#123;            /* 如果删除不是最后位置 */        for(k=i;k&lt;L-&gt;length;k++)/* 将删除位置后继元素前移 */\t\t\tL-&gt;data[k-1]=L-&gt;data[k];    &#125;    L-&gt;length--;    return OK;&#125;\n\n线性表顺序存储结构的优缺点时间复杂度分析存入与取出查询任意位置可由公式直接查出，从而决定存取的时间复杂度**均为O(1)**。\n插入与删除\n最优情况复杂度：插入与删除位置为最后一个元素，复杂度为O(1)\n最坏情况复杂度：插入与删除位置为第一个位置，复杂度为O(n)\n平均情况复杂度：位置靠前，移动元素多。位置靠后，移动元素少。平均为(n-1)/2，复杂度即为O(n)\n\n优缺点总结优点：\n\n无须为表示表中元素之间的逻辑关系而增加额外的存储空间(即可由公式直接关联)\n可以快速地存取表中任意位置的元素\n\n缺点：\n\n插入和删除操作需要移动大量的元素\n\n\n\n当线性表长度变化较大时，难以确定存储空间的容量。即难以确定MAXSIZE属性的大小\n\n造成存储空间的“碎片”\n\n\n小结\n顺序存储结构的线性表，适合于元素个数不太需要变化，更多用于存取数据的应用。\n插入和删除效率低的原因在于，相邻两元素之间的存储位置也依赖于邻居关系本身。\n\n","tags":["技术积累","数据结构"]},{"title":"数据结构 第三章 静态链表","url":"/2020/09/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲\n基本概念\n静态链表的初始化\n静态链表的插入操作\n小结\n\n基本概念\n静态链表：用数组描述的链表叫做静态链表。\n\n 如Basic、Fortran等早期编程语言，没有指针，就可通过数组实现链表结构(游标实现法)。\n\n\n静态链表使用两个数据域组成，分别叫data、cur，cur类似单链表中的next。不记录指针，而是记录后继元素的数组下标。\n\n\n/*线性表的静态链表存储结构*/#define MAXSIZE 1000typedef struct&#123;    ElemType data;    int cur;\t/*游标(Cursor)，为0时表示无指向*/&#125;\n\n\n静态链表的第一个和最后一个元素作为特殊处理，不存数据。\n未被使用的数组元素称为备用链表。\n下标为0的第一个元素cur称为头指针，用于存放备用链表的下标。\n数组最后一个元素的cur，存放第一个有数值元素的下标(相当于头结点)。\n\n\n\n静态链表初始化/*将一维数组space中各个分量链成一备用链表*/Status InitList(StaticLinkList space)&#123;    int i;    for(i = 0; i &lt; MAXSIZE - 1; i++)/*为链表所有元素cur赋值，将其中各个分量链成一备用链表*/        space[i] = i + 1;        space[MAXSIZE - 1].cur = 0;\t/*目前链表为空，最后一个元素的cur为0*/    return OK;&#125;\n\n\n静态链表的插入操作链表的插入/删除操作都需要调用存储空间的申请/释放函数。标准定义的malloc，free函数直接调用就可自动申请或释放空间。对于通过数组实现链表功能的静态链表实现插入/删除操作首先要解决的问题：如何用**静态模拟动态链表对存储空间的分配/管理(申请/释放)**。需要时申请、无用时释放。\nMalloc_SSL\n因此静态链表需要自己实现单链表的malloc函数功能。\n\n功能描述：若备用空间链表非空，则返回可分配的结点下标(类似向内存申请空间，返回地址值)，否则返回0。\n\n实现思路：\n\n静态链表设计本身然下标为0的元素存放备用链表的下标，所以直接返回下标0的cur即可。\n\n同时，需要把即将返回的备用链表的cur值重新填充到下标为0的cur，为下次分配使用。\n\n\n\n\n/*若备用空间链表非空，则返回可分配的结点下标，否则返回0*/int Malloc_SSL(StaticLinkList space) &#123; \tint i = space[0].cur;           \t\t/* 当前数组第一个元素的cur存的值 */\t                                \t\t/* 就是要返回的第一个备用空闲的下标 */\tif (space[0]. cur)         \t    space[0]. cur = space[i].cur;       /* 由于要拿出一个分量来使用了， */\t                                        /* 所以我们就得把它的下一个 */\t                                        /* 分量用来做备用 */\treturn i;&#125;\n\n\n\nListInsert思路：\n\n基本插入错误过滤\n获取空闲分量下标\n填充数据域\n定位前继结点\n头插法\n\nStatus ListInsert(StaticLinkList L, int i, ElemType e) &#123;\tif (i &lt; 1 || i &gt; ListLength(L) + 1)\t//若链表已满\t\treturn ERROR;    \tint j = Malloc_SLL(L);\t//获得空闲分量的下标\tif (j) &#123;\t\tL[j].data = e;//将数据赋值给此分量的data\t\t\t\t\t\t\t\t\tint k = MAXSIZE -1,l; //找到插入位置的前继元素，(计数器+while+工作指针后移)            \t\t\t\t //静态链表的头结点在尾部\t\t\t\t\tfor (l = 1; l &lt;= i - 1; l++)\t\t\tk = L[k].cur;        \t\tL[j].cur = L[k].cur;//改变游标指向(头插法)\t\tL[k].cur = j;       //先把前继节点的后继游标传给新节点的后继游标                                                       \t\treturn OK;\t&#125;\treturn ERROR;\t//若获取分量失败则返回错误\t   \t  &#125;\n\n注意：\n\n获取头结点下标：int k = MAXSIZE -1\n\nFree_SSL同样，静态链表实现删除操作也要先实现free函数\n/*将下标为k的空闲结点回收到备用链表*/void Free_SSL(StaticLinkList space, int k) &#123;\tspace[k].cur = space[0].cur;\t//让即将要删除的位置成为第一个优先的空位\tspace[0].cur = k;\t//即删除节点与备用链表交换两个参数&#125;\n\n\n\nListDeleteStatus ListDelete(StaticLinkList L, int i) &#123;\tif (i &lt; 1 || i &gt; ListLength(L))//删除索引过滤\t\treturn ERROR;\tint k = MAXSIZE - 1;\tint l;\tfor (l = 1; l &lt;= i -1; l++)\t//定位前继节点\t\tk = L[k].cur;\tint d = L[k].cur;//创建临时变量存储欲删除cur\tL[k].cur = L[d].cur;\tFree_SSL(L,d);\treturn OK;&#125;\n\n\n\n小结静态链表其实为了给没有指针的高级语言设计的一种实现单链表能力的方法。特性与单链表类似，尽管以后这种方法不一定用上，但这样的思考方式是非常巧妙的。\n","tags":["技术积累","数据结构"]},{"title":"数据结构 第二章 算法基础","url":"/2020/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲\n算法的定义\n算法的特性\n算法设计的要求\n算法效率的度量方法\n函数的渐进增长\n算法时间复杂度\n算法空间复杂度\n最坏情况与平均情况\n\n算法的定义算法：算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n算法的特性算法具有的五个基本特性：输入、输出、有穷性、确定性、可行性。\n输入与输出\n算法具有零个或多个输入。\n算法至少有一个或多个输出。\n\n有穷性\n算法在执行有限步骤之后，自动结束而不会出现无限循环。\n每一个步骤在可接受的时间内完成。即实际意义。\n\n确定性确定性：算法的每一步骤都具有确定的含义，不会出现二义性，类似函数。\n可行性\n算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。\n可行性意味着算法可转换为程序上机运行。\n\n算法设计的要求算法设计的要求包含：正确性、可读性、健壮性、时间效率高和存储量低。\n正确性正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。大体分为以下四个层次：\n\n没有语法错误\n\n对于合法的输入数据能够产生满足要求的输出结果\n\n对于非法的输入数据能够得出满足规格说明的结果\n\n对于精心选择的，甚至刁难的测试数据都有满足要求的输出结构。\n\n一般情况下，我们把层次3作为一个算法是否正确的标准\n\n\n\n可读性可读性：算法设计的另一个目的是为了便于阅读、理解和交流。\n健壮性健壮性：当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名奇妙的结果。\n时间效率高和存储量低设计算法应该尽量满足时间效率高和存储量(占用内存与外部硬盘存储空间)低的需求。\n算法效率的度量方法ps：这里指的效率大都是指算法的执行时间。\n事后统计方法事后统计方法：这种方法主要是通过事先设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。  \n但这种方法显然存在很大的缺陷：\n\n必须依据算法事先编制对应的测试程序，费时费力，工作量可能翻倍。\n计时器的计时效果比较依赖计算机硬件和软件等环境因素。\n算法的测试数据设计困难。\n\n事前分析估算方法事前分析估算方法：在计算机程序编程前，依据统计方法对算法提前进行估算。\n事前分析一个程序在计算机运行所消耗的时间取决于下列因素：\n\n算法采用的策略、方法。\n编译产生的代码质量。\n问题的输入规模。\n机器执行指令的速度。\n\n结论：\n\n一个程序的运行时间，依赖于算法的好坏和问题的**输入规模(输入变量的值)**。\n\n测定运行时间最可靠的方法就是依据输入规模计算语句的执行次数。\n\n执行次数，也成为基本操作数量，记作 f(n)，n表示输入规模。\n\n\n\n函数的渐进增长ps：判断两个算法效率的高低，会存在因不同量级的输入规模而得出相反的结果。\n\n因此给出定义，输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，我们称函数是渐进增长快的。\n\n函数渐进增长：给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n&gt;N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐进快于g(n)。\n\n结论：判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而**更应该关注主项(最高阶项)**的阶数。\n算法时间复杂度时间复杂度的定义算法时间复杂度，记作T(n)=O(f(n))，通过大写O( )**来体现时间复杂度的记法，也称之为大O记法**。\n\n在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)= O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。   \n\n推导大O阶方法\n写出每一条语句的执行次数。\n\n把所有语句的执行次数相加并且进行基本的数学化简。\n\n\n用常数1取代运行时间中的所有加法常数。\n\n只保留最高阶项。\n\n若最高阶项存在且不是1，则去除与这个项相乘的常数。\n\n\nint i,j;\t\t\t\t//执行1次for(i = 0; i &lt; n; i++)&#123;\t\t\t//执行n次\tfor(j = i; j &lt; n; j++)&#123;\t\t/*时间复杂度O(1)的程序步骤序列*/       \t\t//执行n-2次...n-1,n,执行1次        \t//执行n-2次...n-1,n,执行1次\t&#125; &#125;printf(&quot;end&quot;);\t\t\t\t//执行1次\n\n\n总执行次数为：1+n+(n-1)+(n-2)+…+1 + 1= n(n+1)/2 +2 = n2/2+n/2 + 2\n去除常数： n2/2+n/2\n保留最高阶项： n2/2\n最高阶项存在且不等于1，去除相乘常数：n2，即最终时间复杂度为 O(n2)\n\n\n\n可看作等差数列求和：na1 + n(n-1)/2 * d\n首项a1=1，公差d=1，项数n=n\n\n\n常见时间复杂度\n\n\n阶\n非正式术语\n常见结构\n例\n\n\n\nO(1)\n常数阶\n顺序结构、无循环分支结构\n12\n\n\nO(n)\n线性阶\n无内嵌循环结构\n2n+3\n\n\nO(n2)\n平方阶\n二层内嵌循环结构\n3n2+2n+1\n\n\nO(log n)\n对数阶\n非1线性增长的循环索引\nlog2n+20\n\n\nO(n log n)\nnlog n阶\n\n2n+3nlog2n\n\n\nO(n3)\n立方阶\n三层内嵌循环\nn3+2\n\n\n2n\n指数阶\n\n2n\n\n\n常用时间复杂度所耗费得时间从小到大依次是：\nO(1) &lt; O(log⁡n) &lt; O(n) &lt; O(nlog⁡n) &lt; O(n2) &lt; O(n3) &lt; O(an) &lt; O(n!) &lt; O(nn) \n对数阶补充说明\nint count =1;while(count &lt; n)&#123;\tcount = count * 2;\t/*时间复杂度O(1)的程序步骤序列*/&#125;\n\n\n每次count乘2之后，就距离n更接近一分，而需要乘多少次？接需要执行多少次，才能跳出循环？\n把需要乘的次数设为x，则2x=n，得到执行次数x=log2n\n\n算法的空间复杂度空间复杂度：算法的空间复杂度即算法所需的存储空间，记作：S(n)=O(f(n)，此时n为问题的规模，f(n)为语句关于n所占存储空间函数。\n\n\n当不用限定词地使用“复杂度”，则通常指时间复杂度。\n时间复杂度和空间复杂度一般情况下可以相互转换。\n\n\n最坏情况与平均情况最坏情况：即一个算法存在的最低执行效率情况。\n\n在应用中，最坏情况是一种重要的需求，通常，除非特别指定，提及的运行时间都是指最坏情况的运行时间\n平均运行时间是所有情况中最有意义的，它属于期望的运行时间。\n\n","tags":["技术积累","数据结构"]},{"title":"数据结构 第五章 串","url":"/2020/09/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E4%B8%B2/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲串的定义串(String)：是由零个或多个字符组成的有限序列，又名叫字符串。\n\n记为：s = “a1a2a3…an(n ≥0)”\n串中的字符数目n称为串的长度\n零个字符串称为空串(null string)即，“ ‘’” ”\n序列即相邻字符之间存在前驱后继关系\n主串与子串：串中任意个数的连续字符组成的子序列称为该串(主串)的子串\n\n串的比较常用字符标准编码\n标准ASCII编码：用7位二进制数表示128个字符 (可表示英语为主的语言)\n扩展ASCII编码：用8位二进制数表示256个字符 (可表示英语为主的语言和特殊字符)\nUnicode编码：用16位二进制表示216个字符，约6.5万多个字符(足以表示全世界成百上千种语言和文字)\n\n比较原则字符串的比较在计算机中取决于挨个字母的前后顺序，靠后的字母比靠前的字母要大。如“silly” &lt; “stupid”\n存在字符串 s 与 t，若 s &gt; t，则存在如下两种情况：\n\n情况1：“单纯地多出字母(包含关系)，则多出字母的字符常大”。如：“happy” &gt; “hap”，单纯多出“py”\n情况2：“无包含关系，则挨个字母比较顺序，靠后比靠前大”。如：“happy” &gt; “happen”，匹配到第5个字母‘y’ &gt; ‘e’\n\n小结：\n\n等长：挨个字母前后顺序比较\n不等长\n完全包含关系，多字母为大，happy &gt; hap\n非包含完全包含关系，挨个字母比较，happy &gt; happen\n\n\n\n串的抽象数据类型“串”从逻辑结构上和线性表很相似，但基本操作，串更倾向于查找子串位置，替换子串等\nADT 串(string)Data    串中元素仅由一个字符组成，相邻元素具有前驱和后继关系。Operation    StrAssign(T, *chars):        生成一个其值等于字符串常量chars的串T。    StrCopy(T, S):               串S存在，由串S复制得串T。    ClearString(S):              串S存在，将串清空。    StringEmpty(S):              若串S为空，返回true，否则返回false。    StrLength(S):                返回串S的元素个数，即串的长度。    StrCompare(S, T):            若S&gt;T，返回值&gt;0，若S=T，返回0，若S&lt;T，返回值&lt;0。    Concat(T, S1, S2):           用T返回由S1和S2联接而成的新串。    SubString(Sub, S, pos, len): 串S存在，1≤pos≤StrLength(S)，                                 且0≤len≤StrLength(S)-pos+1，用Sub返                                 回串S的第pos个字符起长度为len的子串。    Index(S, T, pos):            串S和T存在，T是非空串，1≤pos≤StrLength(S)。                                 若主串S中存在和串T值相同的子串，则返回它在主串S中                                 第pos个字符之后第一次出现的位置，否则返回0。    Replace(S, T, V):            串S、T和V存在，T是非空串。用V替换主串S中出现的所有                                 与T相等的不重叠的子串。    StrInsert(S, pos, T):        串S和T存在，1≤pos≤StrLength(S)+1。                                 在串S的第pos个字符之前插入串T。    StrDelete(S, pos, len):      串S存在，1≤pos≤StrLength(S)-len+1。                                 从串S中删除第pos个字符起长度为len的子串。endADT\n\n\n\n\n\n串的存储结构串的顺序存储结构\n串的顺序存储结构一般用定长数组来定义\n一般将串的长度值保存数组下标0处，有的也可存储在最后一个下标位置，或在串值后添加结束标记字符如“\\0”(数据结构面向人，一般与日常数数顺序为主)\n串的操作常使得，串值存储空间需要动态变化。一般通过自由存储区——堆和相关操作函数(malloc/free)动态分配空间\n\n串的链式存储结构串的链式存储结构因为用结点存储字符序列会浪费大量的空间，除连接串与串操作有一定方便外(只是方便/不是高效)**，总的来说，不如顺序存储灵活，性能也不如顺序存储结构好**\nBF算法BF算法，也叫朴素的模式匹配算法\n串的模式匹配：即子串在主串中的定位操作，如S=”goodgoogle”，找到T=”google”这个子串的位置\n匹配思路：\n用子串从主串的第一位开始逐一字符匹配\n若子串中任意一个字符匹配失败，则整个子串从上一次主串开始匹配的位置的下一个位置开始匹配\n以此循环，直至存在子串的每一个字符均被匹配正确的情况\n\n匹配思路图示如下：如S=”goodgoogle”，找到T=”google”这个子串的位置\ntips：“|”竖线表示匹配成功，“⚡”表示匹配失败\n\n第一步\n\n\n\n第二步\n\n\n​    3. 第三步\n\n\n第四步\n\n\n\n第五步\n\n\n代码案例思路：\n\n位置变量pos合法过滤\n设置主串与子串循环开始索引(下标0表串长度，下标1是第一个字符\n匹配循环结构结束条件(||关系，&amp;&amp;表达)：S[0],T[0]表示串长度，子串提前匹配成功，或主串全部被匹配完。则结束循环\n若字符匹配成功，则主串与子串索引分别+1，否则主串匹配索引回退，子串索引初始化\n若匹配成功(子串被全部匹配)，则计算位置并返回，否则返回错误提示\n\n/* 返回子串T在主串S中第pos个字符之后的位置。若不存在，则函数返回值为0。*//*  T非空，1≤ pos ≤ StrLength(S)。*/int Index(String S,String T,int pos)&#123;    //位置变量pos合法过滤    if (pos &lt; 1 || pos &gt; StrLength(S))\t\treturn ERROR;        //设置主串与子串循环开始索引    int i = pos;    int j = 1;//下标0用于存储字符串长度，下标1即是第一个字符的数组下标        //匹配循环结构结束条件：S[0],T[0]表示串长度，子串提前匹配成功，或主串全部被匹配完。则结束循环    //因，匹配次数 = 字符串长度 = (j - 1)，所以 等于“=”时也需执行    while(j &lt;= T[0] &amp;&amp; i &lt;= S[0])&#123;//&amp;&amp; 在这里表示，有任何一个条件不符合都表示匹配完毕         //若字符匹配成功，则主串与子串索引分别+1        if(S[i] == T[j])&#123;            i++;            j++;        &#125;else&#123;            //若匹配失败，则主串匹配索引回退，子串索引初始化            i - j + 2;\t//i - (j - 1) + 1         &#125;        &#125;    //若匹配成功(子串被全部匹配)，则计算位置并返回。    //因，匹配次数 = 字符串长度 = (j - 1)，所以若全部匹配，j一定大于字符串长度    if(j &gt; T[0])        return i - T[0];//从起点减去匹配过的次数(增过的量) == 子串长度    \t     //若匹配失败，则返回错误提示    else        return ERROR;\t\t\t\t\t\t\t\t&#125;\n\n\n因为当前教材是把字符串长度记录在数组下标0处，所以第一个字符的数组下标就是1。因此未开始匹配字符时，子串匹配索引 j 的初始值就是1，而匹配成功1次后，j++才变成2。即它们之间的关系是，匹配次数 = (j - 1) = 字符长度\n\n主串索引回退代码分析(i - j + 2)：匹配成功一次，才会造成一次主串(子串)索引的自增，所以匹配次数==主串增加量，由上可知，匹配次数 == j -1，所以主串回退到原位因为，i - (j - 1)，而需要进入下一轮匹配则还需要回退原位后 + 1，则：  \n回退上一次匹配位置下位代码未：i - ( j - 1 ) + 1 == i - j +2\n\n\n优化理解版《数据结构》从概念到C++的实现，王红梅。P104，通过增加空间复杂度O(1)，引入start变量单独存放子串匹配位置\nKMP模式匹配算法KMP匹配算法原理KMP算法核心可总结为两句话：“因为不同所以不同，跳过不同。因为相同所以相同，跳过相同！”\n\n“因为不同所以不同，跳过不同”：若存在子串字符互不相同部分，当出现主串字符匹配不了时，则无需BF完全回溯，因为BF回溯后的下一个主子串匹配肯定也是不同的。因此我们应让下次匹配跳到子串首字符(除首字符位置)下一次出现的位置。\n\n\n\n\n“因为相同所以相同，跳过相同”：当子串与主串出现不匹配时，靠近不匹配处的若干字符在字符前缀部分出现过，则不应该仅跳到重复字符(下一次出现位置)的首字符，而是跳过包括这一段相同部分。，即应该跳到(新的匹配位置)于后缀部分相同的前缀部分的下一个位置。\n\n此时，next数组的含义就是记录若当前字符出现不匹配，则需下次开始匹配的位置——重复部分的下一个位置的下标\n快速\n\n\nnext数组next数组含义k = 子串下标 = 前缀长度\nnext数组的计算next 数组代码实现KMP模式匹配算法改进记住，一切能用数学公式或字母来形式化的东西，都是为了辅助我们更好的表述，它是无二义的，请不要害怕它。\n我们不一定从数学公式中直接理解\n","tags":["技术积累","数据结构"]},{"title":"数据结构 第五章 树、森林&与二叉树的转换","url":"/2020/10/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A0%91%E3%80%81%E6%A3%AE%E6%9E%97&%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BD%AC%E6%8D%A2/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲二叉树、树、森林之间转换树、森林的结构类似复杂多样，不方便设计统一的算法。因此转换为二叉树统一处理\n树转换为二叉树树“加兄保子调层次”\n\n加线：所有兄弟节点之间加一条线\n去线：对于树中每个结点，只保留 firstchild的连线，其余均删除\n层次调整： \n文字概述：以原树结构为基准，从根结点开始，第一个孩子为根结点的左孩子，而其余兄弟结点(以原树结构为基准)均为这个左孩子的右孩子(孙子…反之一直右下衍生)\n图形化理解：从上到下以原树为基准每个子树除第一个孩子为左孩子外，其余均为这个左孩子的右孩子延续\n红色为根节点\n蓝色为根节点下第一个孩子\n绿色为以原树基准的非首孩子的其他孩子\n\n\n\n\n\n\n二叉树转换为树完全倒序操作：加兄保子调层次，调层次保子加兄，再逆序，保子(不保子：加次子/加右孩)，加兄(去兄：去右孩子)\n“加子去右调层次”\n\n加线：若某个左孩子结点存在，则将这个左孩子的所有右孩子结点都与该左孩子的双亲结点相连\n去线：去除所有结点的右孩子结点的连线\n层次调整：外貌调整\n\n森林转换为二叉树“森林变树，依次连根”\n\n把森林的每颗树都转换为二叉树\n第一颗树不动，其余树依次为上一课树的根节点的右孩子。\n\n\n二叉树转换为森林“有右即分转森林，无右二叉只变树”\n二叉树有可能转换成一棵树也有可能转换成森林\n\n“有右即分”：若二叉树存在右孩子，则将其分离出来，若分离后的二叉树还存在右孩子则继续分离，直至不存在有右孩子的二叉树。\n再把每一颗二叉树都转换为树即可。\n\n赫夫曼树(哈夫曼)及其应用赫夫曼树(哈夫曼)树又称为最优二叉树\n赫夫曼树的优化思想赫夫曼树的定义赫夫曼树编码\n树、森林复杂，转换为二叉树处理\n\n树转换为二叉树\n二叉树转换为树\n森林(森林-&gt;树)转换为二叉树\n二叉树转换为森林\n\n\n树与森林的遍历：先根、后根。前序，后序\n\n二叉树的应用，赫夫曼树(最优二叉树)\n引入：让单一线性的区分结构——&gt;通过权/频率——&gt;用二叉树来体现权的表示，从而实现路径长度上的优化。\n而这种路径的优化，在代码执行上缩短总的执行次数。而在存储空间上可以应用在设计长短不等的编码，在通过编码的层面上实现无损的数据压缩(赫夫曼编码)\n\n基本概念：路径长度、树的路径长度、带权路径长度\n二叉树转换为赫夫曼树(最优二叉树)\n赫夫曼编码(赫夫曼编码转换过程)\n材料：字符集，权\n画出最优二叉树\n左分支代表0，右分支代表1，并实现其前缀编码。\n\n\n\n\n\n","tags":["技术积累","数据结构"]},{"title":"数据结构 第四章 栈","url":"/2020/09/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E6%A0%88/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲\n栈的定义\n栈的抽线数据类型\n栈的顺序存储结构\n栈的链式存储结构\n小结\n栈的应用\n\n栈的定义栈的定义如下：\n\n栈(stack)如同弹夹一样，先进后出，后进先出(Last In First Out，LIFO)的特性。\n栈而且是限定仅在表尾(栈顶)进行插入和删除的线性表。\n\n相关术语如下：\n\n栈顶(top)：允许插入和删除的一端\n栈底(bottom)：相对于栈顶的另一端\n空栈：不含任何数据元素的栈\n进栈/压栈/入栈(push)：栈的元素插入操作\n出栈/弹栈(pop)：栈的元素删除操作\n\n\n进栈出栈变化形式\n栈的抽象数据类型ADT 栈(stack)Data    同线性表。元素具有相同的类型，相邻元素具有前驱和后继的关系。Operation    InitStack(*S)：初始化操作，建立一个空栈S    DestroyStack(*S)：若栈存在，则销毁它    ClearStack(*S)：将栈清空    StackEmpty(S)：若栈为空，返回true，否则返回false    GetTop(*S,e)：若栈存在且非空，用e返回S的栈顶元素    Push(*S,e)：若栈S存在，插入新元素e到栈S中，并成为栈顶元素    Pop(*S,*e)：删除栈S中的顶栈元素，并用e返回其值    StackLength(S)：返回栈S的元素个数endADT\n\n\n\n栈的顺序存储结构顺序栈的结构定义\n栈的顺序存储结构也称为 “顺序栈”\n通常用数组下标为0的一端作为栈底，因为变化最小\n定义一个top变量存储栈顶元素所在的位置，top &lt; StackSize，\n栈存在一个元素时(对应数组下标为0)，top = 0\n当top = -1 表示为空栈\n\n\n\n顺序栈的结构定义如下：\n#define MAXSIZE 50typedef int SElemType;struct&#123;    SElemType data[MAXSIZE];    int top;\t//记录栈顶下标&#125;SqStack;\n\n进栈&amp;出栈操作Push思路：\n\n若栈已满，退出\n修改栈顶top值，+1，并且作为下标存入数据e\n\n/* 插入元素e为新的栈顶元素 */Status Push(SqStack *S,SElemType e)&#123;\tif(S-&gt;top == MAXSIZE -1) /* 栈满 */        return ERROR;            \tS-&gt;top++;\t\t\t\t/* 栈顶指针增加一 */        S-&gt;data[S-&gt;top]=e;  /* 将新插入元素赋值给栈顶空间 */    \t//这两句可写成：S-&gt;data[++S-&gt;top] = *e;        return OK;&#125;\n\npop思路：\n\n若栈为空，则无元素出栈\n以当前top为数组下标取出值并赋值给e\ntop值自减1\n\nStatus Pop(SqStack *S,SElemType *e)&#123;     if(S-&gt;top==-1)        return ERROR;            *e=S-&gt;data[S-&gt;top];\t/* 将要删除的栈顶元素赋值给e */        S-&gt;top--;\t\t\t\t/* 栈顶指针减一 */    \t//这两句同样可写成：*e = S-&gt;data[S-&gt;top--];        return OK;&#125;\n\n两栈共享空间前言\n通常一个程序中要用到多个栈，为了不发生上溢错误，就必须给每个栈分配一个足够大的存储空间。但实际中，很难准确地估计，若每个栈都分配过大的存储空间，势必造成系统空间紧张；若让多个栈共用一个足够大的连续存储空间，则可利用栈的动态特性使他们的存储空间互补。(关键字：’’多个栈’’)\n事实上，使用这种数据结构，通常是两个栈的空间需求有相反关系，即一个栈增长时，另一个栈在缩短的情况。这样使用这种结构的意义更大。(如买卖股票，买入必定存在卖出等应用场景)\n\n设计方案\n前提是，两个栈的数据类型必须相同\n让其中一个栈的栈底为数组下标0（-1），另一个栈底为n-1（n） (n表示数组的长度)\n关键思路：两个栈是在数组的两端，向中间靠拢，\n\n两盏共享空间结构/*两盏共享空间结构*/typedef struct &#123;\tSElemType data[MAXSIZE];\tint top1;\t/*栈1 栈顶指针 */\tint top2;\t/*栈2 栈顶指针 */&#125;SqDoubleStack;\n\n栈内元素存储状态\n空栈：top1 = -1，top2 = MAXSIZE\n栈满：\n往右靠拢：top1 = n - 1，top2 = n -1\n往左靠拢：top2 = 0，top1 = 0\n向中间靠拢：top1+ 1= top2\n\n\n\n通常使用top1 + 1 = top2为栈满的判别条件。\n共享空间下的进栈&amp;出栈操作对于两栈共享空间的push与pop方法，除了顺序栈进出栈原有的两个参数外，还需要栈号参数stackNumber，用于判断操作的栈对象。\npush思路：\n\n判断栈的是否已经存满\n分别执行类同顺序栈的进栈代码(注意：处于尾部栈的下标操作是相反的)\n\n/* 插入元素e为新的栈顶元素 */Status Push(SqDoubleStack *S,SElemType e,int stackNumber)&#123;    if (S-&gt;top1+1==S-&gt;top2)\t/* 栈已满，不能再push新元素了 */        return ERROR;\t         if (stackNumber==1)\t\t\t/* 栈1有元素进栈 */        S-&gt;data[++S-&gt;top1]=e; /* 若是栈1则先top1+1后给数组元素赋值。 */    else if (stackNumber==2)\t/* 栈2有元素进栈 */        S-&gt;data[--S-&gt;top2]=e; /* 若是栈2则先top2-1后给数组元素赋值。 */    return OK;&#125;\n\npop思路：\n\n首先通过stackNumber分别分支处理\n判断被选中栈的是否为空\n别执行类同顺序栈的出栈代码\n\n/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */Status Pop(SqDoubleStack *S,SElemType *e,int stackNumber)&#123;     if (stackNumber==1) &#123;        if (S-&gt;top1==-1)             return ERROR; /* 说明栈1已经是空栈，溢出 */        *e=S-&gt;data[S-&gt;top1--]; /* 将栈1的栈顶元素出栈 */    &#125;else if (stackNumber==2)&#123;         if (S-&gt;top2==MAXSIZE)             return ERROR; /* 说明栈2已经是空栈，溢出 */        *e=S-&gt;data[S-&gt;top2++]; /* 将栈2的栈顶元素出栈 */     &#125;     return OK;&#125;\n\n时间复杂度分析可知顺序栈的push和pop操作时间复杂度均为O(1)\n栈的链式存储结构栈的链式存储结构，简称“链栈”\n\n链栈没有头结点，或者说是把头结点与栈顶指针融为一体\n对于链栈来说，基本不存在栈满的情况(除非内存耗尽/死机)\n栈顶指针(top) = NULL时，表示空栈\n\n栈的链式存储结构定义如下：\n\n//类似单链表的结构定义：LinkStackPtr(Ptr，Pointer Recod 表指针含义)typedef struct StackNode&#123;\tSElemType data;\tstruct StackNode *next;&#125;StackNode,*LinkStackPtr;//再创建一个top结点typedef struct LinkStack &#123;\tLinkStackPtr top;//每一个结点是否被定义为头结点\tint count;//链的长度&#125;LinkStack;\n\n链栈的进栈操作思路：\n\n链式结构一般不用考虑插入是否已满\n创建新结点\n通过“头插法”(让首结点成为新结点的next，然后新结点成为首结点)即新元素只与头结点(栈顶/top)交换\n修改count数值\n返回OK\n\n/* 插入元素e为新的栈顶元素 */Status Push(LinkStack *S,SElemType e)&#123;    LinkStackPtr s=(LinkStackPtr)malloc(sizeof(StackNode));     s-&gt;data=e;     s-&gt;next=S-&gt;top;\t/* 把当前的栈顶元素赋值给新结点的直接后继*/    S-&gt;top=s;         /* 将新的结点s赋值给栈顶指针，见图中② */    S-&gt;count++;    return OK;&#125;\n\n\n\n链栈的出栈操作思路：\n\n若栈为空，则无元素可出栈\n创建暂存结点变量\n改变top指向，释放暂存结点\n返回OK\n\n/* 若栈S为空栈，则返回TRUE，否则返回FALSE */Status StackEmpty(LinkStack S)&#123;     if (S.count==0)        return TRUE;     else        return FALSE;&#125;/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */Status Pop(LinkStack *S,SElemType *e)&#123;     LinkStackPtr p;    if(StackEmpty(*S))    \treturn ERROR;    \tLinkStackPtr p = S-&gt;top;\t//将栈顶结点赋值给p\t*e = p-&gt;data;\t//返回即将出栈元素值\tS-&gt;top = p-&gt;next;//修改top结点指向\tfree(p);\t//释放结点\tS-&gt;count--;\treturn OK;&#125;\n\n小结\n顺序栈和链栈的时间复杂度都是O(1)\n顺序栈在元素定位上相比链栈更节省内存开销，但需事先确定一个固定长度\n链栈则无长度限制\n\n\n\n因此，如果栈的使用过程中元素不可预料，有时很小，有时很大，那么最好使用栈链\n反之，如果它的变化在可控范围内，使用顺序栈会更好一些\n\n栈的应用前言栈的引入主要是将问题划分了不同的关注层次，使得思考范围进一步缩小，更加聚焦于我们解决问题的核心。从而简化了程序设计的问题，反之，使用传统“万金油”数组下标操作，则会使我们分散精力去处理一些琐碎的细节问题，反而掩盖了问题的本质。\n栈的应用——递归递归的概念递归函数：直接调用自己或通过一系列调用语句间接地调用自己的函数\n斐波那契数列的实现斐波那契数列(Fibonacci)：如 “1，1，2，3，5，8，13…” 这种前面相邻两项之和，构成了后一项的序列。\n常规迭代方法/*常规的迭代办法实现前40位Fibonacci数列 */void Fibonacci_Common() &#123;\tint f[40];\tf[0] = 0;\tf[1] = 1;\tprintf(&quot;%d \\n&quot;, f[0]);//输出首个Fibonacci数字\tprintf(&quot;%d \\n&quot;, f[1]);//输出第二个Fibonacci数字\tint i;\tfor (i = 2; i &lt; 40; i++) &#123;\t\tf[i] = f[i - 1] + f[i - 2];\t\tprintf(&quot;%d \\n&quot;, f[i]);\t&#125;&#125;\n\n递归方式实现\n从实际存在递归/重复规律的实际问题出发\n递归的核心在于：每一次的结果都是需要通过函数调用的方式回退到规律的起点\n通过函数return的自然机制递归出每一次的结果\n\n\n将实际问题的递归规律通过数学函数表示出来(完成递归函数的百分之80)\n将数学函数通过代码的形式表达出来\n\n\n通过递归的方式实现代码如下：\n/*斐波那契的递归函数*/int Fbi(int i) &#123;    if( i &lt; 2 )\t\treturn i == 0 ? 0 : 1;      return Fbi(i - 1) + Fbi(i - 2);  /* 这里Fbi就是函数自己，等于在调用自己 */&#125; int main()&#123;    int i;\tfor(i = 0;i &lt; 40;i++)  \t\tprintf(&quot;%d &quot;, Fbi(i));      return 0;&#125;\n\n递归和迭代的区别\n\n递归：递归使用选择结构\n优点：递归能使程序结构更清晰，更简洁、容易理解，减少读代码时间\n缺点：大量的递归调用回建立函数的副本，耗费大量的时间和内存\n\n\n迭代：迭代使用循环结构\n优点：迭代无需反复调用函数和占用额外内存\n缺点：代码复杂，程序结构不利于代码的阅读\n\n\n\n栈在递归里的应用递归函数的执行特点是：\n\n“先回退(前行)，后递归(退回)”即退回和前行两个阶段。而且这两个执行阶段互为逆序\n在递归(退回)的过程中，需要不断执行且恢复前行过程中存储起来的某些数据\n\n对于这种先不断前行执行，后又以其逆序的方式恢复这些数据的数据结构，符合栈这样的特点。因此底层的编译器常使用栈实现函数的递归操作。\n\n简单的说，就是在前行阶段，对于每一层递归，函数的局部变量、参数值以及返回地址都被压入栈中。在退回阶段，位于栈顶的局部变量、参数值和返回地址被弹出，用于返回调用层次中执行代码的其余部分，也就是恢复了调用的状态。\n当然，对于现在的高级语言，这样的递归问题是不需要用户来管理这个栈的，一切都由系统代劳了。\n\n栈的应用——四则运算表达式求值后缀表达式(逆波兰)法定义\n中缀表达式：形如 “ 9 + (3 - 1) X 3 + 10 ÷ 2 ” 标准的四则运算表达式，所有运算符号都在两数字中间。\n\n对于计算机来说，中缀表达式这种具有括号，乘除加减的复杂四则运算，计算机是不能马上识别出真确的运算顺序，而对于计算机如何实现数学表达式的求职。提出了一种新的表达法——后缀表达法。  \n\n\n后缀表达法(逆波兰)(Reverse Polish Notation，RPN)：是一种不需要括号,所有符号都是在要运算数字的后面出现。    \n如： “ 9 + (3 - 1) X 3 + 10 ÷ 2 ”的后缀表达式为， “ 9 3 1 - 3 *  + 10 2 / + ”\n\n\n栈的应用——中缀表达式转后缀表达式核心：栈是用来进出运算的符号\n\n数字直接输出\n入栈：\n未匹配的左括号，优先级高于栈顶符号\n低优先级出栈机制结束后再进栈\n\n\n出栈：\n右括号，出栈到与之匹配的左括号为止\n低优先级符号出栈直至有比原顶栈符号优先级更低的为止，最后再将其低优先级符号入栈\n中缀表达式处理完毕，则输出栈内剩下的所有符号\n\n\n注意：” ( ) “括号参与出入栈，但不表示在表达式中\n\n\n具体推导的图示过程，可查看本读物 p108~p110\n\n栈的应用——后缀表达式的计算核心：栈是用来进出运算的数字\n后缀表达式在计算机中的具体运算规则如下：\n\n从左到右遍历表达式的每个数字和符号\n遇到数字就进栈\n遇到符号就把处于栈顶的两个数字出栈，进行运算。把运算结构进栈\n直至处理完毕得到最终结果为止\n\n\n具体推导的图示过程，可查看本读物 p106~p108\n\n","tags":["技术积累","数据结构"]},{"title":"数据结构 第四章 队列","url":"/2020/09/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E9%98%9F%E5%88%97/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲\n队列的定义\n队列的抽线数据结构\n队列顺序存储结构及其不足\n循环队列的顺序存储结构\n小结\n队列的链式存储结构\n总结\n\n队列的定义队列(queue)：只允许在一端进行插入，另一端进行删除操作的线性表\n\n队列是一种先进先出(First In First Out，FIFO)的线性表。(符合生活中的习惯)\n允许插入的一端称为队尾，允许删除的一端称为队头\n\n队列的应用十分广泛：如键盘输入到屏幕显示、操作系统、客服系统等\n队列的抽象数据类型ADT 队列(Queue)Data    同线性表。元素具有相同的类型，相邻元素具有前驱和后继关系。Operation    InitQueue(*Q):    初始化操作，建立一个空队列Q。    DestroyQueue(*Q): 若队列Q存在，则销毁它。    ClearQueue(*Q):   将队列Q清空。    QueueEmpty(Q):    若队列Q为空，返回true，否则返回false。    GetHead(Q, *e):   若队列Q存在且非空，用e返回队列Q的队头元素。    EnQueue(*Q, e):   若队列Q存在，插入新元素e到队列Q中并成为队尾元素。    DeQueue(*Q, *e):  删除队列Q中队头元素，并用e返回其值。    QueueLength(Q):   返回队列Q的元素个数endADT\n\n队列顺序存储结构及其不足队列的顺序存储结构设计传统定义上的设计\n队列插入元素：只需在队尾追加一个元素即刻，时间复杂度为O(1)\n队列删除元素：把下标为0的队头元素删除后，其余所有元素均需向前移动,时间复杂度为O(n)\n\n现今队列顺序存储结构设计因队头固定为数组起始下标0，导致删除元素效率低，O(n)，且避免只有一个元素时，队头和队尾重合使处理变得麻烦\n\n引入两个指针，front指向队头元素，rear指向队尾元素的下一个位置，此时front = rear表示空队列\n队列删除元素时，直接改变队头front的指向从而实现删除元素时间复杂度提升至O(1)\n\n队列的顺序存储结构插入与删除元素过程如下：\n\n队列顺序存储结构的不足若在队列未满时曾经通过可移动头指针删除过元素，会导致当rear指针移至数组末端时(表示无法再插入元素时)，数组靠前部分还有空闲空间的“假溢出”现象。\n配合上述“普通队列插入图示”理解假溢出现象如下：\n\n解决方案：采用循环队列。\n循环队列的顺序存储结构循环队列的定义循环队列：把队列头尾相接的顺序存储结构(实际把rear指针变成可移动指针)，后面满了，就从头开始。\n循环队列特性小结：\n\nfront指向队头元素下标，rear指向队尾元素的下一个位置\nfront与rear指针均可独立循环移动\n\n结构定义如下:\n/* 循环队列的顺序存储结构 */typedef struct&#123;\tQElemType data[MAXSIZE];\tint front;    \t/* 头指针 */\tint rear;\t\t/* 尾指针，若队列不空，指向队列尾元素的下一个位置 */&#125;SqQueue;\n\n\n\n循环队列连续插入数据图示如下：\n\n\n注意：最终队列满时，rear == front，此时与一开始定义 rear == front  表示队列为空的定义重复了。\n解决方案1：设置一个标志变量flag，当front == rear，且flag=0时为队列空，当front == rear，且flag=1时为队列满。\n解决方案2：\n\n预留一个空闲空间表示队列满的状态，即队列满时，数组中还有一个空闲单元rear + 1 = front  \n此时队列可存储数据量为 “ MAXSIZE - 1 ”\n\n注意：循环队列的front和rear指针均可独立循环移动，因此导致存在两种队列满的状态，即rear &gt; front 与 rear &lt; front 的两种情况。如下图所示：\n\n\n显然 rear &gt; front 的情况是不能完全匹配 rear + 1 == front 这个队列满的判定条件\n\n因此通用的队列满判别条件为： (QueueSize 为队列最大尺寸)\n“ (rear + 1) % QueueSize == front  ”\n\n同理两种rear与front的大小关系决定了计算队列长度通用公式为：  \n“ (rear - front) + QueueSize % QueueSize ”\n\n\n循环队列的初始化InitQueue/* 初始化一个空队列Q */Status InitQueue(SqQueue *Q)&#123;\tQ-&gt;front=0;\tQ-&gt;rear=0;\treturn  OK;&#125;\n\n\n\n循环队列入队EnQueue//循环队列入队操作Status EnQueue(SqQueue *Q, QElemType e) &#123;\tif ((Q-&gt;rear + 1) % MAXSIZE == Q-&gt;front)//判断队列是否已满\t\treturn ERROR;    \tQ-&gt;data[Q-&gt;rear] = e; //队列，只能通过队尾入队，只操作rear\tQ-&gt;rear = (Q-&gt;rear+1) % MAXSIZE; //然rear指针符合循环队列特点，循环自增归零\treturn OK;&#125;\n\n\n\n循环队列出队DeQueue//循环队列出队操作Status DeQueue(SqQueue *Q, QElemType *e) &#123;\tif (Q-&gt;rear == Q-&gt;front)//判断队列是否为空，空则无法出队\t\treturn ERROR;\t*e = Q-&gt;data[Q-&gt;front];//队列，只能通过队头入队，只操作front\tQ-&gt;front = (Q-&gt;front + 1) % MAXSIZE;//让front指针符合循环队列特点，循环自增归零\treturn OK;&#125;\n\n要点\n无论入队还是出队操作，都有一句类似的代码Q-&gt;front = (Q-&gt;front + 1) % MAXSIZE，而这总写法是一种通用的循环自增归零写法。MAXSIZE控制自增的最大值，也是开始循环的值。\n(变量 + 1) % MAXSIZE; 图示如下：\n\n\n\n\n入队和出队的rear与front数值变化都是独立的循环自增，互不影响。**两者唯一有交集(关系)**部分已经解决(判读队列空与满的多种情况)\n\n小结队列的顺序存储结构：\n队列：\n\n只能通过队尾入队，入队只操作rear，只能通过队头入队，入队只操作front\n\nfront可移动化，提高删除效率\n\n\n\n循环队列：\n\nfront与rear分别独立循环移动，解决“假溢出”现象\n队列满条件：\n (rear + 1) % QueueSize == front \n注意：此时队列可存储数据量为 MAXSIZE - 1\n\n\n队列长度通用公式： (rear - front) + QueueSize % QueueSize \n循环自增归零写法：(变量 + 1) % MAXSIZE;\n\n\n\n队列的链式存储结构定义队列的链式存储结构，相当于只能尾进头出的单链表，简称链队列\n\n队头指针(front)指向头结点(不是头指针！)\n队尾指针(rear)指向尾指针\nfront和rear都指向头结点，则表示空队列\n\n\n\n结构定义//类似栈的链式存储结果设计//结点结构：QueuePtrtypedef struct QNode &#123;\tQElemType data;\tstruct Qnode *next;&#125;QNode,*QueuePtr;//链表结构：LinkQueue//LinkQueue相当于一个front与rear结点管理器，存储这两个变量的指向typedef struct &#123;\tQueuePtr front, rear;/*队头队尾指针*/&#125;LinkQueue;\n\nLinkQueue相当于一个front与rear结点管理器，存储这两个变量的指向，front与rear独立工作。在理解上的结构关系(不完全是实际结构)如下：\n\n队列初始化队列链式存储结构初始化关键在于：创建一个头结点，并且front 与 rear 都指向头结点(表示队列为空)，并且把头结点的指针域赋值为NULL\nInitQueue\n/*构建一个空列表Q*/Status InitQueue(LinkQueue *Q)&#123;   Q-&gt;front = Q-&gt;rear = (QueuePtr)malloc(sizeof(QNode));//创建一个头结点并同时指向fornt与rear   if (!Q-&gt;front)//申请失败则向系统报出异常\t\texit(1);       -&gt;front-&gt;next = NULL;//为头结点指针域赋值NULL   return OK;&#125;\n\n\n\n初始化到数据入队过程队列的链式存储结构初始化后(空队列)到数据插入的过程理解如下图所示：\n\n\nEnQueue思路：\n\n链式存储结构一般不会满\n创建新结点\n为新结点的数据域和指针域赋值(插入的总是队尾，所以指针域为NULL)\n把新结点(尾结点)s成为原队尾结点的后继结点\n修改链表结构LinkQueue的rear指向，返回OK即可\n\n//入队操作Status EnQueue(LinkQueue *Q, QElemType e) &#123;\tQueuePtr s = (QueuePtr)malloc(sizeof(QNode));\t//创建新结点\tif (!s)\t\t//假如内存申请失败\t\texit(1);\t//非正常退出\ts-&gt;data = e;\t//为新结点的数据域和指针域赋值\ts-&gt;next = NULL;\tQ-&gt;rear-&gt;next = s;\t//把新结点/尾结点s成为给原队尾结点的后继结点\tQ-&gt;rear = s;\t//修改链表结构LinkQueue的rear指向\treturn OK;&#125;\n\nexit() 函数：结束当前进程/当前程序/，在整个程序中，只要调用 exit ，就结束。\n\nexit(1)表示进程异常退出\nexit(0)表示进程正常退出\n\nDeQueue关键点：\n\nfront指针不是直接指向数据结点，而是指向头结点，所以待删除的结点应为Q-&gt;front-&gt;next\n删除思路与单链表的删除操作思路一致\n若出队的结点刚好是最后一个结点，需要重“置零”一下，否则s-&gt;next == NULL，而且rear会失去指向。\n\n非最后一个结点出队过程示意如下：\n\n最后一个结点出队过程示意如下：\n\n/* 若队列不空,删除Q的队头元素,用e返回其值,并返回OK,否则返回ERROR */Status DeQueue(LinkQueue *Q,QElemType *e)&#123;\tQueuePtr p;\tif(Q-&gt;front==Q-&gt;rear)\t\treturn ERROR;\tp=Q-&gt;front-&gt;next;\t\t/* 将欲删除的队头结点暂存给p*/\t*e=p-&gt;data;\t\t\t\t/* 将欲删除的队头结点的值赋值给e */\tQ-&gt;front-&gt;next=p-&gt;next;/* 将原队头结点的后继p-&gt;next赋值给头结点后继*/\tif(Q-&gt;rear==p)\t\t/* 若队头就是队尾，则删除后将rear指向头结点 */\t\tQ-&gt;rear=Q-&gt;front;\tfree(p);\treturn OK;&#125;\n\n总结\n从基本单次操作中，循环队列和链队列时间上都是常数时间O(1)\n若出队入队频繁，链队列会因每次申请和释放结点存在额外一些时间开销，与循环队列相比有细微差距\n在空间上，循环队列会因长度的固定限制，造成空间上的浪费。链队列则不存在\n\n总的来说：可确定长度优先选择循环队列，若无法预估则用链队列。\n","tags":["技术积累","数据结构"]},{"title":"算法积累","url":"/2020/10/22/%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF/","content":"顺序表排序递增减序\n冒泡排序\n选择法\n\n逆置\n头尾交换\n\n查找最值\n暂存变量挨个比较\n\n找子序列\nBF算法思维：第二章线性表P67-8\nKMP算法\n\n删除删除所有指定数值O(n)\n单数组就地过滤重塑：第二章线性表P66~P67(2,11)\n题目：\n/*伪代码：\t1.用k记录顺序表中不等于x的元素个数，即需要保存的元素个数，\t2.边扫描L边统计k，并将不等于x的元素放在L.data[k]中，最后修改L的长度。\t时间复杂度：O(n)，空间复杂度：O(1)函数说明：\t功能：删除顺序表所有指定的数值\tSeqList&lt;DataType&gt; *L : 顺序表指针变量\tint x : 删除数值*/template&lt;typename DataType&gt;void  deleteAll(SeqList&lt;DataType&gt; *L, int x) &#123;\tint i, k = 0; //k用于数组重组的下标变量(新下标)\tfor (i = 0; i &lt; L-&gt;length; i++) &#123;\t\tif (L-&gt;data[i] != x) &#123; //非条件值，非过滤参与重组\t\t\tL-&gt;data[k] = L-&gt;data[i];\t\t\tk++;\t\t&#125;\t&#125;\tL-&gt;length = k;//修改顺序表长度&#125;\n\n\n\n\n\n单链表排序//三个数num1，num2，num3，通过if-else结构从小到大排序，/*伪代码：\t1. 先比较两个数，如num1 &gt; num2\t2. 若num1 &gt; num2，则num3的位置只能在 小__num2__num1__大\t\t三个下划线之中。\t\t2.1 若num3比最大(num1)的还大，则在最右(最大)，若比最小的还小(num2)\t\t\t则在最左边(最小)，否则，else情况就在中间\t3. 若num2 &gt; num1，则num3的位置只能在 小__num1__num2__大，后同理上*/public class BranchTest&#123;\tpublic static void main(String[]args)&#123;\t\tint num1 = -193,num2 = -23,num3 = 221;\t\tif(num1 &gt; num2)&#123;\t\t\tif(num3 &gt; num1)&#123;\t\t\t\tSystem.out.println(num2 + &quot;, &quot; + num1 + &quot;, &quot; + num3);\t\t\t&#125;else if(num3 &lt; num2)&#123;\t\t\t\tSystem.out.println(num3 + &quot;, &quot; + num2 + &quot;, &quot; + num1);\t\t\t&#125;else&#123;\t\t\t\tSystem.out.println(num2 + &quot;, &quot; + num3 + &quot;, &quot; + num1);\t\t\t&#125;\t\t&#125;else&#123;\t\t\tif(num3 &gt; num2)&#123;\t\t\t\tSystem.out.println(num1 + &quot;, &quot; + num2 + &quot;, &quot; + num3);\t\t\t&#125;else if(num3 &lt; num1)&#123;\t\t\t\tSystem.out.println(num3 + &quot;, &quot; + num1 + &quot;, &quot; + num2);\t\t\t&#125;else&#123;\t\t\t\tSystem.out.println(num1 + &quot;, &quot; + num3 + &quot;, &quot; + num2);\t\t\t&#125;\t\t\t\t&#125;\t\t\t\t\t&#125;&#125;\n\n\n\n\n\n\n\n逆置O(n)\n头插法：\n凡会在操作过程是失去(链接/追踪)，可以用变量追随暂存\n/*伪代码：\t1. 设定两个工作指针(用于遍历指针、用于记录遍历指针下一个指针的指针)\t2. 通过遍历指针遍历每一个指针，将遍历到指针通过头插法的形式重新生成链表实现逆序\t3. 在 2. 操作执行头插法之前需要先记录以下即将取出用于插入结点的下一个结点，否则会失去连接\t时间复杂度：O(n)，空间复杂度：O(1);函数说明\tLinkList&lt;DataType&gt; *L : 单链表指针*/template&lt;typename DataType&gt;void reverseLinkList(LinkList&lt;DataType&gt; *L) &#123;\t\tNode&lt;DataType&gt; *p, *q;\tp = q = L-&gt;first-&gt;next;\tL-&gt;first-&gt;next = nullptr;\t\t\twhile (p!= nullptr) &#123;\t\tq = p;\t\tp = p-&gt;next;\t\tq-&gt;next = L-&gt;first-&gt;next;\t\tL-&gt;first-&gt;next = q;\t\t\t&#125;&#125;\n\n\n\n\n\n递增减输出并释放\n重复使用“暂存变量挨个比较”\n\n查找删除循环链表排序查找对称性判断\n头尾同步相近判断，各自到达头节点结束\n/* 伪代码：\t1. 创建两个工作指针，head指向第一个结点，rear指向尾部结点\t2. 头尾向中间靠拢判断是否相等\t3. 两个指针都移置头结点表示允许结束(兼容奇偶数量对称判断)\t函数说明：\tCDulLinkList&lt;DataType&gt; *L : 循环双链表指针*/template&lt;typename DataType&gt;bool isSymmetric(CDulLinkList&lt;DataType&gt; *L) &#123;\tDulNode&lt;DataType&gt; *head, *rear;\thead = L-&gt;first-&gt;next;\trear = L-&gt;first-&gt;prior;\twhile (head != L-&gt;first &amp;&amp; rear != L-&gt;first) &#123;\t\tif (head-&gt;data != rear-&gt;data)\t\t\treturn false;\t\thead = head-&gt;next;\t\trear = rear-&gt;prior;\t&#125;\treturn true;&#125;\n\n\n\n\n\n删除","tags":["技术积累","算法","数据结构"]},{"title":"考试网油猴代码","url":"/2021/03/27/%E8%80%83%E8%AF%95%E7%BD%91%E6%B2%B9%E7%8C%B4%E4%BB%A3%E7%A0%81/","content":"// ==UserScript==// @name            考试资料网跳转显示答案// @namespace       https://github.com/cuifeiran/ppkao/// @version         0.1.7// @description     对单个题目进行跳转，使得跳转后的页面显示题目的答案。期间可能需要验证,遇到问题可以在GitHub issue我～// @author          Dave// @match           *://www.ppkao.com/tiku/shiti/*// @match           *://www.ppkao.com/kaoti/*// @include         *://www.ppkao.com/tiku/shiti/*// @include         *://www.ppkao.com/shiti/*// @include         *://www.ppkao.com/kaoti/*// @include         *://www.ppkao.com/daan/*//@contributionURL// @grant           none// ==/UserScript==(function() &#123;    &#x27;use strict&#x27;;    //清除限制题目访问数量的cookie    var Days = 30;    var exp = new Date();    exp.setTime(exp.getTime() + Days*24*60*60*1000);    document.cookie=&quot;PPKAO=PPKAOSTID=&amp;PPKAOCEID=&amp;PPKAOSJID=&amp;UserName=&amp;EDays=; domain=ppkao.com;expires=&quot;+exp.toGMTString()+&quot;;path=/&quot;;    //获取当前页面URL    var iSite = window.location.href;    var reg = /[1-9][0-9]*/g;    var numList = iSite.match(reg);    var isKaoti =new RegExp(&quot;kaoti&quot;).test(iSite);    var isTiku =new RegExp(&quot;tiku&quot;).test(iSite);    var isShiti =new RegExp(&quot;shiti&quot;).test(iSite);    var isDaan =new RegExp(&quot;daan&quot;).test(iSite);    var sUrl=&quot;&quot;;    if (isKaoti===true)&#123;sUrl=&#x27;https://api.ppkao.com/mnkc/kaoti/?id=&#x27;+ numList;window.location.href =sUrl;&#125;    else&#123;        if(isTiku===true)&#123;sUrl=&#x27;https://api.ppkao.com/mnkc/tiku/?id=&#x27;+ numList;window.location.href =sUrl;&#125;        else&#123;            if(isShiti===true)&#123;sUrl=&#x27;https://newapi.ppkao.com/mnkc/shiti/?id=&#x27;+ numList;window.location.href =sUrl;&#125;            else&#123;                if(isDaan===true)&#123;                    var html = &#x27;&lt;div id=&quot;showQRcode&quot; style=&quot;position: fixed;right:30px;bottom: 0px;&quot;&gt;&lt;a style=&quot;font-size:14px;color:red;background-color: white;display:block;&quot; href=&quot;https://raw.githubusercontent.com/cuifeiran/ppkao/master/donations&quot;&gt;[捐助名单]我在考研二战,愁于房租,致谢捐助者！&lt;/a&gt;&lt;a style=&quot;font-size: 14px;display:block;color:black;background-color: white;&quot; onclick=&quot;$(this).parent().remove();&quot; hidden=&quot;javascripe:void(0)&quot; &gt;[不想捐助点击这里]&lt;/a&gt;&lt;img width=&quot;420&quot; height=&quot;210&quot; src=&quot;https://s1.ax1x.com/2018/12/11/FJ47an.jpg&quot;&gt;&lt;/img&gt;&lt;/div&gt;&#x27;                    var div = document.createElement(&#x27;div&#x27;);                    div.setAttribute(&#x27;id&#x27;, &#x27;showQRcode&#x27;);                    div.innerHTML = html;                    document.body.appendChild(div);                &#125;            &#125;        &#125;    &#125;&#125;)();\n\n\n\n","tags":["娱乐"]},{"title":"视频解析接口","url":"/2020/12/12/%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E6%8E%A5%E5%8F%A3/","content":"亲测系列https://cdn.yangju.vip/k/?url=源：https://www.cnblogs.com/apolloren/p/11247487.html最稳定万能vip视频解析接口 支持HTTPShttps://cdn.yangju.vip/k/?url=https://cdn.yangju.vip/k/?url=https://jx.lache.me/cc/?url=https://api.653520.top/vip/?url=https://jx.ab33.top/vip/?url=https://vip.mpos.ren/v/?url=https://jx.000180.top/jx/?url=https://jx.km58.top/jx/?url=源：https://www.zye.cc/toosl/15775.html无广告通用：https://vip.52jiexi.top/?url=  腾讯直解无广告解析：https://jx.lfeifei.cn/?url= 无广告解析：https://api.steak517.top/?url= 秒播无广告解析：http://api.steak517.top/?url=无广告通用HTTP接口：http://api.yueliangjx.com/?url=无广告通用HTTPS接口：https://api.yueliangjx.com/?url=无广告解析：https://jx.elwtc.com/vip/?url=无广告解析：https://api.78sy.cn/?url= 秒播无广告通用HTTP接口：http://www.2ajx.com/vip.php?url=无广告通用HTTPS接口：https://www.2ajx.com/vip.php?url=通用HTTP接口：http://api.steak517.top/?url=通用HTTPS接口：https://api.steak517.top/?url=https://vip.ikjiexi.top/api/?url=   无广告，速度也还行https://www.kpezp.cn/jlexi.php?url=  速度挺快的*还带记忆播放https://api.8bjx.cn/?url=   秒播吧 记忆https://jx.f41.cc/?url= 速度还可以http://v.nmbaojie.com/mingri/mingri.php?url=速度还行https://www.ckmov.vip/api.php?url= 挺快的http://jx.ejiafarm.com/dy.php?url= 挺快的https://jx.youyitv.com/?url=http://jiexi.xueshi.prohttps://z1.m1907.cn/?jx=  小卡https://jx.618g.com/?url=  速度一般https://www.1717yun.com/jx/ty.php?url= 速度还可以https://cdn.yangju.vip/k/?url=   一般https://vip.jaoyun.com/index.php?url= 还可以https://jx.618g.com/?url=   还可以https://www.myxin.top/jx/api/?url=  腾讯直解 缓存挺快的https://jiexi.071811.cc/jx.php?url=  挺快的https://jx.wslmf.com/?url=   还行就是  不带缓存要拉快进的注意了https://jx.dy-jx.com/?url= 打不开https://vip.mpos.ren/v/?url=黑屏https://jqaaa.com/jx.php?url= 速度挺快的https://jx.598110.com/index.php?url= 速度还可以https://jx.bwcxy.com/?v=  速度还可以https://jx.rdhk.net/?v=    速度一般https://jx.fo97.cn/?url= 好像不能用https://jx.ivito.cn/?url= 一般https://api.927jx.com/vip/?url=一般般https://api.tv920.com/vip/?url=很一般https://api.lhh.la/vip/?url=https://api.sumingys.com/index.php?url=  很一般https://cn.bjbanshan.cn/jx.php?url=挺快的https://jx.mw0.cc/?url=挺快的https://www.33tn.cn/?url= 挺快的http://jx.1ff1.cn/?url=  还行https://jx.000180.top/jx/?url=  一般https://py.ha12.xyz/sos/index.php?url=https://jiexi.380k.com/?url= 挺快的https://jx.wslmf.com/?url=   挺快的https://okjx.cc/?url=http://www.662820.com/xnflv/index.php?url=http://api.lldyy.net/svip/?url=http://www.82190555.com/index/qqvod.php?url=http://jiexi.92fz.cn/player/vip.php?url=http://jiexi.071811.cc/jx2.php?url=http://api.wlzhan.com/sudu/?url=http://beaacc.com/api.php?url=http://qxkkk.bid/jx/jx.php?url=http://www.27v9.cn/index.php?url=http://www.ckplayer.tv/kuku/?url=http://o8ve.cn/1/?url=http://api.xyingyu.com/?url=https://jx.kt111.top/jx/mf/?url=https://api.pangujiexi.com/player.php?url=http://api.lvcha2017.cn/?url=http://kkk.2016ve.cn/kkjx/index.php?url=http://mlxztz.com/vip/?url=http://www.aktv.men/?url=http://jy777.cn/XSD/XSD/?url=http://api.visaok.net/?url=http://api.xyingyu.com/?url=http://api.greatchina56.com/?url=http://jx.618g.com/?url=http://api.baiyug.vip/index.php?url=http://jx.jfysz.cn/jx.php/?url=http://jx.ektao.cn/jx.php/?url=http://jx.reclose.cn/jx.php/?url=http://jx.eayn.org.cn/jx.php/?url=http://api.xyingyu.com/?url=http://jx.iaeec.cn/jx.php/?url=http://jx.83y4n7a.cn/jx.php/?url=http://jx.cmbzzs.cn/jx.php/?url=http://api.greatchina56.com/?url=http://jx.as19811.cn/jx.php/?url=http://jx.sdjnd09.cn/jx.php/?url=http://api.baiyug.vip/index.php?url=http://jx.09876as.cn/jx.php/?url=http://jx.17ktv.com.cn/jx.php/?url=http://jx.ab78a.cn/jx.php/?url=http://jx.09877as.cn/jx.php/?url=http://jx.yipolo111.cn/jx.php/?url=http://jx.908astbb.cn/jx.php/?url=http://jx.dlzyrk001.cn/jx.php/?url=http://jx.dccmy.org.cn/jx.php/?url=http://jx.boctx.cn/jx.php/?url=http://jx.hxbte.cn/jx.php/?url=http://api.visaok.net/?url=http://jx.618g.com/?url=http://yun.baiyug.cn/vip/?url=http://api.baiyug.cn/vip/?url=https://api.flvsp.com/?url=http://api.xfsub.com/index.php?url=http://api.xfsub.com/index.php?url=http://jiexi.071811.cc/jx2.php?url=http://player.jidiaose.com/supapi/iframe.php?v=http://www.82190555.com/index/qqvod.php?url=http://api.pucms.com/?url=http://api.baiyug.cn/vip/index.php?url=https://api.flvsp.com/?url=http://www.82190555.com/index/qqvod.php?url=http://2gty.com/apiurl/yun.php?url=http://v.2gty.com/apiurl/yun.php?url=直接观看：http://tv.inkb.ink/index.html扫码：http://www.guandianzhiku.com/v/s/?url=扫码：https://v.7cyd.com/vip/?url=腾讯视频 慢扫码：http://zxjx.00vb.com/zdhx/index.php?url=扫码：https://www.jqaaa.com/jx.php?url=无广告超清解析：http://jx.awx88.cn/jiexi/?url=弹幕解析：http://gongxiangtv.cn/?url=VIP视频解析北极XS视频解析：http://beijixs.cn/ 视频高清VIP视频解析116kan智能解析：https://vip.116kan.com/ 高清视频365t在線免費解析觀看系統：http://vip.365tol.top/BL智能解析：https://vip.bljiex.com/kingtail智能解析：https://jx.kingtail.xyz/?url=https://jsap.attakids.com/?url=https://api.lnwu.net/?url=91视频解析：https://www.91jxs.com/jiexi/?url=https://api.jhys.top/?url=思古视频服务：https://api.sigujx.com/?url=小野马解析：https://www.xymav.com/?url=诺讯智能解析：https://www.nxflv.com/?url=热搜视频：https://v.resoumen.com/全民解析：http://qmaile.com/ 解析聚合，多线路解析聚神铺vip解析：http://www.jspoo.com/vip.html 解析聚合，多线路选择Yun Parse视频云解析：http://120.27.155.106/ 填视频ID而不是视频网页地址，另支持解析QQ相册等地址爱看解析：http://tv.vipsli.com/TVB云播全网VIP视频解析：http://vip.hktvyb.com/ 聚合解析，多线路Playm3u8解析：https://www.playm3u8.cn/jiexi.php?url= 除了常见VIP视频地址外，还支持解析QQ相册等地址千亿解析：https://www.qianyicp.com/jiexi/index.php?url= 蓝光超清解析接口OK解析：http://www.okjx.cc/ceshi/ 测试后不太清晰618G免费解析：https://jx.618g.com/ 测试后不是很清晰http://avip.fun/tv?utm_source= 测试后直接不清晰\n\n\n\n","tags":["娱乐"]},{"title":"个人电子文档","url":"/2021/03/14/%E4%B8%AA%E4%BA%BA%E7%94%B5%E5%AD%90%E6%96%87%E6%A1%A3/","content":"tips：不可在线浏览，需复制链接下载回本地，修改后缀后访问pdf文件\n\nC语言：复制链接\n\n计算机网络：复制链接\n\n数据库原理：复制链接\n\n\n","tags":["技术积累","个人文档"]},{"title":"Maven","url":"/2021/03/20/Maven/","content":"导言：生产环境下开发不再是一个项目一个工程，而是每一个模块创建一个工程，而多个模块整合在一起就需要 使用到像 Maven 这样的构建工具。\n[TOC]\n现今项目开发问题\nproject - package 结构的不足\n若一个项目就是一个工程，当项目非常庞大时，不适合用这种二级机构管理。如一个项目多个功能模块，一个功能模块就一个MVC\n\n推祟三层结构：engineering - project - package 则能更好的适应大工程的分工开发(如IDEA)\n工程拆分后又如何进行互相调用和访问呢？这就需要用到 Maven 的依赖管理机制\n\n\n项目中jar包的问题\n\njar包必须手动“复制”、“粘贴”到WEB-INF/lib目录下\n\n\n同样的jar包文件重复出现在不同的项目工程中\n\njar包来源不明确，不规范\njar 包之间的依赖关系繁多，且难以得知\n\n\n\nMaven是什么Maven基本概念​    Maven [ˈmeɪvn] 是一款服务于java平台的自动化构建工具。\n\njava平台自动化构建工具发展历史：Make—&gt;Ant—&gt;Maven(使用面广)—&gt;Gradle\n\n何为项目构建基本概念：以java源文件,框架配置文件,JSP,HTML,图片等资源为原材料,去生产一个可以运行的项目的过程\n\n清理：将以前编译得到的旧的class字节码文件删除，为下一次编译做准备\n编译：将Java源程序编程编译成class字节码文件\n测试：自动测试，自动调用junit程序\n报告：输出测试程序执行的结果\n打包：动态Web工程打war包，Java工程打jar包\n安装：Maven特定的概念——将打包得到的文件复制到“仓库”中的指定位置\n部署：将动态Web工程生成的war包复制到Servlet容器的指定目录下，使其可以运行\n\n安装Maven核心程序下载maven核心程序\n官网\n\n检查JAVA_HOME环境变量maven也是java编写的程序,所以运行是也需要java的虚拟机\n\n\n解压Maven核心程序建议解压到一个非中文没有空格的目录下\n配置Maven环境变量\n新增MAVEN_HOME或者是M2_HOME\n\n\n 以前Maven的版本配置的变量为M2_HOME,为了向下兼容低版本,所以可以配置为M2_HOME,而且配置M2_HOME可以防止一些奇怪的错误)\n\n\n\n\n添加PATH的环境变量\n\n\n\n检查配置结果mvn -v\n\n约定目录结构约定目录结构的意义\nmaven要负责我们这个项目的自动化构建，以编译为例,maven要想进行自动编译，至少需要知道java源文件保存在哪里。可采取两种方式\n\n以配置文件的方式明确\n遵守框架内部已存在的约定**.\n\n\n在开发中本着能用约定解决的问题就不用配置解决，能用配置解决的就不去编写代码。 约定&gt;配置&gt;编码 \n\n凡是符合maven约定目录结构的项目都可称为Maven工程\n\n\n目录结构关键：工程名—&gt;src，pom.xml，target\n​            src—&gt;main，test\n​            main/test —&gt; java、resources\n\nMaven常用命令常用命令\n注意：执行与构建过程相关的Maven命令，必须进入pom.xml 所在的目录。\n\n如当使用CMD命令时候必须进入到能看到pom.xml目录路径才能执行构建相关的mvn 命令\n\n\n常用命令\n\nmvn clean : 清理\nmvn compile : 编译主程序\nmvn test-compile : 编译测试程序\nmvn test : 执行测测试\nmvn package : 打包\nmvn install ： 安装\nmvn site ：生成站点\n\n\n\n上述大部分命令第一次运行后都会产生一个target文件夹，之后所有构建相关产生的文件都在此目录下\nmvn compile：编译后会产生一个classes文件夹，包含主程序编译的结果\nmvn test-compile : 编译会产生一个test-classes文件夹，包含测试程序的编译结果\nmvn package : 产生、maven-archiver、surefire-reports、XXXX.jar \nmaven-archiver文件夹：maven一个辅助性文件\nsurefire-reports：内含一个.txt测试报告\nXXXX.jar：打包后的jar包\n\n\n\n\n\n关于联网问题\nMaven 的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成。而插件本身不包含在Maven核心程序中。\n当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。\n本地仓库的默认位置：[系统登陆用户的家目录] \\ .m2\\repository\nMaven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。如果此时无法连接外网，则构建失败。\n修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好(插件与jar包全有)的目录下查找插件\n\n修改本地仓库位置\n打开本地仓库位置的配置信息文件：apache-maven-3.2.2\\conf\\settings.xml\n\n找到&lt;localRepository&gt;标签，若在注释内，请去除注释使其生效。路径设置必须设置到能看到如下图示文件内容为止\n\n例如：应将路径配置成：&lt;localRepository&gt;D:/ManageTools/maven/repository&lt;/localRepository&gt;\n\n\n\n\n\n对jar 包进行引用操作的先例\n项目目录结构与编译后的目录结构对比\n实际动态WEB项目运行是以编译后的目录结构\n因此在开发过程中，所有的路径或配置文件中配置的类路径等都是以编译结果的目录结构为标准\nMaven核心概念 Maven 是如何实现自动化构建的 \n\nPOM \n约定的目录结构 \n坐标 \n依赖管理 \n仓库管理\n生命周期 \n插件和目标 \n继承\n聚合\n\nPOM基本含义\n含义：Project Object Model 项目对象模型类似：DOM ：Document Object Model 文档对象模型\n\npom.xml：Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。\n\n\nPOM文件简述\n注意：每一个java项目(Maven项目)本身也是一个jar包的存在(打包或安装(Maven概念))\n一定程度上：Java/Maven工程 == jar包\n\n&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 从Maven2开始固定内容 --&gt;\t&lt;!-- 坐标：唯一标识当前项目/Jar --&gt;\t&lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;\t&lt;artifactId&gt;Hello&lt;/artifactId&gt;\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\t&lt;name&gt;Hello&lt;/name&gt;\t  &lt;/project&gt;\n\n\n\n\n\n坐标(GAV)\n使用下面三个向量在仓库中唯一定位一个Maven工程：groupid、artifactid、version\n\ngroupid：公司或组织域名倒序 + 项目名\n&lt;groupid&gt;com.atguigu.maven&lt;/groupid&gt;\n\nartifactid：模块名\n&lt;artifactid&gt;Hello&lt;/artifactid&gt;\n\nversion：版本\n&lt;version&gt;1.0.0&lt;/version&gt;\ntips：关键字，SNAPSHOT快照版、RELEASE，分离版(较成熟版本)\n\n\n\nMaven工程的坐标信息与执行mvn install命令后生成文件在仓库中路径的对应关系，以spring为例\n&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;&lt;version&gt;4.0.0.RELEASE&lt;&#x2F;version&gt;org&#x2F;springframework&#x2F;spring-core&#x2F;4.0.0.RELEASE&#x2F;spring-core-4.0.0.RELEASE.jar\n\n\n\n\n\n\n\n仓库仓库的分类\n本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务\n\n远程仓库 \n\n私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务\n以Nexus这个Maven仓库管理器来表示私服的工工作流程\n\n\n\n\n\n\n中央仓库：假设在Internet上，为全世界所有Maven工程服务 \n\n中央仓库镜像：为了分担中央仓库流量，提升用户访问速度\n\n\n仓库中保存的内容\nMaven自身所需要的插件 \n第三方框架或工具的jar包 \n自己开发的Maven工程\n\n\n不管是什么样的 jar 包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。\n\n依赖基本概念​    当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖。Maven解析依赖信息时会到仓库中查找被依赖的jar包。 \n依赖的使用\n标签的使用：&lt;dependency&gt; 坐标 + &lt;scope&gt;范围&lt;/scope&gt; &lt;/dependency&gt;\n&lt;dependencies&gt;内存放多个&lt;dependency&gt;标签\n&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.0&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;\n\n&lt;scope&gt;范围，常用取值有：compile、test、provided\ntips：若不添加&lt;scope&gt;标签默认是compile\n\n\n\n范围效果\\类型\ncompile\ntest\nprovided\n\n\n\n对主程序是否有效\n有效\n无效\n有效\n\n\n对测试程序是否有效\n有效\n有效\n有效\n\n\n是否参与打包\n参与\n不参与\n不参与\n\n\n是否参与部署\n参与\n不参与\n不参与\n\n\n示例\n自定义类/jar包\njunit\nservlet-api.jar\n\n\n\n从开发和运行这两个阶段理解compile 和 provided 的区别 \n\n\n\n\n\n\n对于自己开发的Maven工程，要使用mvn install命令安装后就可以进入仓库。执行后产生如下文件\n\n\n依赖的传递性tips：依赖的深入特性，首次学习建议先浏览 Eclipse中使用Maven\n注意：这里描述的是工程三层结构，即一个应用工程，包含多个功能模块，每个功能模块都是一个eclipse project\n基本概念eclipse项目中存在：A项目模块 —依赖—&gt; B项目模块 —依赖—&gt; C项目模块\n\nA与B，B与C关系为直接依赖，可点击pom.xml文件底部切换为Dependency窗口查看\nA与C的关系为间接依赖，可点击pom.xml文件底部切换为Dependency Hierarchy窗口查看直接与间接依赖\n\n依赖的传递效果\n传递的条件：只有compile范围的依赖才能传递\n\n当存在：A项目模块 —依赖—&gt; B项目模块 —依赖—&gt; C项目模块\n若C项目再添加某一种依赖D后，A、B模块会自动添加依赖D\n\n传递依赖的好处：可以传递的依赖不必在每个模块工程中都重复声明，在“最下面”的工程中依赖一次即可。\n\n\n依赖的排除依赖的排除相当于依赖传递的反操作\n\n依赖排除使用场景：\n\n\n添加依赖排除标签：假定当前项目的依赖是由上层的直接依赖HelloFriend项目传递过来的，则排除指定依赖操作如下\n&lt;dependency&gt;    &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;    &lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;type&gt;jar&lt;/type&gt;    &lt;scope&gt;compile&lt;/scope&gt;\t&lt;!-- 依赖排除标签 --&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;commons-logging&lt;/groupId&gt;            &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;        &lt;/exclusion&gt;     &lt;/exclusions&gt;&lt;/dependency&gt;\n\n\n\n\n\n依赖的原则路径最短者优先原则\n情景：若某个项目模块受到来自两个项目模块的同jar包不同版本依赖。因为某些特殊的原因，HelloFriend使用了非Hello传递下来的jar包版本，而使用了其他的一个版本。此时MakeFreidens则会同时接收啊斗HelloFriend与Hello传递下来的不同的两个版本\n\n\n就近原则：maven对这种原则默认使用就近原则，因此MakeFriends最终受到传递的是 1.2.14版本\n\n\n\n路径相同时先声明者优先\n情景：路径相同时，如下\n\n\n先声明者优先：先声明指的是dependency标签的声明顺序。即MakerFriends依赖HelloFriende与OurFriends的一个相对声明顺序\n\n\n统一管理依赖版本\n场景：这里对Spring各个jar包的依赖版本都是4.0.0如果需要统一升级为4.1.1，怎么办？手动逐一修改不可靠。\n\n\n使用properties标签：\n\n使用properties标签内使用自定义标签统一声明版本号\n&lt;properties&gt;    &lt;!-- 通过自定义标签统一声明版本号 --&gt;    &lt;test.spring.version&gt;4.1.1.RELEASE&lt;/test.spring.version&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&lt;/properties&gt;&lt;dependencies&gt;    ...&lt;/dependencies&gt;\n\n在需要统一版本的位置，使用$&#123;自定义标签名&#125;引用声明的版本号\n&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;    &lt;!-- 统一引用 --&gt;    &lt;version&gt;$&#123;test.spring.version&#125;&lt;/version&gt;    &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;    &lt;version&gt;$&#123;test.spring.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;    &lt;version&gt;$&#123;test.spring.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;    &lt;version&gt;$&#123;test.spring.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;    &lt;version&gt;$&#123;test.spring.version&#125;&lt;/version&gt;&lt;/dependency&gt;\n\n\n这种自定义标签和标签内容引用的方式，并不只适用于此场景，这是xml的特性，任何地方都可以通过\n&lt;自定义标签&gt;&lt;/自定义标签&gt; 、 ${自定义标签} 这种方式进行声明和引用\n\n\n\n\n\n生命周期tips：了解即可\n基本概念\n生命周期：各个构建环节执行的顺序，必须按照既定的正确顺序来执行。\n\nMaven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。\n\n为更好的实现自动化构建，不论现在要执行生命周期中的哪一阶段，都是从某一个生命周期最初的位置开始执行\n\n即不用担心打包之前要编译，要测试，直接执行打包命令，会重头完成这些必备功能\n\n\nMaven有三套相互独立的生命周期，分别是：\n\nClean Lifecycle：在进行真正的构建之前进行一些清理工作。\nDefault Lifecycle：构建的核心部分，编译、测试、打包、安装、部署等等。\nSite Lifecycle：生成项目报告，站点，发布站点。\n\n\n他们相互独立。也可以直接运行mvn clean install site 运行所有这三套生命周期。\n\n每套生命周期都由一组阶段(Phase)组成，平时在命令行输入的命令总会对应于一个特定的阶段。\n比如，运行 mvn clean，这个clean是 Clean 生命周期的一个阶段\n\n\nClean声明周期\npre-clean 执行一些需要在clean之前完成的工作\nclean 移除所有上一次构建生成的文件\npost-clean 执行一些需要在clean 之后立刻完成的工作\n\nDefault声明周期Default 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：\n\nvalidate\ngenerate-sources\nprocess-sources\ngenerate-resources\nprocess-resources 复制并处理资源文件，至目标目录，准备打包。\ncompile 编译项目的源代码。\nprocess-classes\ngenerate-test-sources\nprocess-test-sources\ngenerate-test-resources\nprocess-test-resources 复制并处理资源文件，至目标测试目录。\ntest-compile 编译测试源代码。\nprocess-test-classes\ntest 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。\nprepare-package\npackage 接受编译好的代码，打包成可发布的格式，如 JAR。\npre-integration-test\nintegration-test\npost-integration-test\nverify\ninstall 将包安装至本地仓库，以让其它项目依赖。\ndeploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。\n…\n\nSite生命周期\npre-site 执行一些需要在生成站点文档之前完成的工作\nsite 生成项目的站点文档\npost-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备\nsite-deploy 将生成的站点文档部署到特定的服务器上\n\n这里经常用到的是 site 阶段和 site-deploy 阶段，用以生成和发布 Maven 站点，这可是 Maven 相当强大的功能，Manager 比较喜欢，文档及统计数据自动生成，很好看。命令mvn site\nEclipse中使用Maven基本设置\n当今版本eclipse一般已内置Maven插件\n\nMaven插件的设置： Window-&gt;Preferences-&gt;Maven\n\ninstallations : 指定Maven核心程序的位置。默认是插件自带的Maven程序，一般改为我们自己解压的那个。\n\n\nuser settings : 指定Maven核心程序中 conf/settings.xml 文件的位置，进而获取本地仓库的位\n\n\n\n\n\n创建Maven版java工程\n创建Maven版的Java工程 \n\n创建时勾选上 Create a simple project(skip archetype selection) ，然后点击 next\n\n\n输入前三行基本信息后，点击finish 即可创建\n\n\n创建的Maven工程格式如下，\n\n\n编写的java源程序放在，名为src/main/java的目录下，即上图的第二行\n\n创建的Maven工程默认使用的是JDK1.5，改变方法有两种\n\neclipse设置中修改\n(推荐)打开Maven核心程序 settings.xml 文件，找到profiles标签，在该标签内加入如下配置，即可更改\n注意，若想更高版本的JDK，除了修改如下配置文件版本号外，还需注意目前maven版本是否支持\n\n&lt;profile&gt;    &lt;id&gt;jdk-1.7&lt;/id&gt;    &lt;activation&gt;        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;        &lt;jdk&gt;1.7&lt;/jdk&gt;    &lt;/activation&gt;    &lt;properties&gt;        &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;        &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;        &lt;maven.compiler.compilerVersion&gt;1.7&lt;/maven.compiler.compilerVersion&gt;    &lt;/properties&gt;&lt;/profile&gt;\n\n\n\n\n\n执行Maven命令\n选中Maven工程中的pom.xml文件，右键Run As，则有一系列命令列出，点击即可执行某种命令\n\n\n若在Run As 中没有找到想要执行的命令如上图中没有编译命令，则点击 Run As 列表中含三个点的命令Maven build...直接在Goals：中输入命令执行即可\n\n\n\n\n创建Maven版Web工程\nNew Maven project时，Packaging 选择 war \n\n调整web目录结构，在项目上点右键 -&gt; properties-&gt;Project Facets -&gt; 把Dynamic Web Module 勾选去掉，并Apply -&gt; 将Dynamic Web Module 重新勾选 -&gt; 点击Further configuration available -&gt; 修改 Content directory为src/main/webapp -&gt; Apply 即在Maven工程上生成动态Web目录结构 \n\n新建jsp文件发现报错：The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path“。因为缺少Tomcat 运行时环境，解决方法有两种\n\n经典的通过eclipse设置加入ServletAPI依赖依赖\n\n以Maven方式添加：在pom.xml文件中添加 \n&lt;dependency&gt;    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;    &lt;version&gt;2.5&lt;/version&gt;    &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;\n\n\n\njsp写入EL表达式时发现报错：”javax.servlet.jsp cannot be resolved to a type”，将JSPAPI导入。在pom.xml文件中添加 \n&lt;dependency&gt;    &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;    &lt;version&gt;2.1.3-b06&lt;/version&gt;    &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;\n\n注意：像这种在部署的时候运行时环境会提供的jar包，开发阶段使用scope一定要设置成provided，不然待部署时，maven会将设置为compile的jar包一同部署到容器中，则会发生冲突，运行时会报空指针异常。\n\n\n导入Maven工程\n方式1：传统的项目导入方式，前提是必须是在eclipse中创建的项目(普通项目或maven项目)，即必须包含eclipse认可为java项目的.settings、.classpath、.project等文件\n方式2：通用的maven项目导入，只要maven项目含pom.xml文件即可\n\n\n继承应用场景​    解决无法进行依赖传递的jar包版本统一问题。例如score为test的junit。由于test范围的依赖不能传递，所以必然会分散在各个模块工程中，很容易造成版本不一致。 \n\n如下情况\nHello依赖的Junit：4.0HelloFriend依赖的Junit：4.0MakeFriends依赖的Junit：4.9\n\n\n\n\n\n解决方案：​    将Junit依赖统一提取到“父”工程中，在子工程中声明Junit依赖是不指定版本，以父工程中统一设定的为准。同时也便于修改。 \n\n创建一个新的Maven工程作为父工程。注意：打包的方式pom\n\n对应自动生成配置文件信息如下所示\n&lt;groupId&gt;com.test.maven&lt;/groupId&gt;&lt;artifactId&gt;Parent&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;pom&lt;/packaging&gt;\n\n所有子工程中声明对父工程的引用：适用&lt;parent&gt;&lt;/parent&gt;标签\n&lt;!-- 子工程中声明父工程 --&gt;&lt;!-- 1. 使用parent标签进行对父工程的引用 --&gt;&lt;parent&gt;    &lt;!-- 2. 将父工程中的坐标信息复制过来 --&gt;    &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;    &lt;artifactId&gt;Parent&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;!-- 3. 设置以当前文件为基准的父工程pom.xml文件的相对路径 --&gt;    &lt;relativePath&gt;../Parent/pom.xml&lt;/relativePath&gt;&lt;/parent&gt;&lt;!-- 同级--&gt;&lt;dependencies&gt;&lt;/dependencies&gt;\n\n将子工程的坐标中与父工程坐标中重复的内容删除，报出以下错误信息的内容均删除即可\n\n\n在父工程中添加统一的junit的依赖\n\n在子工程中删除junit依赖的版本标签version\n\n\ntips：配置集成后，执行安装命令时要先安装父工程\n聚合\n功能：对一个工程中的多个功能项目进行一键安装\n\n配置方式：在一个”总的聚合工程”中配置各个参与聚合的模块 \n&lt;!-- 在作为总的聚合工程中配置聚合(不一定是父工程) --&gt;&lt;modules&gt;    &lt;!-- 指定各个子工程的相对路径 --&gt;    &lt;module&gt;../HelloFriend&lt;/module&gt;    &lt;module&gt;../MakeFriends&lt;/module&gt;    &lt;module&gt;../Hello&lt;/module&gt;&lt;/modules&gt;\n\n使用方式：在聚合工程的pom.xml 上点右键 -&gt; run as -&gt; maven install \n\n\nWeb工程的自动化部署\n在pom.xml 中添加如下配置：\n\n&lt;!--配置当前工程构建过程中的特殊设置   --&gt;&lt;build&gt;    &lt;finalName&gt;AtguiguWeb&lt;/finalName&gt;    &lt;!-- 配置构建过程中需要使用的插件 --&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;!-- cargo是一家专门从事启动Servlet容器的组织 --&gt;            &lt;groupId&gt;org.codehaus.cargo&lt;/groupId&gt;            &lt;artifactId&gt;cargo-maven2-plugin&lt;/artifactId&gt;            &lt;version&gt;1.2.3&lt;/version&gt;            &lt;!-- 针对插件进行的配置 --&gt;            &lt;configuration&gt;                &lt;!-- 配置当前系统中容器的位置 --&gt;                &lt;container&gt;                    &lt;containerId&gt;tomcat6x&lt;/containerId&gt;                    &lt;home&gt;D:\\DevInstall\\apache-tomcat-6.0.39&lt;/home&gt;                &lt;/container&gt;                &lt;configuration&gt;                    &lt;type&gt;existing&lt;/type&gt;                    &lt;home&gt;D:\\DevInstall\\apache-tomcat-6.0.39&lt;/home&gt;                    &lt;!-- 如果Tomcat端口为默认值8080则不必设置该属性 --&gt;                    &lt;properties&gt;                        &lt;cargo.servlet.port&gt;8989&lt;/cargo.servlet.port&gt;                    &lt;/properties&gt;                &lt;/configuration&gt;            &lt;/configuration&gt;            &lt;!-- 配置插件在什么情况下执行 --&gt;            &lt;executions&gt;                  &lt;execution&gt;                      &lt;id&gt;cargo-run&lt;/id&gt;                    &lt;!-- 以下总的意思是，当执行install声明周期时，执行插件run目标 --&gt;                    &lt;!-- 生命周期的阶段 --&gt;                      &lt;phase&gt;install&lt;/phase&gt;                      &lt;goals&gt;                        &lt;!-- 插件的目标 --&gt;                          &lt;goal&gt;run&lt;/goal&gt;                      &lt;/goals&gt;                  &lt;/execution&gt;              &lt;/executions&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;\n\n\n执行mvn deploy 命令\n\ntips：一般这个命令不在eclipse中使用，因为eclipse中启动后无法停止(无法输入 ctrl + c取消)，一般在命令行中使用\n查找依赖信息网站搜索需要的 jar 包的基本依赖信息：http://mvnrepository.com/\n","tags":["技术积累","项目构建"]},{"title":"html&css&js&jq&xml入门","url":"/2021/03/23/html&css&js&jq&xml%E5%85%A5%E9%97%A8/","content":"[TOC]\nHTML基本规范&lt;!DOCTYPE html&gt;&lt;!-- 约束,声明 --&gt;&lt;!-- html标签表示html的开始   lang=&quot;zh_CN&quot;表示中文--&gt;&lt;!-- html标签中一般分为两部分,分别是:head和body   --&gt;&lt;!-- 表示头部信息,一般包含三部分内容,title标签,css样式,js代码 --&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;!-- 表示当前页面使用UTF-8字符集 --&gt;    &lt;title&gt;某东&lt;/title&gt;&lt;!--表示标题--&gt;&lt;/head&gt;&lt;!--body标签是整个html页面显示的主体内容--&gt;&lt;body &gt; Hello world!&lt;/body&gt;&lt;/html&gt;\n\nHTML标签介绍\n标签的格式： &lt;标签名&gt;封装的数据&lt;/标签名&gt; &lt;html&gt;Hello&lt;/html&gt;\n标签名大小写不敏感\n标签拥有自己的属性：基本属性、事件属性\n基本属性：bgcolor=&quot;red&quot; 可以修改简单的样式效果\n事件属性：onclick=&quot;alert(&#39;你好！&#39;);&quot; 可以直接设置事件响应后的代码\n\n\n.标签又分为，单标签和双标签。 \n单标签格式： &lt;标签名 /&gt; ，如&lt;br/&gt; 换行 ，&lt;hr/&gt; 水平线  \n双标签格式: &lt;标签名&gt; …封装的数据…&lt;/标签名&gt; \n\n\n\n常用标签介绍w3c手册https://www.w3school.com.cn/\n&lt;!DOCTYPE html&gt;&lt;!-- 约束,声明 --&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;某东&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 1、标题 --&gt;&lt;h1 align=&quot;left&quot;&gt;标题 1左对齐&lt;/h1&gt;&lt;h2 align=&quot;center&quot;&gt;标题 2居中&lt;/h2&gt;&lt;h3 align=&quot;right&quot;&gt;标题 3右对齐&lt;/h3&gt;&lt;!-- 2、a标签是 超链接target属性：属性设置哪个目标进行跳转\t_self 表示当前页面(默认值)\t_blank 表示打开新页面来进行跳转--&gt;&lt;a href=&quot;http://baidu.com&quot;&gt;百度&lt;/a&gt;&lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;    &lt;!--div、span、p标签\tdiv 标签 默认独占一行\tspan 标签 它的长度是封装数据的长度\tp 段落标签 默认会在段落的上方或下方各空出一行来（如果已有就不再空）--&gt;&lt;div&gt;div 标签 1&lt;/div&gt;&lt;div&gt;div 标签 2&lt;/div&gt;&lt;span&gt;span 标签 1&lt;/span&gt;&lt;span&gt;span 标签 2&lt;/span&gt;&lt;p&gt;p 段落标签 1&lt;/p&gt;&lt;p&gt;p 段落标签 2&lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;\n\n\n\n表单&lt;!-- 7、表单 --&gt;&lt;!-- action提交服务器地址、method提交方式 --&gt;&lt;!--一、单提交的时候，数据没有发送给服务器的三种情况：\t1、表单项没有 name 属性值\t2、单选、复选（下拉列表中的 option 标签）都需要添加 value 属性，以便发送给服务器\t3、表单项不在提交的 form 标签中二、GET 请求的特点是：\t1、浏览器地址栏中的地址是：action 属性[+?+请求参数]\t请求参数的格式是：name=value&amp;name=value\t2、不安全\t3、它有数据长度的限制三、POST 请求的特点是：\t1、浏览器地址栏中只有 action 属性值\t2、相对于 GET 请求要安全\t3、理论上没有数据长度的限制 --&gt;&lt;form action=&quot;loginServlet/login&quot; method=&quot;post&quot;&gt;\t用户名称：&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;默认值&quot;/&gt;&lt;br/&gt;\t用户密码：&lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;123&quot;/&gt;&lt;br/&gt;\t&lt;!-- 提交按钮 --&gt;\t&lt;input type=&quot;submit&quot; name=&quot;login&quot; value=&quot;登录&quot;/&gt;\t&lt;!-- 单选：name属性分组成为单选, checked=&quot;checked&quot; 默认单选--&gt;\t&lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot;/&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex&quot;/&gt;女&lt;br/&gt;\t&lt;!-- 复选 --&gt;\t&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;Java&lt;input type=&quot;checkbox&quot;/&gt;C&lt;input type=&quot;checkbox&quot;/&gt;C++\t&lt;!-- 下拉列表 selected=&quot;selected&quot; 表默认选中--&gt;\t&lt;select&gt;\t\t&lt;option&gt;--请选择国籍--&lt;/option&gt;&lt;!-- 选项 --&gt;\t\t&lt;option selected=&quot;selected&quot; value=&quot;China&quot;&gt;--中国--&lt;/option&gt;\t\t&lt;option&gt;--美国--&lt;/option&gt;\t&lt;/select&gt;&lt;br/&gt;\t&lt;!-- 多行文本输入框 \t\trows 属性设置可以显示几行的高度\t\tcols 属性设置每行可以显示几个字符宽度\t--&gt;\t&lt;textarea&gt;\t\t默认值\t&lt;/textarea&gt;&lt;br/&gt;\t&lt;!-- 重置 --&gt;\t&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;\t&lt;!-- 文件上传域 --&gt;\t&lt;input type=&quot;file&quot; name=&quot;fileUpload&quot; value=&quot;上传&quot;&gt;\t&lt;!-- 隐藏域，这些信息不显示，但提交表单时会提交到后台服务器 --&gt;\t&lt;input type=&quot;hidden&quot; name=&quot;id&quot;&gt;&lt;/form&gt;\n\n\n\n\n\n常用特殊字符\n诸如’’&lt;’’ 与’’&gt;’’符号在HTML中拥有特殊含义，若显示这些特殊含义的字符则需使用特殊字符书写\nHTML会默认裁掉连续的空白字符(空格,TAB…)\n\n\n\n\n特殊字符\n实体字符\n意义\n\n\n\n&lt;\n&amp;lt\nless than\n\n\n&gt;\n&amp;gt\ngreat than\n\n\n空格\n&amp;nbsp\n牛逼space\n\n\n&lt;!-- 把&lt;br&gt;换行标签变成文本输出 --&gt;&amp;lt br &amp;gt\n\n\n\nCSS语法规则三元组：选择器、属性、值\n\n\nCSS和HTML的结合\nhtml中直接使用style属性设置\nstyle 标签专门用来定义 css 样式代码\n把 css 样式写成一个单独的css 文件，再通过 link 标签引入即可复用\n\nstyle属性在标签的 style 属性上设置”key:value value;”修饰\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--需求 1：分别定义两个 div、span 标签，分别修改每个 div 标签的样式为：边框 1 个像素，实线，红色。--&gt;&lt;div style=&quot;border: 1px solid red;&quot;&gt;div 标签 1&lt;/div&gt;&lt;div style=&quot;border: 1px solid red;&quot;&gt;div 标签 2&lt;/div&gt;&lt;span style=&quot;border: 1px solid red;&quot;&gt;span 标签 1&lt;/span&gt;&lt;span style=&quot;border: 1px solid red;&quot;&gt;span 标签 2&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;\n\nstyle标签&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Title&lt;/title&gt;    &lt;!--style 标签专门用来定义 css 样式代码--&gt;&lt;style type=&quot;text/css&quot;&gt;/* 需求 1：分别定义两个 div、span 标签，分别修改每个 div 标签的样式为：边框 1 个像素，实线，红色。*/    div&#123;    border: 1px solid red;    &#125;    span&#123;    border: 1px solid red;    &#125;&lt;/style&gt;    &lt;/head&gt;&lt;body&gt;&lt;div&gt;div 标签 1&lt;/div&gt;&lt;div&gt;div 标签 2&lt;/div&gt;&lt;span&gt;span 标签 1&lt;/span&gt;&lt;span&gt;span 标签 2&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;\n\ncss文件&amp;ink标签\ntest.css文件如下\ndiv&#123;\tborder: 1px solid yellow;&#125;span&#123;\tborder: 1px solid red;&#125;\n\ntest.html文件如下\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Title&lt;/title&gt;&lt;!--link 标签专门用来引入 css 样式代码--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;test.css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;div 标签 1&lt;/div&gt;&lt;div&gt;div 标签 2&lt;/div&gt;&lt;span&gt;span 标签 1&lt;/span&gt;&lt;span&gt;span 标签 2&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n\nCSS选择器\n标签名选择器\nid选择器\nclass选择器\n组合选择器\n\n&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;CSS选择器&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;    /*标签选择器*/    body&#123;        font-size: 30px;        border: 1px yellow solid;    &#125;    /*id 选择器*/    #test1&#123;        color: blue;    &#125;    /*class 选择器*/    .test2&#123;        color: red;    &#125;    /*组合选择器*/    #test1,.test2&#123;       background: green;       &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;test1&quot;&gt;id 001&lt;/div&gt;    &lt;div class=&quot;test2&quot;&gt;class 002&lt;/div&gt;    &lt;div class=&quot;test2&quot;&gt;class 002&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n\n常用样式\n字体颜色 color : red;\n颜色可以写颜色名如：black, blue, red, green 等 颜色也可以写 rgb 值和十六进制表示值：如 rgb(255,0,0)，#00F6DE，如果写十六进制值必须加#\n\n宽度 width:19px;宽度可以写像素值：19px； 也可以写百分比值：20%\n\n高度 height:20px; 高度可以写像素值：19px； 也可以写百分比值：20%\n\n背景颜色 background-color:#0F2D4C;\n\n字体样式： color：#FF0000;字体颜色红色 font-size：20px; 字体大小 \n\n红色 1 像素实线边框 border：1px solid red; \n\nDIV 居中: margin-left: auto; margin-right: auto;\n\n文本居中： text-align: center;\n\n超连接去下划线: text-decoration: none; \n\n表格细线\ntable &#123;    border: 1px solid black; /*设置边框*/    border-collapse: collapse; /*将边框合并*/&#125;td,th &#123;\tborder: 1px solid black; /*设置边框*/&#125;\n\n列表去除修饰，兼容IE\nul &#123;\tlist-style: none;&#125;\n\n\n\n\n\nJavaScript基础介绍Javascript 语言诞生主要是完成页面的数据验证。因此它运行在客户端，需要运行浏览器来解析执行 JavaScript 代码。 JS 是 Netscape 网景公司的产品，最早取名为 LiveScript;为了吸引更多 java 程序员。更名为 JavaScript。\n\nJS 是弱类型(类型可变)，Java 是强类型(定义变量已确定且不可变)。 \n特点：\n交互性（它可以做的就是信息的动态交互）\n安全性（不允许直接访问本地硬盘）\n跨平台性（只要是可以解释 JS 的浏览器都可以执行，和平台无关）\n\n\n\njs和html结合方式\n直接在html的head或 body 标签中， 使用 script 标签来书写JavaScript\n通过script标签外部引入单独的 JavaScript 代码文件\n\nscript标签中书写&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Title&lt;/title&gt;&lt;script type=&quot;text/javascript&quot;&gt;    // alert 是 JavaScript 语言提供的一个警告框函数。    // 它可以接收任意类型的参数，这个参数就是警告框的提示信息    alert(&quot;hello javaScript!&quot;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\n\n通过script标签引入js文件&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Title&lt;/title&gt;&lt;!--现在需要使用 script 引入外部的 js 文件来执行    src 属性专门用来引入 js 文件路径（可以是相对路径，也可以是绝对路径）    script 标签可以用来定义 js 代码，也可以用来引入 js 文件    但是，一个script标签只能做一件事，作为引入则不能在里面书写JavaScript代码--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;1.js&quot;&gt;该领域书写js代码无效&lt;/script&gt;&lt;!-- 若想在当前情况下还在htmlzh写js，必须再创建一个script标签作为js代码书写 --&gt;&lt;script type=&quot;text/javascript&quot;&gt;    alert(&quot;国哥现在可以帅了&quot;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\n\n变量变量类型\n数值类型： number     (对应java：byte int short long float double等)\n字符串类型： string \n对象类型： object \n布尔类型： boolean \n函数类型： function\n\nJavaScript中特殊的值：\nundefined：未定义，所有 js 变量未赋于初始值的时候，默认值都是 undefined. \n\nnull：空值 \n\nNaN：全称是：Not a Number。”非数字,非数值”。 \nvar a = 12;var b = &quot;abc&quot;;alert(a * b);//输出NaN\n\n\n\n\n\n定义变量格式\n声明：var 变量名; \n声明+初始化：var 变量名 = 值;\n\n关系(比较)运算符特殊讲解\n\n== ：等于，是简单的做字面值的比较\n===：全等于，除了做字面值的比较之外，还会比较两个变量的数据类型\n\nvar a = 12;var b = &quot;12&quot;;alert(a == b);//truealert(a === b);//false\n\n\n\n逻辑运算\n在 JavaScript 语言中，所有的变量，都可以做为一个 boolean 类型的变量去使用\n\n\n 0 、null、 undefined、””(空串) 都认为是 false\n\n\n逻辑运算后返回值\n\n&amp;&amp; 与运算：有两种情况\n情况1：当表达式全为真的时候。返回最后一个表达式的值\n情况2：当表达式中，有一个为假的时候。返回第一个为假的表达式的值\n\n\n|| 或运算：\n情况1：当表达式全为假时，返回最后一个表达式的值\n情况2：只要有一个表达式为真。就会把第一个为真的表达式的值 \n\n\n&amp;&amp; 和 ||运算有短路。\n\nvar a = &quot;abc&quot;;var b = true;var d = false;var c = null;// &amp;&amp; 与运算alert( a &amp;&amp; b );//truealert( b &amp;&amp; a );//abcalert( a &amp;&amp; d ); // falsealert( a &amp;&amp; c ); // null// || 或运算alert( d || c ); // nullalert( c || d ); //falsealert( a || c ); //abcalert( b || c ); //true\n\n\n\n数组数组的定义var 数组名 = []; // 空数组var 数组名 = [1 , ’abc’ , true]; // 定义数组同时赋值元素\n\n\n数组定义时可不指定长度、且可变长度\n只要我们通过数组下标赋值(不赋值则不会扩容)，那么最大的下标值，就会自动的给数组做扩容操作\n\nvar arr = [true,1]; // 定义一个空数组// alert( arr.length ); // 0arr[0] = 12;alert( arr[0] );//12alert( arr.length ); // 0arr[2] = &quot;abc&quot;;alert(arr.length); //3alert(arr[1]);// undefined// 数组的遍历for (var i = 0; i &lt; arr.length; i++)&#123;\talert(arr[i]);&#125;\n\n\n\n函数格式1//1. 无参无返回值函数function fun()&#123;\talert(&quot;无参无返回值函数&quot;);&#125;fun();//函数调用//2.带形参函数function fun1(a ,b) &#123;\talert(&quot;有参函数 fun2()被调用了 a=&gt;&quot; + a + &quot;,b=&gt;&quot;+b);&#125;fun1();//函数调用//3. 在 JavaScript 语言中，如何定义带有返回值的函数？//只需要在函数体内直接使用 return 语句返回值即可！function sum(num1,num2) &#123;\tvar result = num1 + num2;\treturn result;&#125;alert(sum(100,50) );\n\n格式2//可以把函数名忽略作为var变量的引用var fun = function () &#123;\talert(&quot;无参函数&quot;);&#125;fun();//调用\n\n\n\n常用函数\n\n\n函数\n意义\n\n\n\ntypeof()\n传入变量，返回数据类型\n\n\n\n\n\n\n\n\n\n\njQuery应用实例&lt;script type=&quot;text/javascript&quot;&gt;    //Jq、页面加载完成后执行    $(function()&#123;    //给注册按钮绑定单击事件    $(&quot;#sub_btn&quot;).click(function () &#123;        // 验证用户名：必须由字母，数字下划线组成，并且长度为 5 到 12 位        // 验证密码：必须由字母，数字下划线组成，并且长度为 5 到 12 位        // 验证确认密码：和密码相同        // 邮箱验证：xxxxx@xxx.com        // 验证码：现在只需要验证用户已输入。因为还没讲到服务器。验证码生成        // 1、验证用户名：必须由字母，数字下划线组成，并且长度为 5 到12位        //获取用户名内容        var username = $(&quot;#username&quot;).val();        //创建正则表达式对象        var usernamePatt = /^\\w&#123;5,12&#125;$/;        //调用test方法进行测试        //给非法输入进行提示        var $errorMsg = $(&quot;.errorMsg&quot;);        if(!usernamePatt.test(username))&#123;            $errorMsg.text(&quot;用户名非法输入&quot;);            return false;//终止提交        &#125;        //2、验证密码：必须由字母，数字下划线组成，并且长度为 5 到 12 位        //同理如上        var password = $(&quot;#password&quot;).val();        //创建正则表达式对象        var passwordPatt = /^\\w&#123;5,12&#125;$/;        //调用test方法进行测试        //给非法输入进行提示        if(!passwordPatt.test(password))&#123;            $errorMsg.text(&quot;密码非法输入&quot;);            return false;        &#125;        //3、验证确认密码：和密码相同        // 获取确认密码        var repwd = $(&quot;#repwd&quot;).val();        if(password != repwd)&#123;            $errorMsg.text(&quot;两次密码输入不一致&quot;);            return false;        &#125;        //4、邮箱验证：xxxxx@xxx.com        var emalil = $(&quot;#email&quot;).val();        var emailPatt = /^[a-z\\d]+(\\.[a-z\\d]+)*@([\\da-z](-[\\da-z])?)+(\\.&#123;1,2&#125;[a-z]+)+$/;        if(!emailPatt.test(emalil))&#123;            $errorMsg.text(&quot;邮箱格式非法&quot;);            return false;        &#125;        //5、获取验证码信息，只要输入不为空(去除空格后)即可        // 验证码：现在只需要验证用户已输入。因为还没讲到服务器。验证码生成        var code = $(&quot;#code&quot;).val();        code = $.trim(code);        if(code == null || code == &quot;&quot;)&#123;            $errorMsg.text(&quot;验证码输入为空&quot;);            return false;        &#125;        //错误信息清除        $errorMsg.text(&quot;&quot;);        return true;    &#125;)&#125;)&lt;/script&gt;\n\n\n\nXMLxml是可扩展的标记性语言\nXML作用\n用来保存数据，而且这些数据具有自我描述性\n它还可以做为项目或者模块的配置文件\n还可以做为网络传输数据的格式（现在 JSON 为主）\n\nxml 语法\n文档声明\n元素（标签） \nxml 属性\nxml 注释\n文本区域（CDATA 区）\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;!-- xml声明 version是版本的意思(自从除了第一版每更新过)   encoding是编码  --&gt;&lt;books&gt; &lt;!-- 这是xml注释,books标识多本图书 --&gt;    &lt;book id=&quot;SN123123413241&quot;&gt; &lt;!-- book标签描述一本图书   id属性描述 的是图书 的编号  --&gt;        &lt;name&gt;java编程思想&lt;/name&gt; &lt;!-- name标签描述 的是图书 的信息 --&gt;        &lt;author&gt;华仔&lt;/author&gt;\t\t&lt;!-- author单词是作者的意思 ，描述图书作者 --&gt;        &lt;price&gt;9.9&lt;/price&gt;\t\t&lt;!-- price单词是价格，描述的是图书 的价格 --&gt;    &lt;/book&gt;    &lt;book id=&quot;SN12341235123&quot;&gt;\t&lt;!-- book标签描述一本图书   id属性描述 的是图书 的编号  --&gt;        &lt;name&gt;葵花宝典&lt;/name&gt;\t&lt;!-- name标签描述 的是图书 的信息 --&gt;        &lt;author&gt;班长&lt;/author&gt;\t&lt;!-- author单词是作者的意思 ，描述图书作者 --&gt;     \t&lt;price&gt;5.5&lt;/price&gt;\t&lt;!-- price单词是价格，描述的是图书 的价格 --&gt;    &lt;/book&gt;&lt;/books&gt;\n\n\nXML标签对大小写敏感\n\n每个属性的值必须使用引号引起来\n\nXML某一种标签只能有一个顶级元素(没有父标签的元素)\n&lt;books&gt;&lt;!-- 没有父标签，为顶级元素 --&gt;\t&lt;book&gt;ABC&lt;/book&gt;    &lt;book&gt;ABC&lt;/book&gt;&lt;/books&gt;&lt;books&gt;出错&lt;/books&gt; &lt;!-- 与顶级元素books重复，错误 --&gt;\n\nXML中的特殊字符\n&lt;books&gt;\t&lt;book&gt;&amp;lt;C语言&amp;gt;&lt;/book&gt; &lt;!--显示 &lt; C语言 &gt; --&gt;&lt;/books&gt;\n\n\n\n文本区域若XML中有大量需要转义的字符，如想显示&lt;&lt;&lt;&lt; A &gt;&gt;&gt;&gt;则可使用CDATA语法。CDATA 语法可以告诉 xml 解析器，CDATA 里的文本内容，只是纯文本，不需要 xml 语法解析 \n\nCDATA 格式：&lt;![CDATA[]]&gt;在最里面的[]内输入指定不解析文本内容\n&lt;book&gt;&lt;!-- 正常显示&lt;&lt;&lt;&lt; A &gt;&gt;&gt;&gt; --&gt;\t&lt;![CDATA[\t\t&lt;&lt;&lt;&lt; A &gt;&gt;&gt;&gt;    ]]&gt;&lt;/book&gt;\n\n\n\nXML的解析技术\n不管是 html 文件还是 xml 文件它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来解析。\n\n\n早期 JDK 为我们提供了两种 xml 解析技术DOM 和 Sax 简介（已经过时，但我们需要知道这两种技术） \n\nDom ：解析技术是 W3C 组织制定的，而所有的编程语言都对这个解析技术使用了自己语言的特点进行实现。 Java 对 dom 技术解析标记也做了实现。\n\nSAX：Sun 公司在 JDK5 版本对 dom 解析技术进行升级：SAX（ Simple API for XML ） \nSAX 解析，它跟 W3C 制定的解析不太一样。它是以类似事件机制通过回调告诉用户当前正在解析的内容。 它是一行一行的读取 xml 文件进行解析的。不会创建大量的 dom 对象。 所以它在解析 xml 的时候，在内存的使用上。和性能上。都优于 Dom 解析。\n\n第三方的解析： \n\njdom 在 dom 基础上进行了封装 \ndom4j 又对 jdom 进行了封装。\npull 主要用在 Android 手机开发，是在跟 sax 非常类似都是事件机制解析 xml 文件。 \n\n\n\n","tags":["xml","html","css","JavaScript","jQuery","前端"]},{"title":"mysql基础总结","url":"/2020/09/17/mysql%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/","content":"本单元目标一、为什么要学习数据库二、数据库的相关概念          DBMS、DB、SQL三、数据库存储数据的特点四、初始MySQL    MySQL产品的介绍            MySQL产品的安装          ★            MySQL服务的启动和停止     ★    MySQL服务的登录和退出     ★          MySQL的常见命令和语法规范      五、DQL语言的学习   ★                  基础查询        ★                 条件查询       ★                排序查询       ★                    常见函数        ★                   分组函数        ★                  分组查询           ★                连接查询        ★               子查询       √                      分页查询       ★                  union联合查询   √           六、DML语言的学习    ★                 插入语句                            修改语句                            删除语句                        七、DDL语言的学习      库和表的管理   √                  常见数据类型介绍  √              常见约束      √         八、TCL语言的学习    事务和事务处理                 九、视图的讲解           √十、变量                      十一、存储过程和函数   十二、流程控制结构       \n\n数据库的好处1.持久化数据到本地2.可以实现结构化查询，方便管理\n\n数据库相关概念1、DB：数据库，保存一组有组织的数据的容器2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据3、SQL:结构化查询语言，用于和DBMS通信的语言\n\n数据库存储数据的特点1、将数据放到表中，表再放到库中2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”5、表中的数据是按行存储的，每一行类似于java中的“对象”。\n\nMySQL产品的介绍和安装MySQL服务的启动和停止方式一：计算机——右击管理——服务方式二：通过管理员身份运行net start 服务名（启动服务）net stop 服务名（停止服务）\n\nMySQL服务的登录和退出方式一：通过mysql自带的客户端只限于root用户方式二：通过windows自带的客户端登录：mysql 【-h主机名 -P端口号 】-u用户名 -p密码退出：exit或ctrl+C\n\nMySQL的常见命令1.查看当前所有的数据库show databases;2.打开指定的库use 库名3.查看当前库的所有表show tables;4.查看其它库的所有表show tables from 库名;5.创建表create table 表名(    列名 列类型,    列名 列类型，    。。。);6.查看表结构desc 表名;7.查看服务器的版本方式一：登录到mysql服务端select version();方式二：没有登录到mysql服务端mysql --version或mysql --V\n\nMySQL的语法规范1.不区分大小写,但建议关键字大写，表名、列名小写2.每条命令最好用分号结尾3.每条命令根据需要，可以进行缩进 或换行4.注释    单行注释：#注释文字    单行注释：-- 注释文字    多行注释：&#x2F;* 注释文字  *&#x2F;\n\nSQL的语言分类DQL（Data Query Language）：数据查询语言    select DML(Data Manipulate Language):数据操作语言    insert 、update、deleteDDL（Data Define Languge）：数据定义语言    create、drop、alterTCL（Transaction Control Language）：事务控制语言    commit、rollback\n\nSQL的常见命令show databases； 查看所有的数据库use 库名； 打开指定 的库show tables ; 显示库中的所有表show tables from 库名;显示指定库中的所有表create table 表名(    字段名 字段类型,       字段名 字段类型); 创建表desc 表名; 查看指定表的结构select * from 表名;显示表中的所有数据\n\nDQL语言的学习进阶1：基础查询语法：SELECT 要查询的东西【FROM 表名】;类似于Java中 :System.out.println(要打印的东西);特点：①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数\n\n进阶2：条件查询条件查询：根据条件过滤原始表的数据，查询到想要的数据语法：select     要查询的字段|表达式|常量值|函数from     表where     条件 ;分类：一、条件表达式    示例：salary&gt;10000    条件运算符：    &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D; !&#x3D; &lt;&gt;二、逻辑表达式示例：salary&gt;10000 &amp;&amp; salary&lt;20000逻辑运算符：    and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false    or(||)：两个条件只要有一个成立，结果为true，否则为false    not(!)：如果条件成立，则not后为false，否则为true三、模糊查询示例：last_name like &#39;a%&#39;\n\n进阶3：排序查询语法：select    要查询的东西from    表where     条件order by 排序的字段|表达式|函数|别名 【asc|desc】\n\n进阶4：常见函数一、单行函数1、字符函数    concat拼接    substr截取子串    upper转换成大写    lower转换成小写    trim去前后指定的空格和字符    ltrim去左边空格    rtrim去右边空格    replace替换    lpad左填充    rpad右填充    instr返回子串第一次出现的索引    length 获取字节个数2、数学函数    round 四舍五入    rand 随机数    floor向下取整    ceil向上取整    mod取余    truncate截断3、日期函数    now当前系统日期+时间    curdate当前系统日期    curtime当前系统时间    str_to_date 将字符转换成日期    date_format将日期转换成字符4、流程控制函数    if 处理双分支    case语句 处理多分支        情况1：处理等值判断        情况2：处理条件判断5、其他函数    version版本    database当前库    user当前连接用户\n\n二、分组函数\nsum 求和max 最大值min 最小值avg 平均值count 计数特点：1、以上五个分组函数都忽略null值，除了count(*)2、sum和avg一般用于处理数值型    max、min、count可以处理任何数据类型3、都可以搭配distinct使用，用于统计去重后的结果4、count的参数可以支持：    字段、*、常量值，一般放1   建议使用 count(*)\n\n进阶5：分组查询语法：select 查询的字段，分组函数from 表group by 分组的字段特点：1、可以按单个字段分组2、和分组函数一同查询的字段最好是分组后的字段3、分组筛选        针对的表    位置          关键字分组前筛选：  原始表     group by的前面     where分组后筛选：  分组后的结果集 group by的后面     having4、可以按多个字段分组，字段之间用逗号隔开5、可以支持排序6、having后可以支持别名\n\n进阶6：多表连接查询笛卡尔乘积：如果连接条件省略或无效则会出现解决办法：添加上连接条件\n\n一、传统模式下的连接 ：等值连接——非等值连接\n1.等值连接的结果 &#x3D; 多个表的交集2.n表连接，至少需要n-1个连接条件3.多个表不分主次，没有顺序要求4.一般为表起别名，提高阅读性和性能\n\n二、sql99语法：通过join关键字实现连接\n含义：1999年推出的sql语法支持：等值连接、非等值连接 （内连接）外连接交叉连接语法：select 字段，...from 表1【inner|left outer|right outer|cross】join 表2 on  连接条件【inner|left outer|right outer|cross】join 表3 on  连接条件【where 筛选条件】【group by 分组字段】【having 分组后的筛选条件】【order by 排序的字段或表达式】好处：语句上，连接条件和筛选条件实现了分离，简洁明了！\n\n三、自连接\n案例：查询员工名和直接上级的名称\nsql99\nSELECT e.last_name,m.last_nameFROM employees eJOIN employees m ON e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;;\n\nsql92\nSELECT e.last_name,m.last_nameFROM employees e,employees m WHERE e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;;\n\n进阶7：子查询含义：\n一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询\n\n特点：\n1、子查询都放在小括号内2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧3、子查询优先于主查询执行，主查询使用了子查询的执行结果4、子查询根据查询结果的行数不同分为以下两类：① 单行子查询    结果集只有一行    一般搭配单行操作符使用：&gt; &lt; &#x3D; &lt;&gt; &gt;&#x3D; &lt;&#x3D;     非法使用子查询的情况：    a、子查询的结果为一组值    b、子查询的结果为空② 多行子查询    结果集有多行    一般搭配多行操作符使用：any、all、in、not in    in： 属于子查询结果中的任意一个就行    any和all往往可以用其他查询代替\n\n进阶8：分页查询应用场景：\n实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句\n\n语法：\nselect 字段|表达式,...from 表【where 条件】【group by 分组字段】【having 条件】【order by 排序的字段】limit 【起始的条目索引，】条目数;\n\n特点：\n1.起始条目索引从0开始2.limit子句放在查询语句的最后3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage假如:每页显示条目数sizePerPage要显示的页数 page\n\n进阶9：联合查询引入： union 联合、合并\n语法：\nselect 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】\n\n特点：\n1、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型几乎相同3、union代表去重，union all代表不去重\n\nDML语言插入语法： insert into 表名(字段名，…) values(值1，…);\n特点：\n1、字段类型和值类型一致或兼容，而且一一对应2、可以为空的字段，可以不用插入值，或用null填充3、不可以为空的字段，必须插入值4、字段个数和值的个数必须一致5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致\n\n修改修改单表语法：\nupdate 表名 set 字段&#x3D;新值,字段&#x3D;新值【where 条件】\n\n修改多表语法：\nupdate 表1 别名1,表2 别名2set 字段&#x3D;新值，字段&#x3D;新值where 连接条件and 筛选条件\n\n删除方式1：delete语句 \n单表的删除： ★ delete from 表名 【where 筛选条件】\n多表的删除： delete 别名1，别名2 from 表1 别名1，表2 别名2 where 连接条件 and 筛选条件;\n方式2：truncate语句\ntruncate table 表名\n\n两种方式的区别【面试题】\n#1.truncate不能加where条件，而delete可以加where条件#2.truncate的效率高一丢丢#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始#4.truncate删除不能回滚，delete删除可以回滚\n\nDDL语句库和表的管理库的管理：\n一、创建库create database 库名二、删除库drop database 库名\n\n表的管理： #1.创建表\nCREATE TABLE IF NOT EXISTS stuinfo(    stuId INT,    stuName VARCHAR(20),    gender CHAR,    bornDate DATETIME);DESC studentinfo;#2.修改表 alter语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;#①修改字段名ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;#②修改表名ALTER TABLE stuinfo RENAME [TO]  studentinfo;#③修改字段类型和列级约束ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;#④添加字段ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;#⑤删除字段ALTER TABLE studentinfo DROP COLUMN email;#3.删除表DROP TABLE [IF EXISTS] studentinfo;\n\n常见类型整型：小数：    浮点型    定点型字符型：日期型：Blob类型：\n\n常见约束NOT NULLDEFAULTUNIQUECHECKPRIMARY KEYFOREIGN KEY\n\n数据库事务含义通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态\n\n特点（ACID）原子性：要么都执行，要么都回滚一致性：保证数据的状态操作前和操作后保持一致隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改\n\n相关步骤：\n1、开启事务2、编写事务的一组逻辑操作单元（多条sql语句）3、提交事务或回滚事务\n\n事务的分类：隐式事务，没有明显的开启和结束事务的标志\n比如insert、update、delete语句本身就是一个事务\n\n显式事务，具有明显的开启和结束事务的标志\n1、开启事务取消自动提交事务的功能2、编写事务的一组逻辑操作单元（多条sql语句）insertupdatedelete3、提交事务或回滚事务\n\n使用到的关键字set autocommit&#x3D;0;start transaction;commit;rollback;savepoint  断点commit to 断点rollback to 断点\n\n事务的隔离级别:事务并发问题如何发生？\n当多个事务同时操作同一个数据库的相同数据时\n\n事务的并发问题有哪些？\n脏读：一个事务读取到了另外一个事务未提交的数据不可重复读：同一个事务中，多次读取到的数据不一致幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据\n\n如何避免事务的并发问题？\n通过设置事务的隔离级别1、READ UNCOMMITTED2、READ COMMITTED 可以避免脏读3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读4、SERIALIZABLE可以避免脏读、不可重复读和幻读\n\n设置隔离级别：\nset session|global  transaction isolation level 隔离级别名;\n\n查看隔离级别：\nselect @@tx_isolation;\n\n视图含义：理解成一张虚拟的表\n视图和表的区别：\n    使用方式    占用物理空间视图  完全相同    不占用，仅仅保存的是sql逻辑表   完全相同    占用\n\n视图的好处：\n1、sql语句提高重用性，效率高2、和表实现了分离，提高了安全性\n\n视图的创建语法：CREATE VIEW  视图名AS查询语句;\n\n视图的增删改查1、查看视图的数据 ★SELECT * FROM my_v4;SELECT * FROM my_v1 WHERE last_name&#x3D;&#39;Partners&#39;;2、插入视图的数据INSERT INTO my_v4(last_name,department_id) VALUES(&#39;虚竹&#39;,90);3、修改视图的数据UPDATE my_v4 SET last_name &#x3D;&#39;梦姑&#39; WHERE last_name&#x3D;&#39;虚竹&#39;;4、删除视图的数据DELETE FROM my_v4;\n\n某些视图不能更新包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all常量视图Select中包含子查询joinfrom一个不能更新的视图where子句的子查询引用了from子句中的表\n\n视图逻辑的更新#方式一：CREATE OR REPLACE VIEW test_v7ASSELECT last_name FROM employeesWHERE employee_id&gt;100;#方式二:ALTER VIEW test_v7ASSELECT employee_id FROM employees;SELECT * FROM test_v7;\n\n视图的删除DROP VIEW test_v1,test_v2,test_v3;\n\n视图结构的查看DESC test_v7;SHOW CREATE VIEW test_v7;\n\n存储过程含义：一组经过预先编译的sql语句的集合 好处：\n1、提高了sql语句的重用性，减少了开发程序员的压力2、提高了效率3、减少了传输次数\n\n分类：\n1、无返回无参2、仅仅带in类型，无返回有参3、仅仅带out类型，有返回无参4、既带in又带out，有返回有参5、带inout，有返回有参注意：in、out、inout都可以在一个存储过程中带多个\n\n创建存储过程语法：\ncreate procedure 存储过程名(in|out|inout 参数名  参数类型,...)begin    存储过程体end\n\n类似于方法：\n修饰符 返回类型 方法名(参数类型 参数名,...)&#123;    方法体;&#125;\n\n注意\n1、需要设置新的结束标记delimiter 新的结束标记示例：delimiter $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)BEGIN    sql语句1;    sql语句2;END $2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end3、参数前面的符号的意思in:该参数只能作为输入 （该参数不能做返回值）out：该参数只能作为输出（该参数只能做返回值）inout：既能做输入又能做输出\n\n调用存储过程call 存储过程名(实参列表)\n\n函数创建函数学过的函数：LENGTH、SUBSTR、CONCAT等 语法：\nCREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型BEGIN    函数体END\n\n调用函数SELECT 函数名（实参列表）\n\n函数和存储过程的区别        关键字     调用语法    返回值         应用场景函数      FUNCTION    SELECT 函数() 只能是一个       一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个存储过程    PROCEDURE   CALL 存储过程() 可以有0个或多个        一般用于更新\n\n流程控制结构系统变量一、全局变量\n作用域：针对于所有会话（连接）有效，但不能跨重启\n查看所有全局变量SHOW GLOBAL VARIABLES;查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;查看指定的系统变量的值SELECT @@global.autocommit;为某个系统变量赋值SET @@global.autocommit&#x3D;0;SET GLOBAL autocommit&#x3D;0;\n\n二、会话变量\n作用域：针对于当前会话（连接）有效\n查看所有会话变量SHOW SESSION VARIABLES;查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.tx_isolation;为某个会话变量赋值SET @@session.tx_isolation&#x3D;&#39;read-uncommitted&#39;;SET SESSION tx_isolation&#x3D;&#39;read-committed&#39;;\n\n自定义变量一、用户变量\n声明并初始化：\nSET @变量名&#x3D;值;SET @变量名:&#x3D;值;SELECT @变量名:&#x3D;值;\n\n赋值：\n方式一：一般用于赋简单的值SET 变量名&#x3D;值;SET 变量名:&#x3D;值;SELECT 变量名:&#x3D;值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;\n\n使用：\nselect @变量名;\n\n二、局部变量\n声明：\ndeclare 变量名 类型 【default 值】;\n\n赋值：\n方式一：一般用于赋简单的值SET 变量名&#x3D;值;SET 变量名:&#x3D;值;SELECT 变量名:&#x3D;值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;\n\n使用：\nselect 变量名\n\n二者的区别：\n作用域         定义位置        语法\n\n用户变量    当前会话        会话的任何地方        加@符号，不用指定类型 局部变量    定义它的BEGIN END中     BEGIN END的第一句话    一般不用加@,需要指定类型\n分支一、if函数 语法：if(条件，值1，值2) 特点：可以用在任何位置\n二、case语句\n语法：\n情况一：类似于switchcase 表达式when 值1 then 结果1或语句1(如果是语句，需要加分号) when 值2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）情况二：类似于多重ifcase when 条件1 then 结果1或语句1(如果是语句，需要加分号) when 条件2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）\n\n特点： 可以用在任何位置\n三、if elseif语句\n语法：\nif 情况1 then 语句1;elseif 情况2 then 语句2;...else 语句n;end if;\n\n特点： 只能用在begin end中！！！！！！！！！！！！！！！\n三者比较：         应用场合 if函数        简单双分支 case结构    等值判断 的多分支 if结构        区间判断 的多分支\n循环语法：\n【标签：】WHILE 循环条件  DO    循环体END WHILE 【标签】;\n\n特点：\n只能放在BEGIN END里面如果要搭配leave跳转语句，需要使用标签，否则可以不用标签leave类似于java中的break语句，跳出所在循环！！！\n\n\n\n\n引用：尚硅谷—mysql基础语法总结\n\n","tags":["技术积累","mysql"]},{"title":"数据结构 第三章 单链表","url":"/2020/09/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%8D%95%E9%93%BE%E8%A1%A8/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲\n线性表链式存储结构定义\n单链表的创建\n单链表的读取\n单链表的插入和删除\n总结\n\n线性表链式存储结构定义基本概念为保持线性结构“前驱后继，一对一”逻辑结构前提下，同时避免顺序存储结构中对相邻关系的依赖性。链式结构，除了要存数据元素信息外，还要存储它的后继元素的存储地址。\n\n数据域：存储数据元素信息的域\n指针域：存储直接后继位置的域，其中存储的信息称做指针或链\n结点(Node)：数据域和指针域组成数据元素ai的存储映像\n链表：由n个结点链成的一个链表\n单链表：链表中的每个结点只包含一个指针域\n\n单链表正是通过每个结点的指针域将线性表的数据元素按其逻辑次序链接在一起，如图所示：\n\n线性表链式存储结构代码描述\n相关规定，线性链表的最后一个结点为“空”(用NULL或“^”符号表示)\n头结点：在单链表的第一个结点前附设的一个结点，指针域指向第一个结点，若指针域为“空”，表示线性表为空\n\n\n头结点主要作用是为便于对链表进行统一操作，头结点的数据域可不存储信息，或者存储线性表长度等附加信息。\n\n单链表的定义//线性表的单链表存储结构typedef struct Node &#123;\tElemType data;\tstruct Node *next;&#125;Node;typedef struct Node *LinkList;//定义LinkList，指针变量的typedef\n\n\ntypedef struct Node &#123;...&#125;Node;中的Node同名对象(实例)Node的作用：常用于为sizeof()函数传参。\n\ntypedef struct Node *LinkList; 语法理解：如typedef int Status; ‘Status‘等价于int，在这里可以看作类似变量的声明，即\n声明一个int类型变量Status int Status，而int *Status表示定义一个int型的指针变量。同样类比在typedef中，“*”表示typedef的对象是Node 结构体的指针变量，即LinkList 等价于 struct Node *linkList; (不过写法上确实有点新颖，有点融合着写)\n\n\n单链表的读取工作指针：对于链表的元素定位操作，常常需要通过计数器从头到尾遍历计数而确定某一元素位置的指针，而“从头”不能直接用头结点直接指针后移遍历的，因为这样会失去了头结点原本的意义与功能。  \n因此常声明一个变量p存储头结点指针域来完成之后的指针偏移遍历操作，一般将这个从头开始复杂遍历的指针称为工作指针  \n“工作指针后移”则是工作指针通常的工作状态。\nGetElem思路：\n\n声明一个工作指针 p，指向链表的第一个结点(查询不查头结点)。\n设置计时器变量 j，并初始化为1，通过重新数数的方式找到序号位置。\n当j&lt;i时，遍历链表，让p的指针向后移动，称为“工作指针后移”，计时器j累加1.\n若到链表末尾p为空，则说明第i个结点不存在。\n否则查找成功，返回结点p的数据。\n\n/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) *//* 操作结果：用e返回L中第i个数据元素的值 */Status GetElem(LinkList L,int i,ElemType *e)&#123;    //--------------查询部分---------------\tint j;\tLinkList p;\t\t\t/* 声明工作指针p */\tp = L-&gt;next;\t\t/* 让p指向链表L的第一个结点 */\tj = 1;\t\t\t\t/*  j为计数器 */\twhile (p &amp;&amp; j&lt;i)&#123;  \t/* p不为空或者计数器j还没有等于i时，循环继续 */\t\tp = p-&gt;next;  \t/* 让p指向下一个结点 */\t\t++j;\t&#125;\tif ( !p || j&gt;i ) \t//注意这里是 大于 &gt; 符号\t\treturn ERROR;  /*  第i个元素不存在 */     //--------------查询部分---------------\t*e = p-&gt;data;   /*  取第i个元素的数据 */\treturn OK;&#125;\n\n\n链式存储没有表长，更加没有序号。事先不知循环次数，只能设置计数器，使用while循环解决;\n最坏情况复杂度是O(n);\n\n单链表的创建单链表的初始化单链表的初始化，即空表的建立\nInitList/* 初始化顺序线性表 */Status InitList(LinkList *L) &#123;     *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点(向内存申请一个结点的空间),并使L指向此头结点 */    if(!(*L)) \t/* 存储分配失败 */            return ERROR;    (*L)-&gt;next=NULL;\t /* 指针域为空 */    return OK;&#125;\n\n\nmalloc函数：void *malloc(long NumBytes)向内存申请NumBytes个字节的空间，并返回了指向这块内存的指针。若分配失败，则返回一个空指针(NULL）,如系统空间不足等失败情况。使用malloc函数需注意如下几点：\n\n申请了内存空间后，必须检查是否分配成功。\n\n当不需要再使用申请的内存时，记得释放；并把这块内存的指针指向NULL，防止程序后面不小心使用了它。\n\nmalloc与free这两个函数应该是配对使用。如果申请后不释放就是内存泄露；如果无故释放那就是什么也没有做。释放只能一次，如果释放两次及两次以上会出现错误（释放空指针例外，释放空指针其实也等于啥也没做，所以释放空指针释放多少次都没有问题）。\n\n虽然malloc()函数的类型是(void *)，任何类型的指针都可以转换成(void *),但是最好还是在前面进行强制类型转换，因为这样可以躲过一些编译器的检查。\n\n参考链接：malloc()和free()的基本概念以及基本用法\n\n\n\n\n\n\nLinkList *L形参的理解：\n\nStatus InitList(LinkList *L)注意，此时传入形参L已是二级指针(指针的指针)。\n\n一级指针与二级指针的区别与使用： \n形参传递永远是值传递(临时变量)，想要通过调用函数去改变传入实参的内容，则需要至少传入欲修改参数类型基础上的一级指针，并且通过“*” 调用实体内容进行修改。而并不能仅修改传入新参的内容，因为新参内容本身怎么修改都不会影响传入的实参。(值传递原则)\n\n当传值时，只可以引用值而不可以改变值，\n\n当你传指针时，只可以改变指针所指的内容，不可以改变指针本身\n\n但传指针的指针时，即可以改变指针所指的内容，又可以改变指针本身\n\n\n\n\n\n\n\nLinkList *L二级指针的用处：回归目的本身，很明确。即想要LinkList L;这个指针变量L最终指向通过malloc函数申请空间后返回的地址值(即地址的赋值)。理应L=malloc(sizeof(Node));即可，从一条语句操作上是完全正确的，类型也是一致的。但问题在于如今想要通过调用函数且把L作为实参传入修改其地址值。这样的前提下，若只传入想要修改内容类型的本身(这里就是指针变量/一级指针)，安装值传递原则是达不到效果的，代码如下所示：\nStatus InitList(LinkList L) &#123; //形参修改成一级指针\tL = (LinkList)malloc(sizeof(Node)); \tif (!(L)) \t\t\treturn ERROR;\tL-&gt;next = NULL;\t&#125;void main() &#123;\tLinkList L = NULL;\tInitList(L);\tif (L == NULL)\t\tprintf(&quot;L=NULL&quot;);//最终L还是NULL被打印出来，没有被改变\tgetchar();&#125;\n\n“想要通过调用函数去改变传入实参的内容，则需要至少传入欲修改参数类型基础上的一级指针”，即先要修改指针值本身，则至少需要传入该参数类型上的一级指针，即指针的指针，这就是Status InitList(LinkList L) &#123;...&#125; 二级指针形参的意义。\n\n参考链接：\n\n(C++)函数参数传递中的一级指针和二级指针\n\n引用传递和值传递以及链表中的LinkList L、LinkList *L、LinkList &amp;L\n\n\n\n\n\n单链表的整表创建单链表的整表创建又分为“头插法”，“尾插法”两种。\nCreateListHead“头插法”即新结点的指针域通过修改i - 1结点的后继节点指向完成结点的插入。\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */void CreateListHead(LinkList *L, int n) &#123;\tLinkList s;//初始化一个即将插入新结点\tint i;\tsrand(time(0));                         /* 初始化(修改)随机数种子 */\t*L = (LinkList)malloc(sizeof(Node));\t(*L)-&gt;next = NULL;                      /*  先建立一个带头结点的单链表 */\tfor (i=0; i&lt;n; i++) &#123;\t\ts = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */\t\ts-&gt;data = rand()%100+1;             /*  随机生成100以内的数字填充数据域 */        \t\ts-&gt;next = (*L)-&gt;next;    \t\t(*L)-&gt;next = p;\t\t\t\t\t\t/*  插入到表头 */\t&#125;&#125;\n\n\nsrand函数与rand函数使用(stdio.h)\n\nvoid srand(unsigned int seed)：设置随机数种子\nsrand函数用来设置rand函数产生随机数时的随机数种子，参数seed必须是整数，通常可以用time(0)的返回值作为seed。如果每次seed都设置相同的值，rand()产生 一系列 随机数值每次都一样。当计算机正常开机后，随机种子的值是定了的，除非你破坏了系统，或者通过srand函数修改。\n\nint rand(void)：生成随机数\n在0到RAND_MAX之间的整数值生成一个随机数，rand的内部是用线性同余法做的，不是真的随机数，只不过因为其周期特别长，所以在一定范围内可以看成是随机的。(RAND_MAX的范围最少在32767之间（int），即双字节（16位）。若unsigned int双字节是65535)\n\n\n\n参考链接：C语言的srand与rand函数浅谈\n\n\ntime函数的使用\n函数原型：time_t time(time_t *seconds)\ntime函数用于返回格林尼治时间(1970年1月1日00:00:00到当前时刻的时长)，单位是秒。存在与&lt;time.h&gt;库，一般使用方式t1=time(NULL) 或 t1=time(0)来获取当前格林尼治时间。\n\n\nCreateListTail“尾插法”，符合日常排队思维，后到的排在后。为了方便操作，需要引入尾指针概念\n尾指针：\n\n功能：用于指向当前链表的终端结点\n\n初始化：与头结点一致，均指向头指针。(类似队列初始化)\n\n基于尾指针功能的插入逻辑：\nr-&gt;next = s;//英文尾指针就是指向链表的终端结点，而实现向后插入，则直接插入在尾结点后即可r = s; //而从尾指针后面插入的新元素必将是新的尾结点，所以把它定义为新的尾指针即可\n\n\n\nCreateListTail尾插法实现代码如下：\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */void CreateListTail(LinkList *L, int n) &#123;\tLinkList s,r;\tint i;\tsrand(time(0));                      /* 初始化随机数种子 */\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\tr=*L;                                /* 尾指针初始化 */\tfor (i=0; i&lt;n; i++) &#123;\t\ts = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\t\ts-&gt;data = rand()%100+1;           /*  随机生成100以内的数字 */\t\tr-&gt;next=s;                        /* 将表尾终端结点的指针指向新结点 */\t\tr = s;                            /* 将当前的新结点定义为表尾终端结点 */\t&#125;\tr-&gt;next = NULL;                       /* 表示当前链表结束 */&#125;\n\n\n除了首次循环r是头结点，其余r成为了永远的尾结点。\n\nr = p;功能是，注意这里没有真正修改了地址值，而是局部变量顺应循环设计的循环变换，变换内容是将最新插入的结点成为下次循环的尾结点。\n删除内容说明：\n\n通过学习“《数据结构》——从概念到C++实现(第3版)” 认识实现结点从后面插入的逻辑实现原理是基于到对尾插法是利用尾指针功能的本身。—— 2020年9月26日\n\n\n\n\nGetElem与链式插入操作小结工作指针：\n常表定位指针，定位方式通常为工作指针后移 p = p-&gt;next;\n\n\n\n\nGetElem\n头插法\n尾插法\n删除\n\n\n\n初始为头指针，同步定位 i\n初始为头结点，定位 i 的前继结点\n同左\n同左\n\n\nLinkList p = L-&gt;next\nLinkList p = *L\n同左\n同左\n\n\ntip：i 表示顺序表的位置\n头插法实质：头插法：利用头指针“插入逻辑”进行插入的方法\n\n插入逻辑：“逆序操作”，防止与当前操作结点的后继结点失去联系的操作\n\ns-&gt;next = p-&gt;next; //p表示工作指针，在插入操作，p是定位到i-1位置，即插入位置的前继结点。\t\t\t\t //s表示即将插入的新结点p-&gt;next = s;\n\n\n\n尾插法实质：尾插法：基于尾指针“功能”的插入逻辑进行插入的方法\n\n功能：用于指向当前链表的终端结点\n初始化：与头结点一致，均指向头指针。(类似队列初始化)\n\nr-&gt;next = s;//英文尾指针就是指向链表的终端结点，而实现向后插入，则直接插入在尾结点后即可r = s; //而从尾指针后面插入的新元素必将是新的尾结点，所以把它定义为新的尾指针即可\n\n\n单链表的整表删除思路：\n\n声明一结点p和q；\n将第一个结点赋值给p；\n循环：\n将下一个结点赋值给q；\n释放p；\n将q赋值给p\n\n\n\n/* 初始条件：顺序线性表L已存在。操作结果：将L重置为空表 */Status ClearList(LinkList *L)&#123; \tLinkList p,q;\tp=(*L)-&gt;next;           /*  p指向第一个结点 */\twhile(p)&#123;               /*  没到表尾 */\t\tq=p-&gt;next;\t\tfree(p);\t\tp=q;\t&#125;\t(*L)-&gt;next=NULL;        /* 头结点指针域为空 */\treturn OK;&#125;\n\nfree函数，它的作用就是让系统回收一个Node结点，释放内存。\n单链表的插入和删除ListInsert思路：\n\n按照插入原理，首先需定位到i -1结点位置，即插入位置的前继结点，调整GetElem函数查询部分代码即可；\n创建空节点s，并把数据元素e填充到数据域；\n插入原理(头插法)：s-&gt;next = p-&gt;next;   P-&gt;next=s;；\n返回成功；\n\n/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， *//* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */Status ListInsert(LinkList *L,int i,ElemType e)&#123; \tint j;\tLinkList p,s;\tp = *L;   \tj = 1;\twhile (p &amp;&amp; j &lt; i)&#123;     /* 寻找第i-1个结点 */\t\tp = p-&gt;next;\t\t++j;\t&#125; \tif (!p || j &gt; i) \t\treturn ERROR;   /* 第i个元素不存在 */\ts = (LinkList)malloc(sizeof(Node));  /*  生成新结点(C语言标准函数) */\ts-&gt;data = e;  \ts-&gt;next = p-&gt;next;      /* 将p的后继结点赋值给s的后继  */\tp-&gt;next = s;          /* 将s赋值给p的后继 */\treturn OK;&#125;**要点**：- ListInsert函数巧妙将p赋值为**头结点地址**`p = *L;`来实现定位**i - 1**结点位置功能(插入位置的前继结点)。有别于GetElem函数`p = (*L)-&gt;next;`。- 插入原理：新结点的指针域通过**修改i - 1结点的后继节点指向**完成结点的插入。- 插入原理的两条语句**不能颠倒执行顺序**。## ListDelete**思路**：1. 按照删除原理，同样需定位到**i -1 **结点位置，并且**不能删除头结点**；1. 定位成功后，创建一个用于临时存放的节点指针q，将欲删除的节点p-&gt;next赋值给q；1. 将q节点中的数据赋值给e，作为返回；1. 释放q节点；1. 返回成功；```C/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) *//* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */Status ListDelete(LinkList *L,int i,ElemType *e) &#123; \tint j;\tLinkList p,q;\tp = *L;\tj = 1;\twhile (p-&gt;next &amp;&amp; j &lt; i)&#123;\t/* 遍历寻找第i个元素 */        p = p-&gt;next;        ++j;\t&#125;\tif (!(p-&gt;next) || j &gt; i) \t    return ERROR;           /* 第i个元素不存在 */\tq = p-&gt;next;\tp-&gt;next = q-&gt;next;\t\t\t/* 将q的后继赋值给p的后继 */\t*e = q-&gt;data;               /* 将q结点中的数据给e */\tfree(q);                    /* 让系统回收此结点，释放内存 */\treturn OK;&#125;\n\n\n\n要点：\n\n有别于GetElem与ListInsert函数while或if条件p，ListDelete函数的条件改为p-&gt;next。\nGetElem条件判断p是否为NULL，是因为p的初始值就定义成 p = (*)L-&gt;next，不存在对头结点操作的可能性;\nListInsert条件判断p是否为NULL，是因为插入数据是允许空表插入;\nListDelete条件判断p是否为NULL，是因为删除不允许空表删除。\n\n\n与整表删除要点一致，均需要通过一个变量q去记录将要删除的结点地址，不然会丢失地址，造成内存泄漏。\n\n插入和删除复杂度分析\n当不知第i个结点指针位置(首次插入/删除)，时间复杂度为O(n)；\n若需要在i个位置插入若干个结点，则除了第一次外其余结点插入或删除的时间复杂度为O(1)；\n\n结论：插入或删除数据越频繁的操作，单链表的效率优势就越明显。\n总结单链表各方法实现思路\nGetEelm：计数器 + while循环匹配 + 工作指针后移 p-&gt;next = p;；\nListInsert / CreateListHead：均采用了插入的方法，`s-&gt;next=p-&gt;next;  p-&gt;next=s;；\nListInsert/ ListDelete：均需要定位到欲操作位置的前继结点，通过初始赋值头结点地址p=(*L)；\nListDelete：\n“绕指针删除”q=p-&gt;next; p-&gt;next=q-&gt;next;；\nListDelete / ClearList：均需将欲删除结点用另一个变量暂存后再删除，不然会丢失地址，造成内存泄漏；\n\n\nCreateListTail / ClearList：同样在循环内通过局部变量直接交换节点地址实现，节点操作按序进行(从前到后)，如尾插法r-&gt;next=p; r =p;或整表删除q=p-&gt;next; free(p); p=q;\n\n不同操作中指针类型的要求原理：形参传递永远是值传递(临时变量)，想要通过调用函数去改变传入实参的内容必须：\n\n至少传入欲修改参数类型基础上的一级指针\n*通过“” 调用实体内容进行修改。\n\n结论：\n当传值时，只可以引用值而不可以改变值，\n当你传指针时，只可以改变指针所指的内容，不可以改变指针本身\n但传指针的指针时，即可以改变指针所指的内容，又可以改变指针本身\n\n\n\n初始化链表需要用二级指针；\n销毁链表(头结点也销毁)需要用到二级指针；\n插入、删除、遍历、清空结点用一级指针即可；\n\n单链表结构与顺序存储结构优缺点\n\n\n存储结构\n存储分配方式\n时间性能\n空间性能\n\n\n\n顺序存储\n连续存储单元\n查找：O(1)，插删：O(n)\n需预定分配存储空间，而大小不好掌握\n\n\n链式存储\n任意存储单元\n查找：O(n)，插删：O(n) 或 O(1)\n无需事先预定，内存有空间即可，不限数量\n\n\n\n若线性表需要频繁查找且很少进行插入和删除操作，宜采用顺序存储结构；\n如用户注册的个人信息，除了注册时插入数据外，绝大多数都是读取而且\n\n\n若线性表需要频繁增加和删除，宜采用链式存储结构；\n如游戏中玩家的武器装备仓库列表等\n\n\n若线性表元素个数变化较大，或者根本不知道有多大时，最好用单链表结构不用考虑空间分配问题；\n\n","tags":["技术积累","数据结构"]},{"title":"数据结构 第六章 树","url":"/2020/10/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%A0%91/","content":"\n读物：《大话数据结构》\n印次：2020年5月第25次印刷(2020.5重印)\n\n大纲\n树的定义\n树的相关概念\n树的存储结构\n二叉树\n二叉树的性质\n\n树的定义\n树(Tree)是n(n ≥ 0)个结点的有限集，n = 0则为空树\n在任意一颗树中，有且仅有一个称为根(Root)的结点\n当结点 n &gt; 1，其余结点可分为m个互不相交的有限集T1、T2、…Tm\n其中每个互不相交的有限集本身又是一颗树，并称为根的子树(SubTree)\n\n核心：有且仅有一个称为根**整个树的根结点唯一，子树互不相交\n树的相关概念结点类型度(Degree)：结点 拥有的子树的数量，所有结点最大的度称为该数的度\n\n叶结点(Leaf)或终端节点：度 = 0；\n非终端结点或分支结点：度 ≠ 0；，此类结点除根结点外，也可称为内部结点\n\n结点间的关系\n孩子(Child) 与 双亲(Parent) ：结点的子树的根称为该结点的孩子(Child)，相应地，该节点称为孩子的双亲\n兄弟(Sibling)：同一个双亲的孩子之间互称兄弟\n祖先：结点的祖先是从根到该结点所经历分支上的所有结点\n子孙：以某结点为根，的子树中的任一结点都称为该结点的子孙\n\n其他概念\n层次(Level)：从根开始定义，根为第一层\n堂兄弟：双亲在同一层结点\n深度(Depth)或高度：树种结点最大的层次，称为树的深度\n宽度：每一层结点个数的最大值\n路径：略\n\n树的类型\n森林(forest)：是m颗(m≥0)颗互不相交的树的集合。对树种的每个结点而言，其子树的集合即为森林\n有序树 与 无序树：\n\n\n树的存储结构有别于线性表，树是一对多的结构，无论哪一种顺序存储结构的不能体现出这个关系，所以必须与链式存储结构结合起来表示。\n\n双亲表示法\n孩子表示法\n孩子兄弟表示法\n\n\n双亲表示法实现/* 树的双亲表示法结点结构定义 */#define MAX_TREE_SIZE 100/* 树结点的数据类型，目前暂定为整型 */typedef int TElemType;              /* 结点结构 */typedef struct PTNode&#123;       TElemType data; /* 结点数据 */                     int parent;   /* 双亲位置 */             &#125; PTNode;/* 树结构 */typedef struct&#123;    PTNode nodes[MAX_TREE_SIZE]; /* 结点数组 */     int r, n; /* 根的位置和结点数 */                      &#125; PTree;\n\n\n\n\n\n孩子表示法实现/* 树的孩子表示法结构定义 */#define MAX_TREE_SIZE 100/* 孩子结点 */typedef struct CTNode&#123;    int child;    struct CTNode *next;&#125; *ChildPtr;/* 表头结构 */typedef struct&#123;    TElemType data;    ChildPtr firstchild;&#125; CTBox;/* 树结构 */typedef struct&#123;    CTBox nodes[MAX_TREE_SIZE]; /* 结点数组 */      int r,n; /* 根的位置和结点数 */                      &#125; CTree;\n\n孩子兄弟表示法实现/* 树的孩子兄弟表示法结构定义 */typedef struct CSNode&#123;    TElemType data;    struct CSNode *firstchild,*rightsib;&#125; CSNode, *CSTree;\n\n\n\n树的遍历树的遍历：按照某种次序，访问树中所有结点，且每个结点有且只有一次被访问。若规定从左到右遍历，树的遍历一般存在三种\n\n前序(根)遍历\n后序(根)遍历\n层序(跟)遍历\n\ntips：若树为二叉树，则还有一种中序遍历\n注意：\n\n前提规定“从左到右”表示，无论哪种遍历，都是决定从左子树，到右子树\n\n前序遍历​    从根节点开始遍历，从上到下，按先左子树，后右子树的顺序遍历每一颗子树\n后序遍历​    从根结点出发(不遍历)，从下到上，同样按先左子树，后右子树的顺序遍历每一颗子树。最后再遍历每颗子树的根结点\n层序遍历/广度遍历​    从根结点开始，自上而下，从左到右，逐层遍历\n### 前序遍历\n\n访问树的根结点\n从左到右的顺序前序遍历(从上到下)，遍历分别为根结点的每一颗子树\n访问根结点，从左到右遍历根结点的孩子，若孩子又存在子树(即根节点)，从1开始循环\n\n\n\n后序遍历\n从左到右的顺序后序遍历(从下到上)，遍历分别为根结点的每一颗子树\n最后访问根结点\n从左到右，从下到上，即从最下底层左子树开始，从左到右遍历。每颗子树的根结点总是最后遍历\n\n\n\n\n二叉树二叉树的定义\n二叉树(Binary Tree)的每个结点最多只有两颗子树(即可以没有子树，或者有一颗也行，即树的度最大为2)\n左子树和右子树是有顺序的，注意区别。因此二叉树存在五种基本状态\n空二叉树\n只有一个根节点\n根结点只有左子树\n根结点只有右子树\n根结点既有左子树又有右子树\n\n\n\n特殊二叉树\n斜树\n满二叉树\n完全二叉树\n\n斜树\n左斜树：所有结点都只有左子树\n右斜树：所有结点都只有左子树\n\n斜树特点总结：每一层都只有一个结点，结点的个数与二叉树的深度相同。\n满二叉树\n所有分支结点都存在左子树和右子树\n所有叶结点都在同一层\n\n完全二叉树判断方法1：\n\n一颗具有n个结点的二叉树按层序编号(从上到下，从左到右，)\n每个结点按照满二叉树的结构逐层顺序编号，如果编号出现空挡，就说明不是完全二叉树，否则就是\n\n判单方法2：\n\n如果二叉树中除去最后一层节点为满二叉树，且最后一层的每个结点依次从左到右分布，则此二叉树被称为完全二叉树。\n\n特点：满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树\n二叉树的性质注意：以下二叉树性质，均以1开始从上到下，从左到右编号\n二叉树性质1性质1：在二叉树的第 i 层上至多有 2i-1个结点 ( i ≥ 1)，即单层上的至多节点数。\n解析：纯数量关系推导\n二叉树的性质2性质2：深度为k的二叉树至多有 2k-1 个结点( k ≥ 1)\n解析：纯数量关系推导\n二叉树的性质3性质3：对于任何一颗二叉树T，如果其终端结点数为n0，度为2的结点数为n2。则n0 = n2 +1 \n即，所有叶结点数  = 所有根节点数 + 1\n二叉树的性质4性质4：具有n个结点得完全二叉树的深度为    |_ log2n _| + 1     (|__ x _|)表示不大于x的最大整数\n解析：暂时略《数据结构》从概念到C++的实现，王红梅 P137\n二叉树的性质5性质5：具有n个结点完全二叉树存在如下性质\n\n如果 i = 1，则结点 i 是二叉树的根；如果 i &gt; 1，则双亲结点是  i/2」\n如果 2i &gt; n，则结点 i 无左孩子，即结点i为叶结点。反之 2i &lt; n 则i结点的左孩子是2i\n如果 2i + 1 &gt; n，则结点 i 无右孩子，反之其右孩子是结点 2i + 1\n\n正序的先左到底后右\n也是先左到底，但是从左到底处出发，先左后右\n二叉树的存储结构顺序存储结构设计由于二叉树定义严格，是一种特殊的树，所以可以仅使用顺序存储结构实现，仅通过数组下标的数量关系就能体现结点之间的逻辑关系\n\n将二叉树从根节点编号为1开始，从上到小，左到右全部编号。直接按序存入数组，若是非完全二叉树，缺少部分填入空指针，但序号依然按照完全二叉树的顺序编号。\n对于完全二叉树，数组下标的数量关系足够体现结点的所有逻辑关系(双亲，孩子，兄弟)\n对于非完全二叉树/一般二叉树，按完全二叉树顺序编号，空缺部分均填入空指针\n\n\n性能若二叉树表现出一条深度为k的 左/右斜树，则需开辟 2k-1 个空间存储，造成大量空间的浪费，因此二叉树的顺序存储结构一般只用于完全二叉树\n链式存储结构\n二叉链表：由于二叉表每个结点最多只有两个孩子，则一个数据域 + 两个 指针域(左右孩子)的存储结构\n三叉链表：data + parent + lchild + rchild\n\n/* 二叉树的二叉链表结点结构定义 */typedef struct BiTNode&#123;    TElemType data; /* 数据域*/    struct BiTNode *lchild,*rchild;\t/* 左右孩子指针 */&#125;BiTNode,*BiTree;\n\n\n\n遍历二叉树前言二叉树的遍历不同于线性表，即使确保“从根结点出发，依次访问二叉树的所有结点”，对于每个结点都可以有不同的选择，从而遍历的次序完全不一样。因此，可得出两个角度：\n\n鉴于二叉树存在多种遍历次序，通常将其限制从左到右的习惯方式遍历。\n鉴于可存在多种遍历次序，且处理困难，而计算机只能处理线性序列(循环,判断)**，通常利用与树的递归定义相同的递归方式来遍历。某种意义上将树的结点遍历变成线性序列**\n\n二叉树的遍历方法限制按从左到右遍历的，会存在四种遍历方式，前序遍历、中序遍历、后序遍历、层序遍历。\n\n“限制从左到右”，即调用左子树的递归操作一定在，调用右子树的递归操作之前！\n前、中、后序遍历的意思是，输出语句相对在左右子树递归调用的前、中、后位置\n\n注意：无论前、中、后、层序遍历都是从根节点开始。但，从根节点开始，不等于先输出根节点！\n前序(根)遍历\n访问根结点\n前序遍历根结点的左子树\n前序遍历根结点的右子树\n\n中序(根)遍历\n中序遍历根结点的左子树\n访问根结点\n中序遍历根结点的右子树\n\n后序(根)遍历\n后序遍历根结点的左子树\n后序遍历根结点的右子树\n访问根结点\n\n理解的演变：\n\n大话数据结构代码版，通过递归代码去推演：复杂，慢，易错。唯一好处，更加理解递归-回推\n课堂聆听1，上下左右顺序描述更加复杂，无效\n课堂聆听2，教材描述。纯文字理解(内含递归)\n\n关键：\n\n除“从根结点开始”这个根结点特指root这一个结点外，其他描述中的“根结点”均指每一颗子树的根结点\nxxx遍历法下的描述“xxx遍历根节点的x子树”，其实表示后面的子树用于定位，可以把文字中xxx的描述递归函数的调用，即回到定义的本身，重头开始执行。即把概念描述，和递归理念结合在一起\n\n技巧：\n\n前根遍历：\n方式1：根左、根左…根右、根左…\n方式2(快)：每一棵树都是先根再输出左右(结点嵌套根)\n\n\n中序遍历：\n技巧是，直接从root结点深度最大的左子数开始。遍历完root结点左子孙后再从右子孙中从深度最大左子树开始。直至遍历中序遍历全部结点\n每一棵树都是左到底后，访问根，再去到下一个右结点(结点嵌套，即又每一颗数左道底后，访问根…)…\n\n\n后序遍历：\n根结点肯定是最后访问的，找到深度大，先左输出后右输出。然后依次嵌套重复\n方式2(快)：从最底层开始，从下往上推。每一棵树都是根结点最后访问，先左后右(结点嵌套根)\n\n\n\n遍历次序记忆关键：\n\n优先采取“树的遍历”中对三种遍历次序的文字主观描述\n其次结合三行代码的顺序，结合递归执行思想，去记忆\n\n前序遍历算法/* 二叉树的前序遍历递归算法 *//* “前”序遍历，输出语句在左子树递归和右子树递归之前，即第一行 */void PreOrderTraverse(BiTree T)&#123;    if(T == NULL)        return;        printf(&quot;%C&quot;,T-&gt;data);\t    //先输出    PreOrderTraverse(T-&gt;lchild);//再左子树递归    PreOrderTraverse(T-&gt;rchild);//最后右边子树递归&#125;\n\n前序遍历算法，遍历次序如下图所示：ABDGHCEIF\n\n中序遍历/* 二叉树的中序遍历递归算法 *//* “中”序遍历，输出语句在左子树递归和右子树递归之“中”，即第二行 */void InOrderTraverse(BiTree T)&#123;    if(T == NULL)        return;     InOrderTraverse(T-&gt;lchild);//先左子树递归    printf(&quot;%C&quot;,T-&gt;data);\t   //再输出    InOrderTraverse(T-&gt;rchild);//最后右子树递归&#125;\n\n中序遍历，遍历次序如下图所示：GDHBAEICF\n\n后序遍历/* 二叉树的后序遍历递归算法 *//* “后”序遍历，输出语句在左子树递归和右子树递归之“后”，即最后行 */void PostOrderTraverse(BiTree T)&#123;    if(T == NULL)        return;     PostOrderTraverse(T-&gt;lchild);//先左子树递归    PostOrderTraverse(T-&gt;rchild);//再右子树递归     printf(&quot;%C&quot;,T-&gt;data);\t   //最后才输出&#125;\n\n后序遍历，遍历次序如下图所示：GHDBIEFCA\n\n层序遍历与前三种遍历方式不同，层序遍历更多是由人的主观遍历次序，到对应的代码的实现。而其他三种更倾向于代码的递归逻辑设计到实际的遍历次序。\n实现逻辑\n\n初始化：创建队列，根结点入队\n若队列不为空，队头出队。让队头的左右孩子入队\n以此循环第2步即可\n\n推导二叉树的遍历结果推导逻辑：(具体案例细节可参详P184~P186)\n\n确定根节点：从前序遍历(首位)，或后序遍历(尾)\n循环推导\n从某一遍历推导出的某一条件出发\n使用上一轮得出的条件，与上一轮不同的遍历方式结合再推出一个新条件，以此循环\n注意：一般每一轮会都要利用孩子集范围，缩减孩子集范围，作为判断的条件之一\n\n\n经验总结：\n必须含中序遍历的条件则才能唯一确定一颗二叉树\n前序遍历，用于确定根后与中序遍历占位后，来确定左孩子(同时也确定子树的根，再中序域划分…)\n中序遍历，主要用于，范围划分，且占位！\n后序遍历，只要用于，被划分范围后，确定根结点(范围尾部)\n\n\n\n实战演示\n\n二叉树的建立扩展二叉树为了能让每个结点确认是否有左右孩子，在二叉树建立前，将其每个结点的空指针处引出一个虚结点。这种扩展后的二叉树称为扩展二叉树\n\n二叉树的建立二叉树的建立步骤如下\n\n画出拟建立二叉树\n画出对应的扩展二叉树\n以某种遍历方式写出扩展二叉树的遍历次序\n以同类型的遍历方式创建按次序输入实现二叉树的建立\n\n/* 按前序输入二叉树中结点的值（一个字符） *//* #表示空树，构造二叉链表表示二叉树T。 */void CreateBiTree(BiTree *T)&#123; \tTElemType ch = null;\t\t/* scanf(&quot;%c&quot;,&amp;ch); */\tch=str[index++];\tif(ch==&#x27;#&#x27;) \t\t*T=NULL;\telse\t&#123;\t\t*T=(BiTree)malloc(sizeof(BiTNode));\t\tif(!*T)\t\t\texit(OVERFLOW);\t\t(*T)-&gt;data=ch; /* 生成根结点 */\t\tCreateBiTree(&amp;(*T)-&gt;lchild); /* 构造左子树 */\t\tCreateBiTree(&amp;(*T)-&gt;rchild); /* 构造右子树 */\t&#125; &#125;\n\n**C++**实现：\ntemplate&lt;typename DataType&gt;BiNode&lt;DataType&gt;* BiTree&lt;DataType&gt;::Creat()&#123;\t//声明一个新结点\tBiThrNode&lt;DataType&gt; *btn = nullptr;\tchar ch;\tcin &gt;&gt; ch;\tif (ch != &#x27;#&#x27;)&#123;\t\tbtn = new BiThrNode&lt;DataType&gt;;\t\tbtn-&gt;data = ch;\t\tbtn-&gt;lchild = Creat();\t\tbtn-&gt;rchild = Creat();\t&#125;\treturn btn;&#125;\n\n\n\n线索二叉树\n二叉树的链式存储会存在大量空指针域，n个结点的二叉树就会存在 n+1个空指针域。\n可以利用这些空指针域存储以某种次序创建的二叉树结点之间的前驱后继指针信息。\n指向前驱和后继的指针称为线索。加上线索的二叉链表称为线索链表，相应的二叉树称为线索二叉树\n二叉树以某种次序遍历使其变为线索二叉树的过程称做线索化**。\n\n\n\n线索二叉树的存储结构为区分，rchild/lchild是指向线索还是指向树结构的指针，通过两个Tag枚举变量标志，Thread为线索指针，Link为树指针\ntypedef enum &#123;Link,Thread&#125; PointerTag;\t/* Link==0表示指向左右孩子指针, */\t\t\t\t\t\t\t\t\t\t/* Thread==1表示指向前驱或后继的线索 */typedef  struct BiThrNode\t/* 二叉线索存储结点结构 */&#123;\tTElemType data;\t/* 结点数据 */\tstruct BiThrNode *lchild, *rchild;\t/* 左右孩子指针 */\tPointerTag LTag;\tPointerTag RTag;\t\t/* 左右标志 */&#125; BiThrNode, *BiThrTree;\n\n\n\n中序线索化通过中序遍历实现中序线索化。代码如下，需注意：\n\n全局变量 pre 在外初始化为 root\n线索二叉树初始化需把结点置为Link，因为中序线索化只修改Thread；\n令某种次序序列中的第一个结点其lchild指向二叉树的根结点\n\n//必须以全局变量的方式参与递归操作BiThrNode&lt;char&gt; *pre = nullptr;//中序线索化void InThreading(BiThrNode&lt;char&gt; *p) &#123;\t//左子树递归至最后结点(非null结点)\tif (p) &#123;\t\tInThreading(p-&gt;lchild);\t\t//(!p-&gt;lchild)：表若当前结点左孩子为null，则lchild(前驱)线索化，\t\t//即为pre结点\t\tif (!p-&gt;lchild) &#123;//为null\t\t\tp-&gt;LTag = PoinTerTag::Thread;\t\t\tp-&gt;lchild = pre;\t\t\t\t\t\t\t&#125;\t\t\t\t\t\t\t//(!pre-&gt;rchild)：表，若当前结点遍历的上一个结点的rchild(后继)为null，\t\t//则线索化的后继结点，为当前结点p\t\tif (!pre-&gt;rchild) &#123;//为null\t\t\tpre-&gt;RTag = PoinTerTag::Thread;\t\t\tpre-&gt;rchild = p;\t\t&#125;\t\tpre = p;//存储以某种递归次序线索化(遍历)的上一个结点位置\t\t\t\t//因为固定从左到右，所以pre用于LTag的lchild,也用于pre结点本身的有孩子线索化\t\tInThreading(p-&gt;rchild);\t&#125;&#125;void main()&#123;    BiThrTree&lt;char&gt; btt&#123;&#125;;\t//P189二叉树 ABDH##I##EJ###CF##G##\t//pre全局遍历的变量环境是 pre = root;\tpre = btt.root;\tInThreading(btt.root);&#125;\n\n\n\n遍历线索二叉树线索二叉树与双向链表线索二叉树的结构类似双链表结构，因此为了方便线索二叉树的遍历等操作，对线索二叉树添加一个头结点。添加头结点这个操作常常在线索化的时候实现，因此要对上面的中序线索化代码的基础上稍作修改——添加一个头结点，并设定初始状体如下：\n\n头结点的lchild域指向二叉树的根结点，rchild域指向遍历时访问的最后一个结点。\n遍历的第一个元素的lchild域指向头结点，最后一个结点的rchild域同样指向头结点\n\n/* 备注：遍历代码是重点，而对线索化的改进代码。这个是次要，还未分析学习 *//* 中序遍历二叉树T,并将其中序线索化,Thrt指向头结点 */Status InOrderThreading(BiThrTree *Thrt,BiThrTree T)&#123; \t*Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\tif(!*Thrt)\t\texit(OVERFLOW);\t(*Thrt)-&gt;LTag=Link; /* 建头结点 */\t(*Thrt)-&gt;RTag=Thread;\t(*Thrt)-&gt;rchild=(*Thrt); /* 右指针回指 */    \tif(!T) /* 若二叉树空,则左指针回指 */\t\t(*Thrt)-&gt;lchild=*Thrt;\telse\t&#123;\t\t(*Thrt)-&gt;lchild=T;\t\tpre=(*Thrt);\t\tInThreading(T); /* 中序遍历进行中序线索化 */\t\tpre-&gt;rchild=*Thrt;\t\tpre-&gt;RTag=Thread; /* 最后一个结点线索化 */\t\t(*Thrt)-&gt;rchild=pre;\t&#125;\treturn OK;&#125;\n\n中序遍历线索二叉树(非递归版)\nBiThrTree T 表示头结点，则按带头结点的线索化，p = T-&gt;lchild; 则表示p等于根结点\n\n/* 中序遍历二叉线索树T(头结点)的非递归算法 */Status InOrderTraverse_Thr(BiThrTree T)&#123; \tBiThrTree p;\tp=T-&gt;lchild; /* p指向根结点 */\twhile(p!=T)&#123; /* 空树或遍历结束时,p==T */        \t\twhile(p-&gt;LTag==Link)\t\t\tp=p-&gt;lchild;\t\tif(!visit(p-&gt;data)) /* 访问其左子树为空的结点 */\t\t\treturn ERROR;\t\twhile(p-&gt;RTag==Thread&amp;&amp;p-&gt;rchild!=T)&#123;//防空树操作\t\t\tp=p-&gt;rchild;\t\t\tvisit(p-&gt;data); /* 访问后继结点 */\t\t&#125;\t\tp=p-&gt;rchild;\t&#125;\treturn OK;&#125;\n\n代码分析\n\n这段代码相当于一个链表的扫描，所以时间复杂度O(n)\n小结：\n线索二叉树充分利用了二叉树链式存储结构的空指针域空间(节省空间)，仅需创建时的一次遍历就可终生受用的前驱后继信息(节省时间)。\n若二叉树需要经常遍历或查找结点时需要某种遍历序列的前驱和后继，则线索二叉树的存储结构是非常不错的选择。\n\n","tags":["技术积累","数据结构"]},{"title":"JavaSE基础核心积累","url":"/2021/03/04/JavaSE%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83%E7%A7%AF%E7%B4%AF/","content":"语言概述语言历史​    创始人：java之父James Gosling\n\nSUN(Stanford University Network，斯坦福大学网络公司 )1995推出\n\n1991年 Green项目，开发语言最初版本命名为Oak (橡树)\n…\n\n2004年，发布里程碑式版本：JDK 1.5，为突出此版本的重要性，**更名为JDK 5.0**\n\n2005年，改名J2SE -&gt; JavaSE(桌面级)**，J2EE -&gt; **JavaEE(企业WEB)**，J2ME -&gt; **JavaME\n\n2009年，Oracle公司收购SUN，交易价格74亿美元\n…                              \n\n2014年，**发布JDK 8.0**，是继JDK 5.0以来变化最大的版本**\n…\n\n2018年3月，发布JDK 10.0，版本号也称为18.3(改为时间命名)号称每月一更\n\n2018年9月，发布JDK 11.0，版本号也称为18.9\n\n\n语言特点\njava是一种半编译半解释型语言\n面向对象：类、对象、封装、继承、多态\n健壮性：垃圾回收机制(GC机制)，但仍存在内存泄漏与溢出。c通过malloc与free手动管理)\n跨平台性：java虚拟(JVM)，write once,run anywhere 一次编译，到处运行\n\n\n开发环境基础概念\nJDK ：Java开发工具包 (Java Development Kit), 用与开发及运行\n\nJDK = JRE+开发工具集\n\n\nJava开发工具：javac.exe (编译工具) ，jar.exe(打包工具)等\n\nJRE：Java运行环境(Java Runtime Environment)，仅用于运行java项目\n\nJRE = JVM+Java SE标准类库\n\n\nJVM：Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等\n\n\n\n\n环境搭建下载安装JDK官网，一键式傻瓜安装。可自定义安装路径，但注意安装软件的路径中不能包含中文、空格。(建议安装文件夹保留JDK版本号)\n配置环境变量配置path环境变量：\n\n进入系统变量设置：(win10)计算机，右键属性，高级系统变量，环境变量\n\n把安装JDK的bin目录路径添加到环境变量path中(若不存在path则新建)\n\n方式1：直接把JDK下的bin目录路径添加到path变量中即可\n\n\n方式2(推荐)：\n\n在系统变量中新建名为JAVA_HOME，值为JDK目录路径的环境变量\n\n在path中通过引用的方式添加，即在path中添加 %JAVA_HOME%\\bin;  (注意win10末尾无需分号)\n\n新建JAVA_HOME变量如下图\n\n\n\n在Path环境变量中引用JAVA_HOME在bin目录下配置如下图\n\n\n\n\n\n\n\n\n\nTips：推荐使用方式2，后续tomcat运行环境需识别JAVA_HOME\n\n验证配置注意，要重新打开一个新的cmd窗口输入javac命令显示如下内容信息则安装成功，java -version只能检查是否安装了jdk，不能检查有关环境变量的配置。\n\n常见问题\n重写打开一个新的cmd窗口测试javac\n\n尝试把java的环境变量的位置以至最前面(防止部分功能失效)\n\nwin10环境下配置环境变量，无需添加末尾的分号’;’\n\n\n\nJDK内容概要默认安装路径：C:\\Program Files\\Java\\jdk1.8.0_144\n\nbin  – 开发工具（常用，javac.c 编译，java.exe 解析运行，javadoc.exe，生成文档）\ndb  – java 实现的数据库\ninclude – 含c语言编写的头文件\njre – java运行时环境\nlib – 存放jar包\nsrc.zip – 存放java开源代码，一些常用的类库(IDE中查看源码可引用它)\n\n\n\nJDK主要的包(packed)介绍\njava.lang(language)：包含一些Java语言的核心类，如String、Math、Integer、 System和 Thread，提供常用功能\njava.net：包含执行与网络相关的操作的类和接口\njava.io：包含能提供多种输入/输出功能的类\njava.util：包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数\njava.text：包含了一些java格式化相关的类\njava.sql：包含了java进行JDBC数据库编程的相关类/接口\njava.awt：包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。 B/S C/S\n\n\n\n环境变量详解\npath环境变量：windows系统在cmd内执行命令时要搜寻的路径。配置path环境变量可实现在任何目录下都可以执行配置在path内容里的程序的效果。\n\n环境变量类型：用户变量针对当前用户有效。系统变量，针对所有用户有效\ncmd命令的搜索逻辑：从当前目录—&gt;path路径(从前往后)\n环境变量值格式：由绝对路径组成。多个值用分号“;” (win7)隔开或(win10) 通过” 新建”的方式直接添加。\n%**JAVA_HOME%\\bin;中“%%”表示获取这个环境变量的值**\n\n\n一台电脑允许同时安装多个版本JDK，实际使用哪个，却决与环境变量的指定\n\n官方JDK安装过程会弹出两个安装框，一个是JDK安装，一个是独立的JRE安装，其实理论上安装JDK已经包含JRE，这个多出来的独立安装的JRE为了方便eclipse识别而安装，建议安装。\n\n\nJava程序运行逻辑执行逻辑\n编译及运行命令\n编译.java文件：javac XXX.java    (需含.java后缀)\n\n同目录下会编译出.class字节码文件，该字节码文件名由代码中class类名决定的\n\n\n运行.class文件：java .class文件名 (无需.class后缀)\n\n\n演示\n新建一个HelloWorld.java结尾的文件\nclass HelloChina&#123;\tpublic static void main(String []args)&#123;\t\tSystem.out.println(&quot;hello,world!&quot;);\t\t&#125;&#125;\n\n编译及运行\n\n\n\n\n补充说明\njavac命令因在Windows平台下执行，因此不区分大小写\njava命令是涉及java中的的执行，java是严格区分大小写的\n任何书写语法都没错，但还是报出“错误：找不到或无法加载主类”，有可能电脑配置了classpath的环境变量，classpath的配置表示使所有**.class文件**的执行都往该路径去寻找，导致在classpath路径下找不到对于执行的.class文件，因此提示错误。只需要删除classpath环境变量即可\n在一个java源文件中可以声明多个类，但只有一个类能声明public，而且声明public的类的类名必须与源文件文件名相同\n存在多个class的源文件编译会生成对应的多个字节码文件，java.exe只需执行含main方法的类即可\n\n\n\n基本语法注释​    java包含三种注释：单行注释、多行注释、文档注释(java特有)\n\n文档注释：通过指定的注释格式，使注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。可以进入生成的文件夹，打开index.html即可。\n\n注释格式：javadoc 工具默认只处理以 public 或 protected 修饰的内容\n/**@author 指定java程序的作者@version 指定源文件的版本文本内容，在类头部形成对class的文档注释*/public class XXX&#123;\t/**\t在方法头部形成对方法的一个文档注释\t*/\tmethod();&#125;\n\njavadoc命令使用：javadoc –d filename –author –version javaFile.java\nbug：\n错误提示：javadoc 编码GBK的不可映射字符\n原因：由于jdk是国际版的, 在编译时, 如果没有使用-encoding参数指定java源程序的编码格式, javac.exe则会获取操作系统默认的编码格式.\n解决方案：\n方案1：追加指定编码命令：javadoc -d filename -author -version -encoding utf-8 HelloWorld.java\n​    \n\n\n\n\n关键字、保留字、标识符\n关键字：被Java语言赋予了特殊含义，用做专门用途的字符串。如**int、for、class…**（小写单词）\n\n保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。如：goto 、const\n\n标识符(Unicode编码)**：凡是自己可以起名字的地方都叫标识符 (为了提高阅读性，要尽量意义，“见名知意**”)\n规则：\n\n由26个英文字母大小写，0-9，**_或$**组成\n数字不可以开头，不可以使用关键字和保留字，但能包含关键字和保留字\nJava中严格区分大小写，长度无限制。\n标识符不能包含空格。\n\n规范：\n\n包名：多单词组成，所有字母小写，xxxyyyzzz\n类名、接口名：多单词组成时，所有单词的首字母大写，XxxYyyZzz(大驼峰)\n变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写，xxxYyyZzz(小驼峰)\n常量名：所有字母都大写。多单词时每个单词用下划线连接，XXX_YYY_zzz\n\n\n\n数据类型类型分类\n\n\n\n\n数据类型\n内存空间\n默认值\n表示范围\n\n\n\nbyte\n1 byte (20)\n0\n-128 ~ 127\n\n\nshort /char\n2 byte (21)\n0\n-215~215-1 / 无符号整型\n\n\nint\n4 byte (22)\n0\n-231~231-1(约21亿)\n\n\nlong\n8 byte (23)\n0L 或 0l\n-263~263-1\n\n\nfloat\n4 byte\n0.0F 或 0.0f\n\n\n\ndouble\n8 byte\n0.0\n\n\n\n\n补充说明\n\nJava的整型常量默认为 int 型，因此声明long型常量须后加 ‘l’或‘L’\nJava 的浮点型常量默认为double型，因此声明float型常量，须后加‘f’或‘F’\n\n\n无论是赋值语句的数字还是字面常量的数字，只要是整型数字 java就认为是int，只要浮点数字就认为double\n\n//编译成功，但bigValue并非long型，而是int型long bigValue = 100;/*编译失败 ，系统不会把 9999999999999 当成long类型处理所以超出 int 的表数范围，从而引起错误*/ long bigValue1 = 9999999999999;//下面代码是正确的，在巨大的整数值后使用 L 后缀 ，强制使用long 类型long bigVa1ue2 = 9223372036854775807L;//编译失败，12.3默认是double型，大类型转小类型必须加强制转换符，或改为12.3ffloat f1 = 12.3;\n\n\n整数型整数值的4种表示方式\n//定义两个 8 位的二进制整数// 注意，计算机底层都是以补码的方式存储数据的int binVal1 = 0b11010100; byte bnVal2= 0B01101001;//以 0 开头的整数值是八进制的整数int octa1Va1ue = 013 ; //0~9组成的十进制整数int decValue = 10;//以 0x 或0X 开头的整数值是十六进制的整数int hexVa1uel = 0x13 ; int hexVa1ue2 = 0XaF;\n\n\n\n\n\n字符型\n字符型的3种表示方式\n//直接指定单个字符作为字符值char aChar = &#x27;a&#x27;; //使用转义字符来作为字符值char enterChar = &#x27;\\r&#x27;; //使用 Unicode 编码值来指定字符值char ch = &#x27;\\u9999&#x27;;\n\n常用acsii编码字符\n\n\n\n字符\nASCII码\n\n\n\na ~ z\n97 ~ 122\n\n\nA ~ Z\n65 ~ 90\n\n\n0 ~ 9\n48 ~ 57\n\n\n\n常见编码积累\n\nWindows CMD 默认编码是：ANSI编码，即GBK编码\nUTF-8 是 Unicode 编码的一种形式，是国际最通用的编码浮点型\n\n\n\n\n浮点型的2种表示方式\n十进制数形式：如5.12 、512.0 、.512 。浮点数必须包含一个小数点\n科学计数法形式：例如 5.12e2 (即 5.12x102)，5.12E2 也是5.12x102\nfloat：单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求\n虽说float只占4个字节，但因为尾数表示方式，表示数值的范围比long还大\ndouble：双精度，精度是float的两倍。通常采用此类型。\n\n\n\n\n小结：整型通常使用int类型，浮点型通常使用double\n\n类型间转换类型间运算及其转换(不含boolean)\n自动类型转换\n自动类型转换发生在不同数据类型之间进行运算时，结果自动提升为容量大的数据类型。\n\n当byte、char、short三种类型之间任何两种，包括自身两种变量做运算时，结果都转换为int型\n\n如：byte + byte = int….、byte + short = int 、char + byte = int 、char + short = int \n\n\n\n\n\n示例代码\n\n//相关练习与测试System.out.println(&quot;*\t*&quot;); \t\t\t//*\t   *System.out.print1n(&#x27;*&#x27; + &#x27;\\t&#x27; + &#x27;*&#x27;);\t //93System.out.println(&#x27;*&#x27; + &quot;\\t&quot; + &#x27;*&#x27;); \t //*\t*System.out.printin(&#x27;*&#x27; + &#x27;\\t&#x27; + &quot;*&quot;); \t //51*System.out.println(&#x27;*&#x27; + (&#x27;\\t&#x27; + &quot;*&quot;));  //*\t*\n\n\n\n强制类型转换\n自动类型转换的逆运算，加强制转换符 ()，注意精度损失，或溢出\ndouble d = 100.0;int i = (int)d;\n\nString与其他类型的运算：String可以和8种基本数据类型变量做+运算，且运算只能是连接运算，运算的结果仍然是String类型\nint number = 100;String numberStr = &quot;学号&quot;;System.out.println(numberStr + number);//输出 &quot;学号100&quot;\n\n\n\n\n无论是自动转换还是强制转换，只能适用数值间的转换，即强制类型转换符()也只适用数值的数据类型\n\n运算符算术运算符\n前至++与后至++\n\n前置++：++i，先自增，后使用\n\n后置++：i++，先使用，后自增\n\n++与–的特点：不改变原数据类型的情况下进行++与–，效率高\n\n无论前置还是后置++还是–，均改变变量，i++ == i = i +1\nshort s1 = 10;s1 = s1 + 1;//编译失败，int不能直接转换为shorts1 = (short)s1 + 1 //正确写法，效率低，截断方式s1++; //编译运行均通过，正确写法，效率高\n\n\n\n/除运算：\n\n无论在什么地方，两个int型相除，结果一定为整型\ndouble result = 12 / 5; // result = 2.0;\n\n\n\n%模运算/取余：\n\n模运算 = 前除后，求余数\njava规定，结果的符号与被模数(前面的数)的符号相同\n\n\n\n\n\n\n模运算式\n结果\n\n\n\n\n0 % 1\n0\n0除以任何数=0，不会存在余数\n\n\n1 % 0\nerror\n0不能作除数，作分母，溢出\n\n\n2 % 1\n0\n整除余0\n\n\n7 % 5\n2\n够除 1余2\n\n\n2 % 3\n3\n不够除：0余2\n\n\n12 % -5\n2\n符号由被模数决定\n\n\n-12 % -5\n-2\n同上\n\n\n赋值运算符\n复合/扩展运算符：\n\n基本原理：num1 +=2; 等价 num1 = num1 + 2;\n\n特点，同++一样，复合赋值运算符同样可以在不改变原数据类型情况下运算，更加高效\nshort s1 = 1; s1 += 2;//编译运行均通过int i = 1; i *= 0.1; //编译运行均通过 输出0\n\n\n\n综合练习\nint n = 10;n += (n++) + (++n); //n = n + (n++) + (++n); n = 10 + 10 + 12\n\n\n\n逻辑运算符\n\n\n\n布尔\n数值(按位与)\n\n\n\n&amp;\nif( true &amp; num++ )，全部执行\n二进制按位与\n\n\n&amp;&amp;\n短路与：if ( true &amp;&amp; num++ )，可得出结果就停止执行，即num++不执行\n\n\n\n\n注意：**&amp;，|，^这三个运算符同为逻辑运算符与位运算符，具体表示哪种，取决于参与运算对象**是数值还是布尔值\n\n位运算符位运算类型\n\n\n位运算符\n含义\n\n\n\n&amp;\n按位与\n\n\n|\n按位或\n\n\n^\n按位异或\n\n\n~\n按位取反\n\n\n&lt;&lt;n\n左移n位右补零\n\n\n&gt;&gt;n\n按位右移n位，补最高位(正数0，负数1)\n\n\n&gt;&gt;&gt;\n无符号右移，空缺位均补零\n\n\ntips：注意，真正对计算机数值数据移位也是移动该数值的补码，如 -5 &lt;&lt; 2结果如下\n\n位运算技巧\n\n示例代码\n\n//1、你能否写出最高效的2 * 8的实现方式？ 2 &lt;&lt; 3  或  8 &lt;&lt; 1//2、交换两个数值变量的几种方式int num1 = 10;int num2 = 20;System.out.println(&quot;num1 = &quot; + num1 + &quot;,num2 = &quot; + num2);//方式一：定义临时变量的方式//推荐的方式//int temp = num1;//num1 = num2;//num2 = temp;//方式二：好处：不用定义临时变量  //弊端：① 相加操作可能超出存储范围 ② 有局限性：只能适用于数值类型//num1 = num1 + num2;//num2 = num1 - num2;//num1 = num1 - num2;/*方式三：使用位运算符\tnum1=(numl ^ num2)^num2;\tnum2=(num2 ^ num1)^num1;*///有局限性：只能适用于数值类型num1 = num1 ^ num2;num2 = num1 ^ num2;num1 = num1 ^ num2;//此时num2 == num1System.out.println(&quot;num1 = &quot; + num1 + &quot;,num2 = &quot; + num2);\n\n\n\n\n\n三元/目表达式\n格式：表达式1 ? 表达式2 : 表达式3\n\n​       含义：若表达式1为真，整个条件表达式返回表达式2的结果反之表达式3的结果\n\n三元运算符可以嵌套使用\n\n若程序使用三元运算符，又可以使用if-else结构，优先选择三元运算符。原因：简洁、执行效率高。\n\n表达式1和表达式2不要求完全一致，但必须可兼容为其中一种类型\n\n对于数值基本数据类型，使用三元运算符还会想使用比较运算符那样进行自动类型转换\nSystem.out.println(true ? 3 : 4.0);//输出3.0，自动转换为double型\n\n\n\n\n比较运算符\n‘==，&gt;，&lt;，&gt;=，&lt;= ‘：粗略来说，比较运算符只能用于数值类型(类型不一定完全相同，底层是数值即可)\n特别说明，’==’ 也可以在引用类型中使用，但也聚焦在数值上(地址值)\n\n流程控制顺序结构分支结构if-else结构\nif：符合则执行\n\nif - else：2选1\n\nif - else if - else ：n选1\n\n\n若if-else结构中只有一条执行语句，则可以省略{}\n\n同时，省略{}的if语句的else总是与最近的未匹配的if匹配\n\n\n\n\nswitch结构\n执行逻辑：根据switch表达式的值，依次匹配各个case中的常量。一旦匹配成功，则执行case结构中语句。若此时没有遇到break语句，则不判断地直接继续向下执行其他case结构中的执行语句，直到遇到break关键字或末尾结束为止。(为更好理解，表达式与case 后语句划上等号进行的判断)\n表达式支持6种数据类型：byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)\n把default语句理解成为一个无条件case语句则一切明了。\n\n//例1：常见方式switch(表达式)&#123;\tcase 常量表达式1 : 语句1;//break;\t…\tcase 常量表达式n : 语句n;//break;\tdefault : 语句n+1;&#125;//输出1，2，3，4int i =1;switch(i)&#123;    case 1:System.out.println(&quot;1&quot;);    case 2:System.out.println(&quot;2&quot;);\t\t    case 3:System.out.println(&quot;3&quot;);\t\t    case 4:System.out.println(&quot;4&quot;);&#125;//例2：多个case共用一条语句//应理解为，每个case的执行语句都为空，且没有break，因此连续执行//不应该理解为内嵌case语句//值为‘A\\B\\C’都执行语句1switch(表达式)&#123;\tcase ‘A’ :\tcase ‘B’ :\tcase ‘C’ : 语句1;break;\t…&#125;\n\n\n编写经验\n\n若多个条件表达式之间是\n\n“互斥“关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓\n\n交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面\n\n有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了\n//例1：class Person &#123;&#125;class Student extends Person &#123;&#125;class Graduate extends Student &#123;&#125;public class InstanceTest &#123;\t\tpublic static void main(String[] args) &#123;\t\tInstanceTest test = new InstanceTest();\t\ttest.method(new Student());\t&#125;\t\tpublic void method(Person e)&#123;\t\t//错误写法,每次执行第一个if        //if(e instanceof Person)&#123;//\t\t\tSystem.out.println(&quot;a graduated student&quot;);//\t\t\tSystem.out.println(&quot;a student&quot;);//\t\t\tSystem.out.println(&quot;a person&quot;);//\t\t&#125;else if(e instanceof Student)&#123;//\t\t\tSystem.out.println(&quot;a student&quot;);//\t\t\tSystem.out.println(&quot;a person&quot;);//\t\t&#125;else if(e instanceof Graduate)&#123;//\t\t\tSystem.out.println(&quot;a person&quot;);//\t\t&#125;       \t\t\t\t//方式一，包含关系应将范围小的在范围大前判断\t\tif(e instanceof Graduate)&#123;            System.out.println(&quot;a graduated student&quot;);            System.out.println(&quot;a student&quot;);            System.out.println(&quot;a person&quot;);        &#125;else if(e instanceof Student)&#123;\t\t\tSystem.out.println(&quot;a student&quot;);\t\t\tSystem.out.println(&quot;a person&quot;);\t\t&#125;else&#123;\t\t\tSystem.out.println(&quot;a person&quot;);\t\t&#125;\t\t\t\t//方式二\t\tif(e instanceof Graduate)&#123;\t\t\tSystem.out.println(&quot;a graduated student&quot;);\t\t&#125;\t\t\t\tif(e instanceof Student)&#123;\t\t\tSystem.out.println(&quot;a student&quot;);\t\t&#125;\t\t\t\tif(e instanceof Person)&#123;\t\t\tSystem.out.println(&quot;a person&quot;);\t\t&#125;\t&#125;&#125;\n\n\n\n\n\n\n\n\n循环结构相关关键字\nbreak：结束当前循环体的循环\n\ncontinue：结束当次循环体当的循环\n\n\nbreak与continue语句后均不能声明执行语句\n\nbreak与continue只作用在离关键字最近的循环体\n\n\n带标签break与continue语句使用：可指定作用在哪一层循环结构\n\n在拟作用循环体前声明标签：label :  for()\n在break或continue语句后追加标签民：break label;\n\nlabel:for(int i=1;i&lt;=4;i++)&#123;    \tfor(int j = 1;j &lt;= 10;j++)&#123;\t\t\tif(j % 4 == 0)&#123;\t\t\t//break;//默认跳出包裹此关键字最近的一层循环。\t\t\t//continue;\t\t\tbreak label;//结束指定标识的一层循环结构             //continue labe1；//结束指定标识的一层循环结构当次循环              &#125;            System.out.print(j);        &#125;\n\n\n\nfor循环for内的变量只在for中有效\n//首次执行：1-&gt;2-&gt;3-&gt;4//循环执行：2-&gt;3-&gt;4，2-&gt;3-&gt;4...//可输入多个语句用逗号“，”for( 1,?,? ; 2 ; 4)&#123;\t3&#125;\n\nwhile循环//首次执行：1-&gt;2-&gt;3//循环执行：2-&gt;3,2-&gt;3...1while(2)&#123;\t3;&#125;\n\ndo-while循环do-while循环至少会执行一次循环体！\n//首次执行：1 - 3 - 4 //循环执行：2 - 3 - 4 1do&#123;\t3;\t4;&#125;while(2);\n\n数组一维数组基本概念\n数组的类型可以是基本数据类型，也可引用数据类型\n\n数组是引用数据类型，必须含new，含方法，含属性(常用length)\n\n数组长度一旦确定，就不可修改\n\n\n声明与初始化含静态初始化，动态初始化\n\n静态初始化：指定数组元素的初始值，由系统决定数组长度 \n动态初始化：指定数组长度(可以是变量)，由系统为数组元素分配初始值\n\n\n\n数组初始化默认值\n整型：0\n浮点型：0.0\nchar型：0或’\\u0000’，而非’0’\nboolean型：false\n用数据类型：null\n\n\n\nint [] ids;//声明ids = new ids[]&#123;1001,1002,1003&#125;;//初始化int[] a = &#123;5,6,7,8&#125;//简化语法格式String[] names = new String[4];//动态初始化，数组长度可以是变量\n\n数组的内存解析待补充，暂时不需要\n多维数组基础概念\n从数组底层的运行机制上来看(线性内存，多维映射)，没有多维数组\n\n把多维数组看成多个一维数组的内嵌，如二维数组是一个一维数组，每个数组元素也是一个数组\n\n\n二维数组使用\n初始化\nint[][] arr1 = new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;//静态初始化String[][] arr2 = new String[2][3];//动态初始化String[][] arr3 = new String[3][];//动态初始化，但不能直接使用，还需指定列//指定列后才可以使用，否则报空指针异常。注意，指定哪个(实例化哪个)用哪个可用arr3[0] = new String[4];\n\n长度\nint[][] arr1 = new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;;arr1.length;//3arr1[0].length;//3arr1[1].length;//2\n\n\n\n\n\n内存解析//规定：二维数组分为外层数组的元素，内层数组的元素int[][] arr = new int[4][3];//外层元素：arr[0],arr[1]等//内层元素：arr[0][0],arr[1][2]等//数组元素的默认初始化值 int[][] arr = new int[4][3];//外层元素的初始化值为：地址值//内层元素的初始化值为：与一维数组初始化情况相同  int[][] arr = new int[4][];//外层元素的初始化值为：null//内层元素的初始化值为：不能调用，否则报错。\n\n   \n常见异常\nArrayIndexOutOfBoundsException：角标越界异常\nNullPointerException：空指针异常\n\n内存结构与变量JVM基本结构\n虚拟机堆(heap)：存放数组、对象实例(含非static属性)\n\n虚拟机栈(stack)：存放局部变量、对象引用\n\n方法区(method area)：存储虚拟机已加载的、类信息、常量、静态变量、编译后的代码\n\n本地方法栈(native method stack)：\n\n程序计数器(PC)：\n\n加载流程：编译 —&gt; 一个或多个字节码文件(class) —&gt; JVM类加载器和解析器进行解析运行\n\n\n\n\n\n\n变量的类型变量的初始化及默认值不同变量的内存结构java中，所有局部变量，在未初始化的情况下使用均会发生编译型错误\n局部变量非在所在范围内(方法)被调用时才创建，而是直到给局部变量赋值后才会创建\n\nJava变量的类型**：局部变量，成员变量\n\n局部变量：形参、方法内变量、代码块内变量\n\n成员变量：类中方法外的变量\n\n实例变量(非static修饰)\n类变量(static修饰)\n\n\n\n\n\n\n不同变量的内存结构\n\n\n变量的默认值\n\n\n声明一个变量后，必须用赋值语句对变量进行显式初始化(赋值)才能使用，使用未初始化的变量，出现编译错误\n注意：对于引用数据类型，有别于基本数据类型。如初始化的数组元素，类中属性等，系统会默认给予初始值。\n\n整型（byte、short、int、long：0）\n浮点型（float、double：0.0）\n字符型（char：0  （或’\\u0000’））\n布尔型（boolean：false）\n引用数据类型（类、数组、接口：null）\n\n  \n\n变量的作用域：其定义所在的一对{ }内 ，变量只有在其作用域内才有效 ，同一个作用域内，不能定义重名的变量\n\n\n掌握局部变量和全局变量： 局部变量： 定义：在函数内定义的变量，包括形式变量，程序块，都属于局部变量。只在函数内有效 存储特性：仅在需要时才开辟内存单元，使用完毕后释放。 注意：程序块是由{}构成的，它的作用范围更加小，程序块里定义的变量只在程序块{}内有效13 全局变量： 定义：函数外定义的变量属于外部变量/全局变量。有效范围从定义位置到当前源文件(.c)结束。 存储特性：在程序的全部执行过程中始终占用存储单元 注意：变量名习惯第首字母用大写 2、理解数据的存储类别含义：指数据在内存中的存储方式 1、变量存储类别的两种方式：静态存储方式和动态存储方式 (都是在内存中开辟空间) 静态存储区：在程序开始执行时就开始分配存储单元，程序执行完才释放。在程序执行过程 中始终占据固定的存储单元，而不是动态地进行分配和释放。如全局变量 动态存储区：仅在使用(函数调用，实参传入等)的时分配空间。代码功能执行完后就释放。 如：形参，自动变量(未加 static 声明的局部变量)，函数调用现场保护和返回地址\n面向对象基础概念\n类：对一类事物的描述，是抽象的，概念上的定义\n对象：某个类的具体实体，也成为实例(instance)，创建一个对象 == 实例化\n属性：类中的成员的变量(field)，调用 对象.属性;\n行为：类的成员的方法(method)，调用 对象.方法()\n类成员：属性、方法、构造器、代码块、内部类\n\n类成员属性\n属性与局部变量异同点\n\n属性：\n直接定义在类的一对{}内\n声明属性可指明其权限：private、public、缺省(默认不写权限)、protected\n\n\n局部变量：\n声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量\n不可使用权限修饰符\n\n\n\nmethod(&quot;Tom&quot;);//传入的为实参public void method(String name)&#123;&#125;//方法参数。形式参数\n\n\n\n方法方法的创建\n创建：public static void method(String name)&#123;&#125;\n\n重载“两同一不同”。与权限修饰符、返回值类型、形参变量名、方法体均无关(按可区分调用角度理解即可)\n\n同一个类、相同方法名\n参数列表不同：参数个数不同，参数类型不同\n\n可变个数形参\n可变个数形参(jdk 5.0)格式：数据类型 ... 变量名,如 String...strs \ntips：当方法不止一个形参且含可变形参时，可变形参只能置于末尾，否则编译不通过(不可区分变量类型)\n//public void show(String...strs,int i); //错误情况，public void show(int i,String...strs);// 正确情况\n\n\n内在逻辑：除与数组作为新参的实参传入格式不一样外(可变形参用逗号)，可变个数形参等价于数组\n\n因此可与数组类型构成重写\n\n\nshow(&quot;Tom&quot;,&quot;Wang&quot;,&quot;Deng&quot;)//可连续传入多个数据，用逗号隔开。show(new String[]&#123;&quot;Tom&quot;,&quot;Wang&quot;,&quot;Deng&quot;&#125;);//同样可以通过数组的方式传入实参public void show(String...strs)&#123;    for(int i = 1;i &lt; stes.length;i++)&#123;//等价与数组        System.out.println(strs[i]);    &#125; &#125;public void show(String name)&#123;&#125;//可以构成重载\n\n\n\nreturn关键字\n无返回值：结束当前方法\n有返回值：结束当前方法且返回指定变量\n\n匿名对象\n匿名对象：new Person().run();\n匿名对象只能调用一次\n\n\n\n方法传递机制Java方法参数传递方式只有一种，值传递！\n\n基本数据类型：变量值\n引用数据类型：地址值\n\n\n\nString与值传递机制\n\n字符串是存储在字符串常量池，是不可变(特性)的字符序列\n\n\n当字符串常量池中已经有相同的字符串，则直接复用执行该字符串的地址\nString s1 = &quot;hello&quot;;System.out.println(s1);//仍输出hello public void method(String str)&#123;    str = &quot;hi~&quot;;&#125;\n\n\nString确实是引用数据类型，值传递也确实在传递s1的地址值，但由于字符串常量池的特性(不可变序列)导致没有改变\n\n由于字符串在java中大量使用，因此JVM特意开辟一个空间专门用于存储字符串，若同时又两个相同的字符串，常量池只记录一个\n\n\n\n\n在字符串常量池创建字符串”hello”，因为字符串底层是通过char[]存储的，确定后是不可变的字符序列\n把“hello”字符串与s1关联起来\n调用方法时，实参传入s1的地址值，并赋值给str\n由于字符串常量池不可变的特性，拟赋值的“hi~~”字符串只能新建一份\n并将“hi~~”字符串与赋值语句中的str关联\n\n\n\n值传递机制例题分析\n  public class Test&#123;    public static void main(String[] args)&#123;        int a = 10;        int b = 10;        //需实现调用method方法后，打印除a=100,b=200,请写出method方法代码        method(a,b);        System.out.println(&quot;a=&quot; + a);        System.out.println(&quot;b=&quot; + b);    &#125;&#125;\n\n\n由于Java基本数据类型无指针操作，若想通过方法调用实现交换两个基本数据类型的值。严格来说是不行的\n//实现方式1：方法内打印，立即终止程序public static void method(int a,int b)&#123;        a = a*10;        b = b*10;        System.out.println(&quot;a=&quot; + a);        System.out.println(&quot;b=&quot; + b);    \tSystem.exit(0);//终止程序&#125;//实现方式2：方法重写/覆盖  public static void method(int a,int b)&#123;    PrintStream ps = new PrintStream(System.out)&#123;          @Override          public void println(String x)&#123;              if(&quot;a=10&quot;.equals(x))&#123;                  x = &quot;a=100&quot;;              &#125;else if(&quot;b=10&quot;.equals(x))&#123;                  x = &quot;b=200&quot;;              &#125;              super.println(x);        &#125;      &#125;;    System.setOut(ps);  &#125;\n\n若想通过调用一个方法实现数组两个元素值交换，则必须通过引用类型作为引导媒介进行交换\n//例：若想通过调用一个方法的形式交换数组中某两个值，只能如下写法public void swap(int[] arr,int i,int j)&#123;\tint temp = arr[i];       arr[i] = arr[j];    arr[j] = temp;&#125;\n\n\n\n\n\n\n封装\n基本概念\n\n高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；\n低耦合 ：仅对外暴露少量的方法用于使用\n\n\n封装性的一些体现：具体体现在面向对象程序设计上\n\n属性私有化(private)、公共(public)方法来调用\n不对外暴露的私有方法\n单例模式…\n\n\n权限修饰符：private、缺省(默认不写权限)、protected、public(从小到大)，可添加到类的成员与类(class)前\n\n类的成员(全支持)：属性、方法、构造器、内部类、代码块\n\n注意：以下权限范围的调用对象是类的成员可以不可被调用，不是类可不可以创建\n常用private与public，需注意是(缺省)与protected的对比\n\n\n\n\n修饰符\n类内部\n同一个包\n不同包的子类\n同一工程\n\n\n\nprivate\nYes\n\n\n\n\n\n(缺省)\nYes\nYes(需注意)\n\n\n\n\nprotected\nYes\nYes\nYes(需注意)\n\n\n\npublic\nYes\nYes\nYes\nYes\n\n\ndf\n\n\n\n\n\n\n\n类(仅public与缺省可用)：缺省情况下可通过import在不同包中调用类\n\n\n\n构造器\n//创建类的对象：new + 构造器Person p = new Person(); //new Person()就是调用构造器\n\n\n如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器\n构造器不可定义返回值，其实构造器的作用就是返回引用的地址值，因此不能自定义\n定义构造器的格式：权限修饰符  类名(形参列表)&#123;&#125;\n一个类中定义的多个构造器，彼此构成重载\n一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器\n一个类中，至少会有一个构造器\n\n\n\n属性赋值的先后顺序：默认初始化 —&gt; 显示初始化 —&gt; 构造器初始化 —&gt; 属性或方法调用赋值\nPerson p = new Person(&quot;Tom&quot;);//name：null - &gt; &quot;Tom&quot;p.setName(&quot;Deng&quot;);//name: &quot;Deng&quot;class Person&#123;    String name;    public Person(String str)&#123;        name = str;    &#125;    public void setName(String str)&#123;        name = str;    &#125;&#125;\n\n\n\nJavaBean：由java语言编写的可重用组件\n\n类是公共的\n有一个公共的无参构造器\n有属性，且含属性对应的get和set方法\n\n\nthis关键字：this理解为“当前创建的对象”，谁掉它，谁就是this\n\n调用的结构：适用于，属性、方法；构造器\n\n属性、方法：解决形参与属性同名时，通过this特指类成员的属性/方法\n\n格式：this.field; 或 this.method();\n\nclass Person&#123;    String name;    public Person(String name)&#123;        this.name = name;//同名解决    &#125;&#125;\n\n\n\n\n\n\n\n\n\n* **构造器**：用于**构造器中调用其他重载构造器**，常用于解决重载构造器代码冗余问题\n\n  * 格式：`this(); //调用空参构造器`\n  * 构造器中**不能**通过this调用构造器产生**死循环回调**\n    1. 构造器中不能通过调用自己\n    1. 同理如类中有n个构造器，则最多有 n - 1构造器中使用了&quot;this(形参列表)&quot;\n  * 构造器中&quot;this(形参列表)&quot;必须声明在当前**构造器的首行**\n  * 构造器内部，**只能使用一次**this调用其他构造器\n\n  //需求：&quot;Person初始化时，需要考虑如下的1,2,3,4...(共40行代码)&quot;;class Person&#123;    \tprivate String name;\tprivate int age;\t\tpublic Person()&#123;        //通过在空参构造器中书写“1,2,3,4...(共40行代码)”\t\tSystem.out.println(info);\t&#125;\t\tpublic Person(String name)&#123;\t\tthis();//其他构造器调用空参构造器逻辑即可\t\tthis.name = name;\t\t\t&#125;    \tpublic Person(int age)&#123;\t\tthis();//其他构造器调用空参构造器逻辑即可\t\tthis.age = age;\t&#125;\t\tpublic Person(String name,int age)&#123;\t\tthis(age);//还可以通过形参指定构造器调用\t\tthis.name = name;\t&#125;&#125;\n\nUML简述\n\n\npackage关键字\n\n为了方便管理项目中的类，提供包的概念，一个包含多个类\n使用package声明类或接口所属的包时，应声明在头部\n\n\n\nMVC设计常用包定义\nModel 模型层：处理数据\n数据对象封装：model.bean/domain\n数据库操作类：model.dao\n数据库：model.db\n\n\nController 控制层：处理业务逻辑\n应用界面相关：controller.activity\n存放fragment：controller.fragment\n显示列表的适配器：controller.adapter\n服务相关的：controller.service\n抽取的基类：controller.base\n\n\nView 视图层： 显示数据\n相关工具类：view.utils\n自定义view：view.ui\n\n\n\n\n\n\nimport关键字\n\n在源文件中显式的使用import结构导入指定包下的类、接口\n\n声明在包的声明和类的声明之间\n\n可以使用”xxx.*”的(通配符)方式，表示可以导入xxx包下的**所有结构 **import java.util.*;\n\n如果使用的类或接口是java.lang包下定义的，则可以省略import结构\n\n如果在源文件中，使用了不同包下的同名的类，则必须至少一个类需要以全类名的方式显示\n//若存在com.test.java1.Account与com.test.java2.Account//想同时使用不同包下的Account类则至少一个使用全类名的方式使用import com.test.java1; class Test&#123;    public static void main(String[] args)&#123;        Account acct = new Account();//使用了com.test.java1        //通过全类名的方式指定使用        com.test.java2.Account acct2 = new com.test.java2.Account();      &#125;&#125;\n\n使用”xxx.*”方式表明可以调用xxx包下的所结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入\n\n子包：如存在存在 com.test.java1与com.test.java1.son，则son属于com.test.java1的子包\n即就算import com.test.java1;若使用com.test.java1.son仍需显式导入\n\n\n\nimport static:导入指定类或接口中的静态结构(非类结构)，而是静态的属性和方法\n//如JDK中System类import static java.lang.System.*;//此时所有System静态的书写和方法都被导入...//此时使用打印语句可以省略Systemout.println(&quot;Hello&quot;);\n\n\n\n\n\n继承\n继承的效果(extends：延展、扩展)：\n若子类继承父类后，子类A中就获取了父类B中声明的所有的属性和方法(包括间接父类)。包括private私有属性和方法。\n注意，子类获取父类属性和方法肯定是全部获取到了，但子类调用父类的属性和方法时受父类的权限修饰符影响。不能直接调用private修是的类成员。因此，继承应理解为子类对父类在调用角度上的扩展，而非代码的直接import，或copy。\n创建子类的对象，在堆空间中，就会加载所有父类中声明的属性和方法\n\n\n继承的作用\n减少了代码的冗余，提高了代码的复用性\n便于功能的扩展\n为之后多态性的使用，提供了前提\n\n\n\n\n\n\n\n继承的使用\n\n继承的格式：class A extends B&#123;&#125;，若B is A == true ，在逻辑上符合继承\n\nA：子类、派生类、subclass\nB：父类、超类、基类、superclass\n\n\nJava的单继承性：一个类只能有一个父类，但可多层单继承。\n\n子类直接继承的父类称为，直接父类\n子类间接继承的父类称为，间接父类\n\n\n\n\n\n\n\nObject类\n\n若没显式的声明一个类的父类的话，则此类继承于java.lang.Object类\n\n\n因此除java.lang.Object类，所有java类都直接或间接的继承于java.lang.Object类\n意味着，所有java类具有java.lang.Object类声明的功能。\n\n\n重写(override/overwrite)：子类继承父类以后，可以对父类中同名同参的方法，进行覆盖操作\n\n只能重写方法，属性无重写之说\n\n若子类与父类声明同名属性，则子类非多态实例化时，按就近原则调用自己(子类)定义的同名属性\n\n\n子类重写的方法的权限修饰符  ≥ 父类被重写方法的权限修饰符\n\n\n子类不能重写，父类中声明为private权限的方法\n\n返回值类型\n\n父类被重写的返回值类型是void，则子类重写的方法的返回值类型只能是void\n父类被重写的返回值类型是A类型(引用数据类型)，则子类重写的返回值类型可以是A类或A类的子类\n父类被重写的返回值类型是基本数据类型(如double)，则子类重写的返回值类型必须是相同(必需是double)\n\n\n子类重写的方法抛出的异常类型 ≤ 父类被重写的方法抛出的异常类型\n\n父类被static修饰的属性和方法不能被重写。但可以在子类中声明同名同参的static属性和方法(但此时不是重写)\n\n\n\n\n\nsuper关键字：指调用父类的结构\n\n调用的结构：类this关键字，同样适用于，属性、方法；构造器\n\nsuper关键字定位父类结构，默认先按直接父类到间接父类一层层往上找，一旦匹配则结束\n\n\n属性，方法相关：\n\n常用于在子类中调用父类同名的属性(属性无重写之说)\n\n常用在子类中调用父类被重写的方法\n\n\n构造器相关：\n\n可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器\n\nsuper(形参列表)”的使用，必须声明在子类构造器的首行\n\nthis与super调用构造器只能二选一，不能同时出现\n\n在子类构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器\n\n在类的多个构造器中，至少一个构造器中使用了”super(形参列表)”，调用父类中的构造器\n\n\n\n子类对象实例化过程\n\n子类对象创建时，系统一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，…直到调用了java.lang.Object类中空参的构造器为止。同时，正因为加载过所有直接或间接父类的结构，所以才可以看到内存中这些父类中的结构，子类对象也才可以调用所有父类的属性和方法\n虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。\n\n\n\n多态\n何为多态：多态是一个行为具有多个不同表现形式或形态的能力\n\n代码语法层面看，多态指，父类的引用指向子类的对象，同时对父类进行虚拟方法调用\n菜鸟教程：多态就是同一个接口，使用不同的实例而执行不同操作\n\n\n多态性的使用：\n\n多态使用书写：父类的引用指向子类的对象，Person p = new Man();\n\n编译期，只能调用父类中声明属性和方法\n\n运行期：\n\n属性：父类的属性(属性无重写即无多态 ; 可通过向下转型调用子类的内容)\n\n方法：父类声明的方法，若方法被子类重写则调用子类重写的方法(虚拟方法调用)\n\n一般多态的使用，主要集中在虚拟方法的调用，因为一般子类继承父类都常重写父类的特定方法。因此粗略归纳多态的使用条件可以有两点\n\n类的继承关系\n方法的重写\n\n\n\n\n\n注意，内存实际上加载了子类特有的属性和方法，但是由于变量声明为父类类型，导致编译时只能调用父类声明的属性和方法\n\n\n\n多态的作用\n\n消除类型之间的耦合关系\n\n可替换性\n\n可扩充性，(自带，归类分配控制器，减少编写重载方法)\n\n接口性\n\n灵活性\n\n简化性\n\n多态的作用与优点不仅几段文字描述，需从面向对象程序设计思想中学习多态的作用\n\n\n\npublic class Animal &#123;\tpublic void eat()&#123;\t\tSystem.out.println(&quot;动物，在进食&quot;);\t&#125;\tpublic void run()&#123;\t\tSystem.out.println(&quot;动物，在跑&quot;);\t&#125;&#125;class Dog extends Animal&#123;\tpublic void eat()&#123;\t\tSystem.out.println(&quot;Dog，在进食&quot;);\t&#125;\tpublic void run()&#123;\t\tSystem.out.println(&quot;Dog，在跑&quot;);\t&#125;&#125;class Cat extends Animal&#123;\tpublic void eat()&#123;\t\tSystem.out.println(&quot;Cat，在进食&quot;);\t&#125;\tpublic void run()&#123;\t\tSystem.out.println(&quot;Cat，在跑&quot;);\t&#125;&#125;\n\n测试类调用\npublic class Test &#123;\tpublic static void main(String[] args) &#123;\t\tAnimal a = new Dog();\t\tactive(a);//输出：Dog，在进食，Dog，在跑\t&#125;    //多态的使用，只需编写一个方法，减少重载方法的编写\tpublic static void active(Animal animal)&#123;\t\tanimal.eat();\t\tanimal.run();\t&#125;    //若不使用多态//\tpublic static void active(Dog dog)&#123;//\t\tdog.eat();//\t\tdog.run();//\t&#125;//\t//\tpublic static void active(Cat cat)&#123;//\t\tcat.eat();//\t\tcat.run();//\t&#125;&#125;\n\n重载与重写的区别\n\n重载：不表现为多态性\n​    对于编译器而言，这些同名方法就成了不同的方法。在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；属于一个编译型行为。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。\n\n重写：表现为多态性\n​    对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这样的方法调用在编译时其无法确定，称为“晚绑定”或“动态绑定”。属于一个运行时行为\n\n\n\n引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚绑定，它就不是多态！”\n\n\n多态的向下转型\n\n多态的Java类可通过 ()进行强制向下转型，通常情况，强转之前先用instanceof 关键字判别一下再转，否则不兼容类型强转会报出 ClassCastException 异常\n向下转型后的对象是子类对象的引用与实例，此时则可调用子类特用的属性和方法\ninstancof关键字：\na instanceof A：判断对象a是否是类A的实例。如果是，返回true；否则返回false。\n若a instanceof A == true，则A类及其A类所有直接间接父类(顶级父类Object)都返回true，多态实例也是实例\n\n\n\n\n\n//使用上述例子的Animal、Dog、Cat类public class Test &#123;\tpublic static void main(String[] args) &#123;\t\tAnimal a = new Dog();        //强制向下转型        Dog dog = (Dog)a;//通过        Cat cat = (Cat)a;//报错                if(a instanceof Dog)&#123;            System.out.println(&quot;向下转型成功，此对象为Dog&quot;);//正常输出        &#125;\t&#125;&#125;\n\n练习\n//问题一：编译时通过，运行时不通过\t\t//举例一：//\tPerson p3 = new Woman();//\tMan m3 = (Man)p3;\t//举例二：//\tPerson p4 = new Person();//\tMan m4 = (Man)p4;\t//问题二：编译通过，运行时也通过//\tObject obj = new Woman();//\tPerson p = (Person)obj;\t\t\t//问题三：编译不通过//\tMan m5 = new Woman();//\tString str = new Date();class Base &#123;\tint count = 10;\tpublic void display() &#123;\t\tSystem.out.println(this.count);\t&#125;&#125;class Sub extends Base &#123;\tint count = 20;\tpublic void display() &#123;\t\tSystem.out.println(this.count);\t&#125;&#125;public class FieldMethodTest &#123;\tpublic static void main(String[] args) &#123;\t\tSub s = new Sub();\t\tSystem.out.println(s.count);//20\t\ts.display();//20\t\t\t\tBase b = s;//多态性\t\t//==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同\t\tSystem.out.println(b == s);//true\t\tSystem.out.println(b.count);//10\t\tb.display();//20\t&#125;&#125;\n\n\n\n\n\nObject\n基础说明\n\njava.lang.Object类是所Java类的根父类，所有类的直接或间接地继承它\n因此Object类中的功能(属性、方法)就具通用性\n\n\n\n\nObject部分功能：无属性，方法 + 构造器\n\nObject类只声明了一个空参的构造器(所有对象实例化都调用)\n\n\nclone()：对象克隆\n\nfinalize()：对象垃圾回收之前被系统自动调用，一般不主动调用\n\ngetClass()：获取对象的类，反射相关\n\nhashCode()：集合相关\n\nwait、notify、notifyAll：线程相关\n\n…\n\n\n\n\n当前重点的Object功能：equals(Object)、toString()\n\n两者重写都可以通过eclipse快速生成\n\nequals 与 == 的使用\n\n\nObject类equals功能：与 == 的作用是相同的，比较两个对象的地址值是否相同\n常重写equals后功能：比较两个引用类型实体内容是否相等\n\n\n\n== ： 是个运算符、可以使用在基本数据类型和引用数据类型\n\n基本数据类型：数值上的相等(类型不一定一样，底层是数值即可、因为会自动类型转换)\n\n引用数据类型：引用的地址值是否相等，前提是比较双方类型可兼容，否则会出现编译型错误\n//1、基本数据类型：数值int i = 10;double d = 10.0;System.out.println(i == d);//输出true//2、引用数据类型：地址值(数值)Person p1 = new Person(&quot;小明&quot;,21);Person p2 = new Person(&quot;小明&quot;,21);System.out.println(p1 == p2);//输出false\n\n\n\nboolean equals(Object)：是个方法，只能使用在引用数据类型中，只要用于(自定义)对比引用数据类型中内容是否相等。常提供子类对equals方法进行重写来实现自定义实体内容相等判别效果\n\nObject类中的equals()源码定义：Object原生功能与 == 的作用是相同的，比较两个对象的地址值是否相同\npublic boolean equals(Object obj) &#123;\treturn (this == obj);&#125;\n\nString、Date、File、包装类等都重写了Object类中的equals()方法：被重写成实体内容是否相等\n    //1、未重写Object equals()方法：等同==，比较两个引用地址值    Person p1 = new Person(&quot;小明&quot;,21);    Person p2 = new Person(&quot;小明&quot;,21);    System.out.println(p1.equals(p2));//输出false        //2、某java提供类重写了equals()实现了比较实体内容是否相等的功能    String s1 = new String(&quot;ABC&quot;);    String s2 = new String(&quot;ABC&quot;);    System.out.println(s1.equals(s2));//输出true        //这里主要通过String new的方式说明源码重写了String的equals方法    //但通过 == 的方式直接创建字符串会因字符串常量池原理而出现== 为true情况    //String s3 = &quot;ABC&quot;;    //String s4 = &quot;ABC&quot;;    //System.out.println(s3 == s4);//输出true        //3、自定义重写equals方法实现自定义类实体内容上的比较    //简陋版    @Override    \tpublic boolean equals(Object obj) &#123;    \t\tif(this == obj)    \t\t\treturn true;    \t\t    \t\tif(obj instanceof Person)&#123;    \t\t\tPerson anObj = (Person)obj;    \t\t\treturn this.name.equals(anObj.name) &amp;&amp; this.age == anObj.age;    \t\t&#125;else&#123;    \t\t\treturn false;    \t\t&#125;    &#125;    System.out.println(p1.equals(p2));//输出true          //eclipse自动生成equals方法(标准高效参考)@Override    public boolean equals(Object obj) &#123;        if (this == obj)            return true;            if (obj == null)            return false;            if (getClass() != obj.getClass())            return false;            Person other = (Person) obj;        if (age != other.age)            return false;        if (name == null) &#123;            if (other.name != null)                return false;        &#125; else if (!name.equals(other.name))            return false;        return true;    &#125;\n\nString，equals方法重写源代码分析\npublic boolean equals(Object anObject) &#123; \t\t//1、若引用地址都一样，则内容肯定一样(重写equals通用代码)   if (this == anObject) &#123;           return true;   &#125;    \t//2、若与String比较的传入类型不是String，则不允许，返回false   if (anObject instanceof String) &#123;           String anotherString = (String)anObject;       int n = value.length;//String底层通过char [] value;数组存储           //3、若字符序列的长度都不一样，则内容肯定不一样           if (n == anotherString.value.length) &#123;               char v1[] = value;               char v2[] = anotherString.value;               int i = 0;               //4、挨个字符比较             while (n-- != 0) &#123;                   if (v1[i] != v2[i])                     return false;                   i++;             &#125;               return true;           &#125;       &#125;     return false;&#125;\n      \n\n\n\neclipse自动生成equals重写源码分析：\n\nSSS\n\n重写equals()方法原则\n\nNull-false：任何情况下，x.equals(null)，永远返回是“false” \n\n类型一致：x.equals(和x不同类型的对象)永远返回是“false”\n\n\n对称性：如果x.equals(y)返回是“true” ，那么y.equals(x)也应该返回是 “true”\n\n自反性：x.equals(x)必须返回是“true”\n传递性：如果x.equals(y)返回是“true” ，而且y.equals(z)返回是“true” ， 那么z.equals(x)也应该返回是“true”\n一致性：如果x.equals(y)返回是“true” ，只要x和y内容一直不变，不管你 重复x.equals(y)多少次，返回都是“true”\n\n\n\n\n\n\ntoString：\n\n\nObject类toString功能：输出类名及其堆空间存储地址(虚拟地址)\nSystem.out.println(引用数据类型)输出语句，底层也是调用toString\n\n\n常重写toString后功能：打印引用类型实体的内容\n\n\n\n\n\n当输出一个对象的引用时，实际上就是调用当前对象的toString()方法\nPerson p1 = new Person(&quot;ABV&quot;, 10);System.out.println(p1); //输出：com.yhd.test.Person@15db9742System.out.println(p1.toString()); //输出：com.yhd.test.Person@15db9742\n\n\n源码分析\n\n//PrintStream.classpublic void println(Object x) &#123;      String s = String.valueOf(x); //主要通过调用了String.valueOf();        synchronized (this) &#123;            print(s);            newLine();        &#125;&#125;//String.classpublic static String valueOf(Object obj) &#123;        return (obj == null) ? &quot;null&quot; : obj.toString();&#125;\n\n\nObject类中toString()的源码定义：输出类名及其堆空间存储地址(虚拟地址)\npublic String toString() &#123;   //类名 + 堆空间存储地址(通过hashCode计算出来数值并转换为十六进制的)   return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());&#125;//注意：Java中的地址都是虚拟地址，操作系统之上的JVM，非真实的物理地址\n\nString、Date、File、包装类等都重写了Object类中的toString()方法\n\n\n\n\n\n\n包装类\n基本含义：为了使基本数据类型的变量具有类的特征。java提供8种基本数据类型的包装类，这些包装类可以完成对应基本数据类型的所有功能操作(都含对应基本数据类型的value属性)。同时，因为封装成类，还可提供各种丰富的方法调用。\n\n自动装箱与拆箱(JDK5.0)：\n\n小结：\n\n基本数据类型 &lt;—&gt; 包装类：自动/手动(构造器)装拆箱\n数值(基本数据+包装) &lt;—&gt; String：调类(包装类/String类)的重载方法，\n\n\n\n​    \n//1、基本数据类型 ——&gt; 包装类    //1、手动装箱：构造器封装/创建    int i = 1;    Integer itg1 = new Integer(i);    Integer itg2 = new Integer(&quot;2&quot;);    //Integer itg3 = new Integer(&quot;2B&quot;);//异常：数字格式/匹配异常    System.out.println(&quot;itg1: &quot; + itg1 + &quot; , itg2：&quot; + itg2);    //2、自动装箱    int j = 1;    Integer j_itg1 = j;    System.out.println(&quot;j_itg1: &quot; + j_itg1);//2、包装类 ——&gt; 基本数据类型(多种类型)    //1、手动拆箱：调用包装类的 xxxValue();方法    Float flt = new Float(1F);    float f = flt.floatValue();    //2、自动拆箱    float f2 = flt;//有了自动拆装箱的便利，基本可以成整体//3、[数值型] —— &gt; String    //方式1：与空串 &quot;&quot; 进行连接运算    String s1 = i + &quot;&quot;;    //方式2：调用String重载的valueOf(XXX xxx) 重载方法    String s2 = String.valueOf(i);//基本数据类型    s2 = String.valueOf(itg1);//包装类/obj多态传入    //方式3：调用包装类的toStrin方法    s2 = itg1.toString();//4、String ——&gt; [数值型]    //方式1：调用包装类parseXxx()方法    String s3 = &quot;123&quot;;    int num1 = Integer.parseInt(s3);//tips：除了boolean，其他有关字符串的装拆箱，与转换若存在字符匹配问题都会报错，需注意\n\n\n\nstatic\n可修饰结构：属性、方法、代码块、内部类\n\n修饰属性\n被static修饰的变量称为静态变量或类变量，该变量将会被同一个类多个对象共享。某个对象改变该静态变量，类中所有对象的该变量斗会被改变(因为共用一份)\n\n静态变量随着类的加载而加载。可以直接通过类名进行调用”类.静态变量“\n\n静态变量的加载要早于对象的创建\n由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中\n静态属性举例：System.out; Math.PI;\n\n\n\n\n\n\n\n修饰方法\n同样随着类的加载而加载，可以通过”类.静态方法“的方式进行调用\n静态方法中，只能调用静态的方法或属性(因为静态方法和属性比对象加载的早)\n同理：在静态的方法内，不能使用this关键字、super关键字(因为这些都是创建对象使用的关键字)\n\n\n非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性\n\n静态属性和方法应用场景\n属性：\n\n当属性是可以被多个对象共享的，不会随着对象的不同而不同的\n类中的常量也常常声明为static\n\n\n方法：\n\n操作静态属性的方法，通常设置为static的\n工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections\n\n\n\n常见应用：单例模式，懒汉式、饿汉式\n\n单例模式：采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。\n\n\n若让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构造器的访问权限设置为private，这样，就不能用new操作符在类的外部产生 类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，只能调用该类的某个静态方法以返回类内部创建的对象， 静态方法只能访问类中的静态成员变量，所以，指向类内部产生的该类对象 的变量也必须定义成静态的。\n\n\n两种单例模式编写\n\n//1、(简单/不安全)懒汉式：什么时候用，什么时候创建class Bank&#123;\tprivate Bank()&#123;&#125;//1、构造器私有化\tprivate static Bank instance;//2、静态化\t\tpublic static Bank getInstance()&#123;//2、静态化\t\tif(instance == null)\t\t\tinstance = new Bank();\t\treturn instance;\t&#125;&#125;//2、饿汉式：不管什么，先创建再说class Order&#123;\tprivate Order()&#123;&#125;//1、构造器私有化\t\tprivate static Order instance = new Order();//2、直接实例化(静态只有一份)\tpublic Order getInstance()&#123;\t\treturn instance;\t&#125;&#125;\n\n\n懒汉式和饿汉式的对比\n饿汉式：\n缺点：对象加载时间过长\n优点：线程安全\n\n\n懒汉式：\n缺点：目前写法线程不安全(两个线程挤入if == null)\n优点：延迟对象的创建\n\n\n\n\n常见单例模式应用场景\n网站的计数器，一般也是单例模式实现，否则难以同步\n应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志 文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加\n数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库 资源\n项目中，读取配置文件的类，一般也只有一个对象。没有必要每次使用配置 文件数据，都生成一个对象去读取\nApplication 也是单例的典型应用\nWindows的Task Manager (任务管理器)就是很典型的单例模式\nWindows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程 中，回收站一直维护着仅有的一个实例。\n\n\n\n\n\nmain方法基本含义：\n\nmain()方法作为程序的入口\nmain()方法也是一个普通的静态方法\nmain()方法可以作为我们与控制台交互的方式（如之前使用Scanner的方式）\n\n将控制台获取的数据传入main函数形参String[] args：\n\neclipse交互：\n\n1\n\n\n\n2\n\n\n\n\n\n​    \n\n控制台交互：\n\n注意：记事本方式javac编译需把 packeage 代码去掉\n\n\n\n\n\n\n\n\n运行时：java 类名 “Tom” “Jerry” “123” “true”\nsysout(args[0]);//“Tom”sysout(args[3]);//“true”  –&gt;Boolean.parseBoolean(args[3]);sysout(args[4]);//报异常\n小结：一叶知秋public static void main(String[] args){//方法体}\n权限修饰符：private 缺省 protected pubilc —-&gt;封装性修饰符：static \\ final \\ abstract \\native 可以用来修饰方法返回值类型： 无返回值 / 有返回值 –&gt;return方法名：需要满足标识符命名的规则、规范；”见名知意”形参列表：重载 vs 重写；参数的值传递机制；体现对象的多态性方法体：来体现方法的功能\n代码块\n代码块使用：如同方法一般的声明位置，格式为&#123;&#125;\n\n代码块的作用：用来初始化类、对象的信息\n\n代码块的修饰：只能用static修饰\n\n静态代码块：\n随着类的加载而执行，且只执行一次\n类中定义了多个静态代码块，则按照声明的先后顺序执行(一般只写一个)\n\n\n非静态代码块\n随着对象的创建而执行，每创建一次执行一次\n多个非静态代码块，则按照声明的先后顺序执行(一般只写一个)\n\n\n\n\n\nstatic修饰类同性质\n静态代码块随类的加载而加载一次，非静态随对象创建而加载\n静态代码块的执行要优先于非静态代码块的执行\n静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构\n非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法\n\n\n\n\n应用场景\n\n静态代码块：常用于不以创建对象而调用方法，即为静态方法提供的看似为”静态构造器“的作用，完成一种静态的初始化(一次性初始化)\n\n//如JDBC连接池public class JDBCUtils &#123;\t\tprivate static DataSource dataSource = null;    //一次性初始化/实例化，DataSource 数据库连接池\tstatic&#123;\t\tInputStream is = null;\t\ttry &#123;\t\t\tis = DBCPTest.class.getClassLoader().getResourceAsStream(&quot;dbcp.properties&quot;);\t\t\tProperties pros = new Properties();\t\t\tpros.load(is);\t\t\t//调用BasicDataSourceFactory的静态方法，获取数据源。\t\t\tdataSource = BasicDataSourceFactory.createDataSource(pros);\t\t&#125; catch (Exception e) &#123;\t\t\te.printStackTrace();\t\t&#125;finally&#123;\t\t\tif(is != null)&#123;\t\t\t\ttry &#123;\t\t\t\t\tis.close();\t\t\t\t&#125; catch (IOException e) &#123;\t\t\t\t\te.printStackTrace();\t\t\t\t&#125;\t\t\t&#125;\t\t&#125;\t&#125;\t//使用DBCP数据库连接池获取数据库的连接\tpublic static Connection getConnection2() throws SQLException&#123;\t\tConnection conn = dataSource.getConnection();\t\tSystem.out.println(conn);\t\treturn conn;\t&#125;\t&#125;\n\n再谈子类对象实例化加载顺序：\n\n无论使静态还是非静态，代码块都在构造器前执行\n由父及子，静态先行\n\npackage com.atguigu.java3;//总结：由父及子，静态先行class Root&#123;\tstatic&#123;\t\tSystem.out.println(&quot;Root的静态初始化块&quot;);\t&#125;\t&#123;\t\tSystem.out.println(&quot;Root的普通初始化块&quot;);\t&#125;\tpublic Root()&#123;\t\tsuper();\t\tSystem.out.println(&quot;Root的无参数的构造器&quot;);\t&#125;&#125;class Mid extends Root&#123;\tstatic&#123;\t\tSystem.out.println(&quot;Mid的静态初始化块&quot;);\t&#125;\t&#123;\t\tSystem.out.println(&quot;Mid的普通初始化块&quot;);\t&#125;\tpublic Mid()&#123;\t\tsuper();\t\tSystem.out.println(&quot;Mid的无参数的构造器&quot;);\t&#125;\tpublic Mid(String msg)&#123;\t\t//通过this调用同一类中重载的构造器\t\tthis();\t\tSystem.out.println(&quot;Mid的带参数构造器，其参数值：&quot;\t\t\t+ msg);\t&#125;&#125;class Leaf extends Mid&#123;\tstatic&#123;\t\tSystem.out.println(&quot;Leaf的静态初始化块&quot;);\t&#125;\t&#123;\t\tSystem.out.println(&quot;Leaf的普通初始化块&quot;);\t&#125;\t\tpublic Leaf()&#123;\t\t//通过super调用父类中有一个字符串参数的构造器\t\tsuper(&quot;尚硅谷&quot;);\t\tSystem.out.println(&quot;Leaf的构造器&quot;);\t&#125;&#125;public class LeafTest&#123;\tpublic static void main(String[] args)&#123;\t\tnew Leaf(); \t\tSystem.out.println();\t\tnew Leaf();\t&#125;&#125;/*输出结果如下：Root的静态初始化块Mid的静态初始化块Leaf的静态初始化块Root的普通初始化块Root的无参数的构造器Mid的普通初始化块Mid的无参数的构造器Mid的带参数构造器，其参数值：尚硅谷Leaf的普通初始化块Leaf的构造器*/\n\n代码块属性赋值执行顺序：系统初始化 —&gt; 显示初始化 / 代码块初始化 —&gt; 构造器初始化 —&gt;外部调用初始化\n\n\nfinal\n可修饰结构：类、方法、变量\n\n\n\n类：此类不能被其他类所继承(无子类)，如：String类、System类、StringBuffer类\n\n\n方法：表明此方法不可以被重写，如：Object类中getClass()\n\n变量：称为是一个常量\n\n属性：\n\n常量赋值的位置：(只能自动化初始化)显式初始化、代码块中初始化、构造器中初始化\n必须初始化，只能使用，不能重新赋值\n\n\n\n\n局部变量/形参：必须初始化，只能使用，不能重新赋值\n\n可以数据类型，也可引用类型\n\n//基本数据类型形参public void method(final int i)&#123;    //i++; //报错，只能使用不能赋值&#125;//引用数据类型形参public void addOne(final Person p)&#123;    p.age++;//通过    p = new Person();//错误&#125;\n\nstatic final 同时修饰结构交集：属性与方法\n\n属性：全局常量(常见)\n方法：静态方法且不可重写\n\n\n\n\n\n抽像类关键字：abstract，可修饰结构，类、方法\n\n修饰类：抽象类\n\n此类虽不能实例化，但一定要有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）\n开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性\n\n\n除此之外，抽象类可以定义一般类的成员，如，属性、方法、代码块…\n\n修饰方法：抽象方法\n\n抽象方法只有声明，没方法体\npublic abstract void eat();\n\n抽象方法只能声明在抽像类中。反之，抽象类中可以没有抽象方法的。\n\n继承抽象类的子类必须强制实现(重写)所有抽象父类中的所有的抽象方法，若子类也是抽象类则不用。\n\n补充说明\n\nabstract不能用来修饰私有方法(子类无法重写)、静态方法、final的方法、final的类\n\n抽线类除不能被实例化外，如下Person p = new Person();符合面向对象类的其他定义操作，如继承，多态，子类自身实例化等等\n//Person p = new Person();//不允许Person p = new Man();//允许，假设class Man extends Person Man m = new Man();//允许\n\n\n\n\n\n\n\n\n\n\n创建抽象类的匿名子类：\n//抽线类Personabstract class Person&#123;    public abstract void eat();    public abstract void run(); &#125;//书写步骤：Person p = new Person()&#123;&lt;回车&gt;&#125;;//创建一个匿名子类对象(其实是通过多态的一种方式实现了匿名实例化)Person p = new Person()&#123;    @Override    public abstract void eat()&#123;            &#125;    @Override    public abstract void run()&#123;            &#125;&#125;;//创建一个匿名子类的匿名对象//书写：method(new Person()&#123;&lt;回车&gt;&#125;);method(new Person()&#123;    @Override    public abstract void eat()&#123;            &#125;    @Override    public abstract void run()&#123;            &#125;    &#125;);\n\n常见应用场景\n\nIO流中设计到的抽象类：InputStream/OutputStream / Reader /Writer。在其内部定义了抽象的read()、write()方法。\n\n模板方法的设计模式\n\n\n\n抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模 板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象 类的行为方式。 \n解决的问题：\n\n当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以 把不确定的部分暴露出去，让子类去实现。\n换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用， 这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽 象出来，供不同子类实现。这就是一种模板模式\n\n\n\n例1\n\npublic class TemplateTest &#123;\tpublic static void main(String[] args) &#123;\t\t// TODO Auto-generated method stub\t\tTemplateSub ts = new TemplateSub();\t\tts.spendTime();\t&#125;&#125;//模板方法设计模式体现abstract class Template&#123;\tpublic void spendTime()&#123;\t\tlong start = System.currentTimeMillis();\t\tcode();//易变部分，不确认部分\t\tlong end = System.currentTimeMillis();\t\tSystem.out.println(&quot;运行时间：&quot; + (end - start) + &quot; ms&quot;);\t&#125;\tpublic abstract void code();&#125;class TemplateSub extends Template&#123;\t@Override\tpublic void code() &#123;\t\t// TODO Auto-generated method stub\t\tfor(int i = 0,j=0;i &lt; 100000;i++)\t\t\tj+=j;\t\tSystem.out.println(&quot;代码执行中...&quot;);\t&#125;&#125;\n\n\n例2\n\n//抽象类的应用：模板方法的设计模式public class TemplateMethodTest &#123;\tpublic static void main(String[] args) &#123;\t\tBankTemplateMethod btm = new DrawMoney();\t\tbtm.process();\t\tBankTemplateMethod btm2 = new ManageMoney();\t\tbtm2.process();\t&#125;&#125;abstract class BankTemplateMethod &#123;\t// 具体方法\tpublic void takeNumber() &#123;\t\tSystem.out.println(&quot;取号排队&quot;);\t&#125;\tpublic abstract void transact(); // 办理具体的业务 //钩子方法\tpublic void evaluate() &#123;\t\tSystem.out.println(&quot;反馈评分&quot;);\t&#125;\t// 模板方法，把基本操作组合到一起，子类一般不能重写\tpublic final void process() &#123;\t\tthis.takeNumber();\t\tthis.transact();// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码\t\tthis.evaluate();\t&#125;&#125;class DrawMoney extends BankTemplateMethod &#123;\tpublic void transact() &#123;\t\tSystem.out.println(&quot;我要取款！！！&quot;);\t&#125;&#125;class ManageMoney extends BankTemplateMethod &#123;\tpublic void transact() &#123;\t\tSystem.out.println(&quot;我要理财！我这里有2000万美元!!&quot;);\t&#125;&#125;\n\n\n场景应用场景\n\n模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的 影子，比如常见的有：\n\n数据库访问的封装\nJunit单元测试\nJavaWeb的Servlet中关于doGet/doPost方法调用\nHibernate中模板程序\nSpring中JDBCTemlate、HibernateTemplate等\n\n\n\n接口\n\n一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又 没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打 印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都 支持USB连接。\n另一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。\n\n接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则 必须能…”的思想。继承是一个”是不是”的关系，而接口实现则是 “能不能” 的关系。 \n接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守\n接口聚焦点在行为，是相同的行为\n同抽象类，接口也体现多态性\n\n\n例1\n\n\n例2\n\n\n\n\n接口的使用\n\n接口使用interface来定义\ninterface Flyable&#123;&#125;\n\n接口内可定义成员：\n\nJDK7前：只能定义全局常量与抽像方法\n全局常量：public static final ，书写时，可省略不写。\npublic static final int MAX;等价于 int MAX \n\n\n抽象方法：public abstract void method();，书写时，可省略不写。\npublic abstract void  method();等价于 void method();\n\n\n\n\n\n\n接口中不能定义构造器的！即接口不可以实例化\n\n接口和类是并列的两个结构，接口通过让类去实现(implements)的方式来使用\n\n实现接口后类同继承效果，拥有了接口定义的成员\n//习题interface A &#123;\tint x = 0;&#125;class B &#123;\tint x = 1;&#125;/**小结：单继承与实现中出现同名属性或方法属性：编译错误方法：类优先原则，调用父类同名方法而非接口同名方法*/class C extends B implements A &#123;\tpublic void pX() &#123;\t\t//编译不通过。类与接口是并列关系，导致属性x是不明确的\t\t// System.out.println(x);\t\tSystem.out.println(super.x);//1\t\tSystem.out.println(A.x);//0，切勿忘记接口属性的public static final 修饰\t\t\t&#125;\tpublic static void main(String[] args) &#123;\t\tnew C().pX();\t&#125;&#125;\n\n\n\n\n\n\n\n\n\n\n同理抽象类\n\n若实现类非抽像类，则必须实现接口所有抽象方法，才可实例化\n若实现类为抽像类，则不要求实现接口的抽象方法\n\n\nJava类可以实现多个接口(弥补了Java单继承性的局限性)\nclass AA extends BB implements CC,DD,EE&#123;&#125;\n\n接口与接口之间可以多继承\ninterface CC entends AA,BB&#123;&#125; \n\n\n\n\n\n接口匿名实现类：同抽象类的匿名实现类创建方式\n\n接口应用场景\n\n代理模式(Proxy)\n\n应用场景：\n\n安全代理：屏蔽对真实角色的直接访问\n远程代理：通过代理类处理远程方法调用（RMI） \n延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象 比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有 100MB，在打开文件时，不可能将所有的图片都显示出来，这样就可以使用代理 模式，当需要查看图片时，用proxy来进行大图片的打开。 \n分类 \n静态代理（静态定义代理类） \n动态代理（动态生成代理类）\nJDK自带的动态代理，需要反射等知识\n\n\n\n\n\n\n\n工厂模式\n\n\n\nJDK8接口特性：还可以定义静态方法、默认方法\n\n接口中定义的静态方法，只能通过接口来调用\ninterface CompareA&#123;    public static method()&#123;        System.out.prnitln();    &#125;&#125;/****************************/class SubClass implements CompareA&#123;        public static void main(String[] args)&#123;        CompareA.method();        new SubClass().method();//错误    &#125;&#125;\n\n\n应用场景：\n\n在标准库中 找到像Collection(接口)/Collections(工具类)或者Path/Paths这样成对的接口和类\n在JDK8中，可以将Collection与Collections工具类提供的静态方法合并一起\n\n\n\n通过实现类的对象，可以调用接口中的默认方法，通过default关键字修饰(public可以省略)\ninterface CompareA&#123;\t//默认方法    public default void method()&#123; //public可以省略         System.out.prnitln();    &#125;&#125;\n\n若实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法\n\n若实现类实现了多个接口，多个接口中存在同名同参数的默认方法，且实现类没重写此方法的情况下，出现编译错误。接口冲突。这就需要我们必须在实现类中重写此方法\n\n在子类(或实现类)的方法中调用父类、接口中被重写的方法\npublic void myMethod()&#123;    method3();//调用自己定义的重写的方法    super.method3();//调用的是父类中声明的    //调用接口中的默认方法    CompareA.super.method3();    CompareB.super.method3();&#125;\n\n​    \n\n\n\n\n内部类\n使用场景：当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的结构又只为该事物提供服务，那么整个内部的完整结构最好使用内部类。\n\n内部类的类型\n/* * 内部类类型，对应变量类型 * 1、成员变量：属性(成员内部类) * \t\t非静态成员变量：属性(非静态内部类) * \t\t静态变量：类变量(静态内部类) * 2、局部变量：方法、构造器、代码块内 * \t\t(局部内部类) */class TestInClass&#123;\t\t//非静态成员内部类\tclass AA&#123;\t\t\t&#125;\t//静态成员内部类\tstatic class BB&#123;\t\t\t&#125;\t\tpublic void testMethod()&#123;\t\tclass EE&#123;//局部内部类\t\t\t\t\t&#125;\t&#125;\t\tpublic TestInClass() &#123;\t\t//局部内部类\t\tclass CC&#123;\t\t\t\t\t&#125;\t&#125;\t\t\t&#123;\t//局部内部类\t\tclass DD&#123;\t\t\t\t\t&#125;\t&#125;&#125;\n\n成员内部类\n\n作为外部类的成员(属性理解)：\n可以调用外部类的结构\n可以被static修饰(外部类-普通类不可以)\n可以被4种权限修饰符修饰(普通类只有缺省和public)\n作为类：拥有普通类的常见情况\n\n\n类内可以定义属性、方法、构造器等\n可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承\n可以被abstract修饰\n\n\n\n\n\n实例化成员内部类\n//创建静态的Dog内部类的实例(静态的成员内部类):Person.Dog dog = new Person.Dog();//创建非静态的Bird内部类的实例(非静态的成员内部类)://Person.Bird bird = new Person.Bird();//错误的Person p = new Person();Person.Bird bird = p.new Bird();\n\n内部类与外部类同名属性调用\nclass Person&#123;\tString name = &quot;小明&quot;;    public void eat()&#123;            &#125;\t//非静态成员内部类\tclass Bird&#123;\t\tString name = &quot;杜鹃&quot;;    \tpublic void display(String name)&#123;\t\tSystem.out.println(name);//方法的形参        System.out.println(this.name);//内部类的属性        System.out.println(Person.this.name);//外部类的属性        //Person.this.eat();    \t&#125;    &#125;&#125;\n\n\n\n局部内部类\n\n在局部内部类的方法中的调用方法的局部变量话,要求此局部变量声明为final的。\n\njdk 7及之前版本：要求此局部变量显式的声明为final的\njdk 8及之后的版本：可以省略final的声明\n\npublic class InnerClassTest &#123;\tpublic void method()&#123;\t\tint num = 10;\t\tclass AA&#123;\t\t\tpublic void show()&#123;\t\t\t\t//num = 20;//错误，num默认为final\t\t\t\tSystem.out.println(num);\t\t\t&#125;\t\t&#125;\t&#125;\t&#125;\n\n\n\n\n\n\n\n   * 成员内部类和局部内部类，在编译以后，都会生成字节码文件。\n\n成员内部类：外部类$内部类名.class\n\n局部内部类：外部类$数字 内部类名.class\n//返回一个实现了Comparable接口的类的对象  public Comparable getComparable()&#123;  \t\t  \t//创建一个实现了Comparable接口的类:局部内部类  \t//方式一：  \tclass MyComparable implements Comparable&#123;  \t\t@Override  \t\tpublic int compareTo(Object o) &#123;  \t\t\treturn 0;  \t\t&#125;  \t\t\t  \t&#125;  \treturn new MyComparable();  \t\t  \t//方式二：  \treturn new Comparable()&#123;  \t\t@Override  \t\tpublic int compareTo(Object o) &#123;  \t\t\t\treturn 0;  \t\t&#125;\t  \t&#125;;\t  &#125;\n\n\n\n\n\n\n\n异常处理异常概述\n在Java语言中，将程序执行中发生的不正常情况称为“异常” 。 (开发过程中的语法错误和逻辑错误不是异常)\n运行中所发生的异常事件可分为：Error、Exception 两种异常\n\nErrorJava虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。\npublic class ErrorTest &#123;\tpublic static void main(String[] args) &#123;\t\t//1、栈溢出：java.lang.StackOverflowError\t\t//通过死循环调用方法使其申请无限个形参(局部变量)，        //由于局部变量是存放在栈空间，所以会引发栈溢出错误\t\t//main(args);\t\t\t\t//2、堆溢出：java.lang.OutOfMemoryError，new出来的内容均存放在堆空间\t\tInteger[] arr = new Integer[1024 * 1024 * 1024];\t&#125;&#125;\n\nException因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。(无特别说明，以下异常均指Exception)\n\n空指针访问\n试图读取不存在的文件\n网络连接中断\n数组角标越界等\n\n异常分类捕获错误最理想的是在编译期间(可预知的异常)，但有的错误只有在运行时才发生。 比如：除数为0，数组下标越界等，因此可分为编译时异常和运行时异常\n异常体系结构异常体系结构均为类，且均为继承关系\n* java.lang.Throwable* \t\t|-----java.lang.Error:一般不编写针对性的代码进行处理。* \t\t|-----java.lang.Exception:可以进行异常的处理* \t\t\t|------编译时异常(checked)* \t\t\t\t\t|-----IOException* \t\t\t\t\t\t|-----FileNotFoundException* \t\t\t\t\t|-----ClassNotFoundException* \t\t\t|------运行时异常(unchecked,RuntimeException)* \t\t\t\t\t|-----NullPointerException* \t\t\t\t\t|-----ArrayIndexOutOfBoundsException* \t\t\t\t\t|-----ClassCastException* \t\t\t\t\t|-----NumberFormatException* \t\t\t\t\t|-----InputMismatchException* \t\t\t\t\t|-----ArithmeticException\n\n\n图示1\n\n\n\nAPI图示1：Exception\n\n\n\nAPI图示2：RuntimeException\n\n\n常见异常运行时异常\n\n\n运行时异常\n含义\n\n\n\nNullPointerException\n空指针异常\n\n\nArrayIndexOutOfBoundsException\n数组角标越界\n\n\nStringIndexOutOfBoundsException\n字符串角标越界\n\n\nClassCastException\n类型转换异常\n\n\nNumberFormatException\n数字格式异常\n\n\nInputMismatchException\n输入不匹配异常\n\n\nArithmeticException\n算术异常\n\n\n//******************以下是运行时异常***************************//NullPointerException@Testpublic void test1()&#123;    //int[] arr = null;    //System.out.println(arr[3]);    String str = &quot;abc&quot;;    str = null;    System.out.println(str.charAt(0));&#125;//IndexOutOfBoundsException//StringIndexOutOfBoundsException@Testpublic void test2()&#123;    //ArrayIndexOutOfBoundsException    //int[] arr = new int[10];    //System.out.println(arr[10]);    //StringIndexOutOfBoundsException    String str = &quot;abc&quot;;    System.out.println(str.charAt(3));&#125;//ClassCastException@Testpublic void test3()&#123;    Object obj = new Date();    String str = (String)obj;&#125;//NumberFormatException@Testpublic void test4()&#123;    String str = &quot;123&quot;;    str = &quot;abc&quot;;    int num = Integer.parseInt(str);&#125;//InputMismatchException@Testpublic void test5()&#123;    Scanner scanner = new Scanner(System.in);    int score = scanner.nextInt();    System.out.println(score);//当输入非int类型时    scanner.close();&#125;//ArithmeticException@Testpublic void test6()&#123;    int a = 10;    int b = 0;    System.out.println(a / b);&#125;\n\n编译时异常//******************以下是编译时异常***************************//如下代码逻辑合语法均没错误//但IDE会提示存在IOException、FileNotFoundException等编译时异常@Testpublic void test7()&#123;\tFile file = new File(&quot;hello.txt&quot;);\tFileInputStream fis = new FileInputStream(file);\t\tint data = fis.read();\twhile(data != -1)&#123;\t\tSystem.out.print((char)data);\t\tdata = fis.read();\t&#125;\tfis.close();&#125;\n\n异常处理机制引言：在编写程序时，经常要在可能出现错误的地方加上检测的代码， 如进行x/y运算时，要检测分母为0，数据为空，输入的不是数据 而是字符等。过多的if-else分支会导致程序的代码加长、臃肿， 可读性差。因此采用异常处理机制。\nJava采用的异常处理机制是将异常处理的程序代码集中在一起， 与正常的程序代码分开，使得程序简洁、优雅，并易于维护。\n抓抛模型\n“抛“：\n\n程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应的异常类的对象，并将此对象抛出。一旦抛出异常对象以后，其后的代码就不再执行。\n关于异常对象的产生\n系统自动生成的异常对象\n手动的生成一个异常对象，并抛出（throw）\n\n\n\n\n“抓“：可以理解为异常的处理方式：① try-catch-finally  ② throws\n\n\ntry-catch-finally语法格式try&#123;\t//可能出现异常的代码&#125;catch(异常类型1 变量名1)&#123;\t//处理异常的方式1&#125;catch(异常类型2 变量名2)&#123;\t//处理异常的方式2&#125;....finally&#123;//可选项\t//一定会执行的代码&#125;\n\n语法说明\ntry-catch-finally中：至少try-catch或try-finally(此时异常属于未处理状态)，至多try-catch-finally。\n使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配。一旦匹配到某一个catch时则不再匹配，随之进入匹配的catch中进行异常的处理，处理完毕后继续执行其后的代码。（没有写finally的情况）\ncatch中的异常类型如果没有子父类关系，则声明次序无关。\ncatch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错\n常用的异常对象的调用的方法\nString  getMessage()：打印异常基本描述信息\nprintStackTrace()：打印异常所涉及的整个堆栈调用信息\n\n\n在try结构中声明的变量，再出了try结构以后，就不能再被调用\ntry-catch-finally结构可嵌套\n\n\nfinally结构说明：\n\nfinally是可选的。\nfinally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中return语句，catch中return语句等情况，finally都会被执行。\n注意：从第2点可以看出，若try-catch中出现return语句，finally是在return之前执行的。因此若finally中出现return语句，肯定是整个方法的return结果\n如像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。\n\n\n小结：\n\n使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。\n\n相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。\n开发中，运行时异常一般只能重新构造代码逻辑，不针异常编写try-catch-finally了(没用)\n对于编译时异常，则一定要考虑异常的处理。\n\n\n\nthrows语法说明语法格式：throws 异常类型1,异常类型2...\n\n“throws + 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！\nthrows的方式只是将异常抛给了方法的调用者。并没有真正将异常处理掉\n\n\n\n子类重写的方法抛出的异常类型小于或等于父类被重写的方法抛出的异常类型\n子类重写的方法的异常处理方式必须与父类处理异常的方式一致。\n\n\ntry-catch-finally真正的将异常给处理掉了。\n\nthrows方式只是将异常抛给了方法的调用者。并没真正将异常处理掉。 \n\n开发中异常处理的选择：\n\n在执行某个方法A时，这个方法内又递归地调用的几个方法，而且这几个被调用的方法都可能存在异常。则建议内部几个被递归调用的方法都采用throws，总的方法A采用try-catch的方式处理。\n\n如下，方法float method 中递归地调用了三个方法，递归地调用指如method1返回值拿去调用method2返回的值又再给method3调用。\n\n\n\n由于这种递归调用的方式，若在method1、2、3中使用try-catch方式处理，则会出现某个被带哦用的方法出现了异常，确实被处理了，代码也继续执行，但返回的值已经不能供下一个方法正常执行。所以在这种递归地调用方法结构上过早地通过try-catch处理调异常并非是件好事。\n\n\n\n\n\n手动抛出异常对象-throwtips：throws是异常处理的一种方式，而throw是创建异常的关键字\n语法要求语法：在方法内throw 异常类\n一般选择抛出Exception(含编译与运行时异常)或运行时异常RuntimeException，或自定义异常类。抛出时通过使用这些异常类的重载构造器(如带参描述)\npublic void method(int i)&#123;    if(i &lt; 0)        throw new Exception(&quot;i &lt; 0&quot;);&#125;\n\n需求场景模拟\n没有通过抛出异常处理\n\n/*\t如下限制Person的age必须&gt;0，若采用传统的if-else无法达到效果\t因为即使断绝了age的赋值，age都会以默认初始化值为0(非法)继续\t执行，无法有效断绝非法数据的执行。如下代码效果*/public class ThrowTest &#123;\tpublic static void main(String[] args) &#123;\t\tPerson p = new Person();\t\tp.setAge(-1);\t\tSystem.out.println(&quot;age：&quot; + p.getAge());\t\tSystem.out.println(&quot;代码继续执行.....&quot;);\t&#125;&#125;class Person&#123;\tprivate String name;\tprivate int age;\t\tpublic void setAge(int age) &#123;\t\tif(age &gt; 0)&#123;\t\t\tthis.age = age;\t\t&#125;else&#123;\t\t\tSystem.out.println(&quot;输入非法数据&quot;);\t\t&#125;\t&#125;\tpublic int getAge() &#123;\t\treturn age;\t&#125;&#125;\n\n\n打印结果如下\n\n输入非法数据age：0代码继续执行.....\n\n\n异常处理方式1：抛出运行时异常，编译的时候setAge()方法无需对异常处理\n\npublic class ThrowTest &#123;\t\tpublic static void main(String[] args) &#123;\t\tPerson p = new Person();\t\tp.setAge(-1);\t\tSystem.out.println(&quot;age：&quot; + p.getAge());\t\tSystem.out.println(&quot;代码继续执行.....&quot;);\t&#125;&#125;class Person&#123;\tprivate String name;\tprivate int age;\t\tpublic void setAge(int age) &#123;\t\tif(age &lt; 0)&#123;\t\t\tthrow new RuntimeException(&quot;运行时异常：非法年龄输入&quot;);\t\t&#125;\t\tthis.age = age;\t&#125;\tpublic int getAge() &#123;\t\treturn age;\t&#125;&#125;\n\n\n打印结果如下\n\nException in thread &quot;main&quot; java.lang.RuntimeException: 运行时异常：非法年龄输入at com.test.java.Person.setAge(ThrowTest.java:19)at com.test.java.ThrowTest.main(ThrowTest.java:7)\n\n\n异常处理方式2：抛出异常，编译的时候setAge()会检查到异常，需即刻对异常进行处理\n\npublic class ThrowTest &#123;\tpublic static void main(String[] args) &#123;\t\tPerson p = new Person();\t\ttry &#123;\t\t\tp.setAge(-1);\t\t\tSystem.out.println(&quot;age：&quot; + p.getAge());\t\t\tSystem.out.println(&quot;代码继续执行.....&quot;);\t\t&#125; catch (Exception e) &#123;\t\t\te.printStackTrace();\t\t&#125;\t&#125;&#125;class Person&#123;\tprivate String name;\tprivate int age;\t\tpublic void setAge(int age) throws Exception &#123;\t\tif(age &lt; 0)&#123;\t\t\tthrow new Exception(&quot;运行时异常：非法年龄输入&quot;);\t\t&#125;\t\tthis.age = age;\t&#125;\tpublic int getAge() &#123;\t\treturn age;\t&#125;&#125;\n\n\n打印结果如下\n\njava.lang.Exception: 运行时异常：非法年龄输入at com.test.java.Person.setAge(ThrowTest.java:24)at com.test.java.ThrowTest.main(ThrowTest.java:8)\n\n自定义异常类\n如何自定义异常类？\n继承于现有的异常结构：常用RuntimeException 、Exception\n提供全局常量：serialVersionUID，用于序列化传输时唯一标识当前类\n提供重载的构造器\n\n\n\npublic class MyException extends Exception&#123;\tstatic final long serialVersionUID = -7034897193246939L;\tpublic MyException()&#123;\t\t\t&#125;\tpublic MyException(String msg)&#123;\t\tsuper(msg);\t&#125;&#125;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJava基础类库JUnitTest\nJUnitTest单元测试类：\n\n快捷步骤：\n\n直接在想要测试的方法上添加@Test注解，通过eclipse提示导入相关内容\n\n\n详细步骤与细节\n\n中当前工程 - 右键择：build path - add libraries - JUnit 4 - 下一步\n单元测试类要求：public、供公共的无参的构造器\n单元测试方法的要求：public、无返回值，无形参\n单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;\n左键双击单元测试方法名，右键：run as - JUnit Test\n\n\n\n执行结果没任何异常：绿条\n执行结果出现异常：红条\n\n\n\nSystemSystem.exit(0);//终止JVM的执行\n\n\n\n\n\nArrays\n操作数组的工具类：有封装好的快排，二分排等操作(可查看源码学习)\n\n\n\nmethod\nmeaning\n\n\n\nboolean equals(int[] a,int[] b)\n判断两个数组是否相等。\n\n\nString toString(int[] a)\n输出数组信息\n\n\nvoid fill(int[] a,int val)\n将指定值均填充到数组之中\n\n\nvoid sort(int[] a)\n对数组进行排序\n\n\nint binarySearch(int[] a,int key)\n对排序后的数组进行二分法检索指定的值\n\n\n…..详细查看API\n\n\n\n\n\nimport java.util.Arrays;//如一些二分查找等都有封装好/*boolean equals*/\n\n\n\nScannerimport java.util.Scanner;\n\n\n\nMathMath.random();//[0.0,1.0)Math.PI;long Math.round(double d)//四舍五入取整\n\n\n\n\n\n\n\n\n\n复用：方法，继承\n可扩展性：继承，多态(自带，归类分配控制器，减少编写重载方法)\n解耦：封装\n封装：\n继承：复用，易扩展\n多态性：提高代码的通用性，如Object 的equals方法\n有关源码的题包装类相关缓存@Testpublic void test3() &#123;    Integer i = new Integer(1);    Integer j = new Integer(1);    System.out.println(i == j);//false    Integer m = 1;    Integer n = 1;    System.out.println(m == n);//true        //注意，如果数值不一样是肯定不一样的    Integer a = 210;    Integer b = 211;    System.out.println(a == b);//false    Integer x = 128;    Integer y = 128;    System.out.println(x == y);//false&#125;//  Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],//  保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在//  -128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率//  Integer m = 1; //-128~127范围内相当于同一个数组地址//  Integer n = 1;//  Integer x = 128;//相当于new了一个Integer对象//  Integer y = 128;//相当于new了一个Integer对象\n\nequals重写逻辑包装类在进行equals比较时，首先会比较两个的数据类型、不一致返回false、一致后再比较数值\n常用DOS命令\n快速进入特定路径下的命令窗体：在拟进入文件路径的地址栏中直接输入cmd\n复制与黏贴\nwin7：任意位置右键“标记”，选中要复制的内容，再点击右键，剪贴板里面了\nwin10：左键直接选中，然后右键单击一下就到剪贴板里面了\n\n\nD: 切换盘符直接输入“盘符”\nmd：mkdir make director创建目录\ncd：change directory切换目录\ncd：相对路径或绝对路径\n**cd ..**：回到上级路径\ncd \\ ：直接回到根路径\n. ：一个点，代表当前路径。（常用与配置环境变量）\n\n\ncls：清屏\ndir directory：查看当前路径文件目录：\nexit：退出DOS命令窗口\nrd：只能删除空文件夹：\nde：删除文件目录内所有内容\necho content(内容)&gt;1.doc：输入流\n\n","tags":["JavaSE"]},{"title":"JavaWeb总结","url":"/2021/03/24/JavaWeb%E6%80%BB%E7%BB%93/","content":"JavaWeb技术概述万维网\nWWW是World Wide Web简称，目的为了实现全世界能利用因特网进行文档交换，是一个大规模、分布式、联机式的信息储藏所。\nWeb是基于客户/服务器的一种B/S体系结构，其基本工作原理为，客户使用浏览器向Web服务器发出请求，服务器响应客户请求，向客户送回所请求的网页，客户在浏览器窗口上显示网页的内容。\n组成Web体系的三大结构\nWeb服务器\nWeb客户端\n通信协议\n\n\n\nWeb服务器基本概念\nWeb服务器是向浏览器提供服务器的程序\nWeb服务器应用层使用HTTP协议，信息内容采用HTML，信息定位使用URL\n最常用的Web服务器是Apache服务器，开源、免费、Linux/Windows。另一种较为流行的Web服务器为Microsoft公司专门为Windows平台开发的IIS服务器\nTomcat也是一种常用的Web服务器，它具有Web服务器功能同时也是Web容器，可允许Servlet和JSP\n\nTomcat&amp;Sevlet/JSP/JDK版本对应关系\n当前企业常用Tomcati的版本 7、8\nServlet2.5版本是现在世面使用最多的版本**(xml 配置**)\nServlet3.0 之后就是注解版本的 Servlet 使用。\n\n\n\n其他Web服务器\nJboss：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）学习门槛高，不适合入门\nGlassFish： 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业(收费)服务器，达到产品级质量（应用很少）\nResin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持， 性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。 \nWebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范， 而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）\n\nWeb客户端​    浏览器主要功能想服务器发送请求与对响应信息进行解析、并正确显示出来\n通讯协议HTTP\nHTTP协议成为超文本传输协议，规定了Web客户与服务器之间如何通信\n是一个基于请求-响应的协议，是无状态的\n主要通信流程\n在浏览器输入网址，按下Enter键\n浏览器建立一个HTTP请求信息，使用DNS获得网址的IP地址\n通过IP地址与服务器建立一条TCP连接\n通过这条TCP连接将HTTP信息发送给服务器，并从服务器接收回一条信息\n\n\n\nURL&amp;URIURL称为统一资源定位符，用于在Internet中定位某个主机的资源，主要四部分组成\n\n协议名称：如HTTP、FTP、TELNET、MAIL等\n主机域名或IP地址：www.baidu.com、localhos、127.0.0.1等\n[端口号]：Web应用的80端口等，可忽略不写\n资源名称：资源在服务器上的相对路径和名称，如/index.html\n\nhttps:&#x2F;&#x2F;www.baidu.com&#x2F;https:&#x2F;&#x2F;www.baidu.com&#x2F;helloweb&#x2F;hello.jsp\n\n\nURI，URN\nURL：https://www.baidu.com/helloweb/hello.jsp\nURI：helloweb/hello.jsp\n\n\n\n服务器资源资源类型Web服务器处理客户端请求有两种方式\n\n静态请求：客户端所需请求的资源不需要进行任何处理，直接作为HTTP响应返回。对应的资源称之为静态资源\n动态请求：客户端所需请求的资源需要在服务器委托给一些服务器端技术进行处理，如CGI、JSP、ASP等，然后将处理结果作为HTTP响应返回，对应地也成为动态资源\n\n动态文档技术动态文档是指文档的内容可根据需要动态生成，同时又分以下两种技术：\n\n服务器端动态文档技术：\n\n模块化技术：CGI、Servlet—java解决方案\nWeb文档嵌入式脚本：ASP、PHP、JSP\n\n\n客户端动态文档技术\n\nJavaScript\n\n\n\nTomcat安装\n下载Tomcat，官方链接\n\n\n将下载的安装包直接解压到指定目录即可\n\n找到Tomcat目录下的bin目录，双击startup.bat文件即可启动\n\n在浏览器输入输入地址 http://localhost:8080 ，若出现tomcat首页则表示安装成功\n\n\n\n目录介绍\nbin：用与存放Tomcat 服务器的可执行程序\nconf：用与存放Tocmat 服务器的配置文件\nlib：用与存放Tomcat 服务器的jar 包，对应javaEE的实现规范的实现类\nlogs ：用与存放Tomcat 服务器运行时输出的日志信息\ntemp：用与存放Tomcdat 运行时产生的临时数据\nwebapps：用与存放部署的Web工程，根目录下，一个文件夹一个Web工程\nwork：是Tomcat工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化的目录\n\n启动与关闭启动方式\nTomcat目录下的bin目录，双击startup.bat文件即可启动，或以命令行方式在路径下执行命令startup\n用命令行方式在路径下执行命令catalina run\n\n\n\nstartup命令的源码解析：为了可以在任意目录下启动 Tomcat 服务器，可以选择把bin目录添加到 path下，此时在任意目录下通过startup命令启动Tomcat服务器会提示如下错误，即要求设置 CATALINA_HOME 这个环境变量\nThe CATALINA_HOME environment variable is not defined correctlyThis environment variable is needed to run this program\n\n\n阅读startup.bat批处理文件源码可知，CATALINA_HOME环境变量指向为Tomcat安装的根目录(bin目录的上一级目录)\n\nstartup.bat 文件，实际调用的是catalina.bat文件\n\n通过命令行窗口直接输入catalina, 提示如下，表示catalina命令的可选参数\ncommands:debug             Start Catalina in a debuggerdebug -security   Debug Catalina with a security managerjpda start        Start Catalina under JPDA debuggerrun               Start Catalina in the current windowrun -security     Start in the current window with security managerstart             Start Catalina in a separate windowstart -security   Start in a separate window with security managerstop              Stop Catalinaversion           What version of tomcat are you running?\n\n常用的catalina命令选项如下\n\nrun：在 catalina 同一个命令行窗口下启动服务器. \nstart：开启一个新窗口启动服务器\nstop：关闭服务器\n\n\n\n\n\n关闭方式\n方式一：点击tomcat 服务器窗口右上角X关闭\n方式二：把Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C \n方式三：找到Tomcat的bin目录下的 shutdown.bat 双击，或cmd进入该目录执行shutdown，就可以停止 Tomcat 服务器\n\n常见错误首先，建议通过CMD命令行的方式进入到bin目录下，通过命令行的方式执行catalina run命令，则会有错误提示信息显示\n\n双击startup.bat出现黑窗口一闪而过，JAVA_HOME环境变量没有配置正确\n\n修改默认端口号\n找到Tomcat目录下的conf目录，找到 server.xml\n\n修改如下标签下的port属性端口号信息即可\n&lt;Connector port=&quot;7777&quot; protocol=&quot;HTTP/1.1&quot;\tconnectionTimeout=&quot;20000&quot;\tredirectPort=&quot;8443&quot; /&gt;\n\n修改后需重启Tomcat服务器才能生效\n\n\nWeb工程部署Tomcat目录下的webapps目录：存放部署的Web工程，一个文件夹一个Web工程。如默认tomcat含以下5个web应用。\n\n\n无论静态还是动态资源，Tomcat中web工程部署均有两种\n\n拷贝到webapps下的指定工程目录中\n通过配置tomcat xml文件实现映射式的部署\n\n静态资源部署\n方式一：把 web 工程的目录拷贝到 Tomcat的webapps/web目录下\n\n在webapps目录下新建web应用的文件夹，如helloWeb\n\n将web应用内容拷贝的该文件夹内\n\nhttp://localhost:8888 对应webapps的根目录，url与webapps目录的路径关系如下\n\n稍等十几秒后，一般tomcat会自动重新部署。若没有效果，则可以尝试重启tomcat服务器\n\n\n\n\n方式二：配置文件映射部署，即项目任意路径部署\n\n找到Tomcat下的 conf目录\\Catalina\\localhost\\ 根目录下,创建如下xml配置文件，一般一个工程一个xml文件。(旧版本的tomcat可能不存在上述目录，没有就自己建立这个目录结构即可)\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Context path=&quot;/abc&quot; docBase=&quot;E:\\book&quot; /&gt;\n\n\n.xml文件的文件名：tomcat9测试，xml文件名才是决定访问(url)根路径\npath：表示工程的访问(url)路径，如/abc\ndocBase：表示你的工程目录在磁盘下的路径\n\n\n一般修改添加或删除，tomcat中的web应用内容，稍等十多秒会自动重新部署。若没有效果，则可以重启tomcat服务器使其部署\n\n\n\n\n动态资源部署Web工程目录Servlet 规范中定义了 web 应用程序的目录层次\n|--Web开发项目\t\t      |----src\t\t\t&#x2F;&#x2F;存放源代码    ---------------------以上为常见IDE开发时提供的目录结构----    ---------------------以下为Servlet规范目录结构----------    |----WEB资源根目录\t &#x2F;&#x2F;约定：但不规定目录名(eclipse WebContent,IDEA web)    |-------WEB-INF\t\t&#x2F;&#x2F;约定：存放供服务器访问的资源(浏览器无法直接访问)            classes\t\t&#x2F;&#x2F;约定：存放编译后.class文件            web.xml\t\t&#x2F;&#x2F;约定：整个动态web工程的配置部署描述文件，配置如(servlet、filter...)组件                         [apache-tomcata安装根目录]\\webapps\\docs\\WEB-INF 中复制过来            lib\t\t\t&#x2F;&#x2F;约定：存放web应用程序用到的jar文件\t    |----css\t\t\t    |----img\t\t\t\t\t         ...    |----index.html\n\n步骤如下tips：以下以eclipse环境下，手动创建普通java项目，并手动拷贝部署到tomcat的过程，很少使用。拟在突出web工程目录的结构与作用。\n\n在 src下新建一个 Person \npublic class Person &#123;\tpublic String getPersonInfo()&#123;\t\treturn &quot;person info...&quot;;\t&#125;&#125;\n\n手工的 Person 类对应的编译后的.class 文件(在工程的bin目录下，含包目录结构均需复制)复制到 classes 目录下\n\n在 WebContent 目录下新建一个 JSP 文件\n&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;    pageEncoding=&quot;ISO-8859-1&quot;%&gt;&lt;% \tPerson person = new Person();\tSystem.out.print(person.getPersonInfo()); %&gt;\n\n把 WebContent 目录复制到 Tomcat 的 webapps 目录下, 并改名为: helloworld\n\n在浏览器的地址栏中输入: http://localhost:8080/helloworld/hello.jsp 即可看到命令行的打印信息\n\n\n半自动化工程部署tips：基于eclipse开发环境\n\n可以通过修改src默认的输出目录达到自动把编译好的 class 放到 classes 目录下\n通过方式二，实现开发目录与实际部署目录的映射\n\n默认工程及首页\n当地址栏输入访问地址没有工程名地址：http://ip:port/  ，默认访问的是 ROOT 工程。 \n当地址栏输入访问地址只有工程名地址： http://ip:port/工程名/，默认访问工程内的 index.html 页面\n\nIDEA整合Tomcat整合Tomcat服务器\n进入IDEA如下设置\n\n\n配置你的 Tomcat 安装目录，可以添加多个不同版本的tomcat\n\n\n\n创建动态Web工程\n2020版本后的IDEA，建立非Maven管理的web项目需先建立一个普通的java Model。右键Add Framework Support\n(若选择使用maven则可以在建立model时选择java enterprise)\n\n\n勾选Web Application ，勾选Create web.xml\n\n\n\n\n创建成功如下图，(一般手动di在WEB-INF目录下建立一个lib目录)\n\n\n\n启动Web工程\n每当创建一个web工程时，IDEA会对应Web工程创建一个Tomcat实例\n\n\n确认你的 Tomcat 实例中有你要部署运行的 web 工程模块\n\n\n为了方便使用，一般将tomcat name、URL、Application context三者设置为与项目名称一致。则能实现启动项目后，自动调用浏览器且访问的就是Web工程\n\n\n\n\nServer窗口下的URL与Deployement窗口下的Application context的区别\n\nServer — URL：web应用启动后，IDEA自动调用浏览器访问的地址(不一定是web工程访问地址)\nDeployement — Application context：当前web工程的根目录访问地址，即在web.xml配置servlet的隐射地址时候斜杠/就是指该路径\n\n\n\n如下图显示设置\nURL设置为：http://localhost:8080/abc\nApplication context设置为：http://localhost:8080/06_helloServlet/\n\n\n\n\n\n当项目启动后，IDEA自动调用浏览器访问的地址是：http://localhost:8080/abc。因为实际web应用的访问地址是application context决定的，所以找不到页面如下提示\n\n\n当访问application context 设置的url即可访问到web应用\n\n\n\n\n\n\nIDEA中、启动、debug启动、停止、与重启按钮说明\n\n\n\nIDEA中默认启动web项目的效果\n\n\n重启选项说明\n\n\n\nIDEA中修改端口号\n配置资源热部署热部署：正在运行状态的应用,修改了他的源码之后,在不重新启动的情况下能够自动把增量内容编译并部署到服务器上\n\nIDEA创建Servlet\n检查项目是否添加了servlet-api.jar与jsp-api.jar\n\n在指定包下右键—&gt;New—&gt;Servlet创建即可\n\n\n\nIDEA的部署逻辑IDEA整合Tomcat后部署逻辑\ntips：一般的整合Tomcat的IDE，如eclipse、IDEA逻辑都类似\n\n编写如下测试代码\npublic class TestGetRealPath implements Servlet &#123;    @Override    public void init(ServletConfig servletConfig) throws ServletException &#123;        String path = servletConfig.getServletContext().getRealPath(&quot;/&quot;);        System.out.println(&quot;path = &quot; + path);    &#125;    //@Override method....&#125;\n\n在整合了Tomcat的IDEA中启动Web工程，可以从service信息打印窗口看到如下信息\n\n\ngetRealPath(“/“)输出的内容其实是web部署的实际物理位置，IDEA会将部署的Web应用下的根目录(web目录)的所有内容拷贝到 创建项目物理机地址\\out\\artifacts\\项目工程名目录下，这个目录就是被IDEA认为的web应用部署后源代码的真实路径(非运行路径)**，并非开发目录。因此getRealPath(“/“)输出就是这个路径。并且是与开发代码时web下目录结构是完全对应**的。\n\n\nWeb项目编译后真正运行.class文件则被复制到C:\\Users\\[用户名]\\AppData\\Local\\JetBrains\\[IntelliJIdea版本]\\tomcat\\...目录下。\n\n含Web应用源码编译后的.class文件\n含.jsp文件对应的_jsp.java源码，以及编译后的.class文件\n含用于Tomcat中完整的配置与项目部署映射所有需要的配置文件。目的是使能在IDEA中直接设置一些有关Tomcat的配置生效，如设置端口号，IDEA自定义的项目映射部署等….\n\n\n\nServletServlet及其容器\nServlet：Servlet是用Java编写的服务器端程序，主要功能在于交互式地浏览和生成动态Web内容。\n狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。\n\n\n\nServlet是 JavaEE 规范之一，规范就是接口。\nServlet是JavaWeb 三大组件之一。(Servlet 程序、Filter 过滤器、Listener 监听器)\nServlet是运行在服务器上的一个 java 小程序，可以接收客户端发送过来的请求，并响应数据给客端。\n\n\n\n\nServlet 容器:\nServlet容器为JavaWeb应用提供运行时环境，它负责管理Servlet和JSP的生命周期，以及管理它们的共享数据\n\n运行 Servlet、JSP、Filter 等的软件环境. \n创建 Servlet, 并调用 Servlet 的相关生命周期方法。\n\n\n\nServlet接口实现\n编写一个类去实现 Servlet 接口\n编写实现service方法，处理请求，并响应数据 \n在web.xml中设置Servlet接口映射\n&lt;servlet&gt;&lt;/servlet&gt;\n&lt;servlet-mapping&gt;&lt;/servlet-mapping&gt;\n\n\n\n\n\n实现接口：tips，IDEA若无法识别Servlet接口则需要手动导入servlet-api.jar包，一般在tomcat安装路径下lib目录中可以找到\npublic class HelloServlet implements Servlet &#123;    //建立一个空参构造器    public HelloServlet()&#123;        System.out.println(&quot;HelloServlet实例化成功&quot;);    &#125;    @Override    public void init(ServletConfig servletConfig) throws ServletException &#123;        System.out.println(&quot;init...&quot;);    &#125;    @Override    public ServletConfig getServletConfig() &#123;        System.out.println(&quot;getServletConfig&quot;);        return null;    &#125;    @Override    public void service(ServletRequest servletRequest, ServletResponse\t        servletResponse) throws ServletException, IOException &#123;        System.out.println(&quot;hello service&quot;);    &#125;    @Override    public String getServletInfo() &#123;        System.out.println(&quot;getServletInfo&quot;);        return null;    &#125;    @Override    public void destroy() &#123;        System.out.println(&quot;destroy&quot;);    &#125;&#125;\n\n设置web.xml接口映射：&lt;servlet&gt;标签与&lt;servlet-mapping&gt;映射标签\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;         version=&quot;4.0&quot;&gt;       &lt;servlet&gt;        &lt;!--servlet-name 标签为Servlet程序自定义一个别名(一般是类名) --&gt;        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;        &lt;!--servlet-class 是 Servlet 程序的全类名--&gt;        &lt;servlet-class&gt;com.test.servlet.HelloServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;        &lt;!--servlet-mapping 标签给 servlet 程序配置映射的访问地址--&gt;    &lt;servlet-mapping&gt;        &lt;!--servlet-name 标签指定设置映射的Servlet程序别名--&gt;        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;        &lt;!--url-pattern 标签配置访问地址 --&gt;        &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;                &lt;!--\t\t&lt;url-pattern&gt;标签内容必须以斜杠打头\t\t /   斜杠 ：表示地址为：http://ip:port/工程路径 \t\t /hello  : 表示地址为：http://ip:port/工程路径/hello \t\t--&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;\n\n\n小结：\n\n&lt;url-pattern&gt;标签内容必须以斜杠打头\n若使用通配符只有两种使用方式\n.扩展名，如.html表示所有html结尾的文件均由该servlet受理\n/*，所有接口调用都受理\n\n\n\n\n常见错误：\n\nurl-pattern 中配置的路径没有以斜杠打头\nservlet-name 配置的值不存在\nservlet-class 标签的全类名配置错误\n\n\n\n\n最终效果\n\n\n\nServlet生命周期Servlet 生命周期：以下方法均由Serlvet容器负责调用. \n\n构造器: 只被调用一次，对指定Servle进行首次访问时创建 Servlet 的实例 (Serlvet 的单实例)\ninit：只被调用一次，在创建好Servlet实例后立即被调用，用于初始化当前 Servlet. \nservice：被多次调用，每次请求都会调用 service 方法. 实际用于响应请求的. \ndestroy：只被调用一次，在当前 Servlet所在的 WEB 应用被卸载前调用，用于释放当前 Servlet 所占用的资源. \n\n\n\n\nServlet引擎检查是否已经装载并创建了该Servlet的实例对象。如果是，则直接执行第④步，否则，执行第2步。\n装载并创建该Servlet的一个实例对象：调用该 Servlet 的构造器\n调用Servlet实例对象的init()方法。\n创建一个用于封装请求的ServletRequest对象和一个代表响应消息的ServletResponse对象，然后调用Servlet的service()方法并将请求和响应对象作为参数传递进去。\nWEB应用程序被停止或重新启动之前，Servlet引擎将卸载Servlet，并在卸载之前调用Servlet的destroy()方法。\n\n\n\nload-on-startup标签: 可以设置Serlvet被创建的时机，若为负数, 则在如上普通生命周期般，要被调用，才会实例化与初始化，若为0或正数, 则在当前 WEB 应用被Serlvet 容器加载时(启动web应用时，不用调用)就会创建实例，且数组越小越早被创建。\n&lt;servlet&gt;\t&lt;!-- .... --&gt;\t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;\n\n相关接口与类\ninit()：ServletConfig\nservice()：ServletRequest , ServletResponse\n\n以讲解实现servlet接口后出现的相关接口与类展开学习servlet\nServletConfig基本概念\n每个 Servlet 程序创建时，就创建一个对应的 ServletConfig 对象。\nServlet 程序默认是第一次访问的时在init()中创建\n\n作用\n获取Servlet程序的别名，即获取标签&lt;servlet-name&gt;的值\n获取初始化参数，即获取标签&lt;init-param&gt;的键值信息 \n获取 ServletContext\n\nAPI由服务器供应商提供实现，封装Servlet 程序的配置信息，并可获取ServletContext对象\njavax.servlet  Interface ServletConfig\n\nAll Known Implementing Classes: \nGenericServlet, HttpServlet \n\n\n\nMethod Summary\nString getInitParameter(String name) ：获取初始化参数，即标签&lt;init-param&gt;内配置的键值对\nEnumeration getInitParameterNames()  ：获取所有参数名组成的Enumeration对象\nString getServletName() ：获取Servlet程序的别名，即获取标签&lt;servlet-name&gt;的值\nServletContext getServletContext()：获取ServletContext对象\n\n\n\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;         version=&quot;4.0&quot;&gt;    &lt;servlet&gt;        &lt;!-- Servlet别名 --&gt;        &lt;servlet-name&gt;ServletConfitTestName&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.test.servlet.ServletConfigTest&lt;/servlet-class&gt;        &lt;!-- 配置初始化参数，可定义多个 --&gt;        &lt;init-param&gt;            &lt;param-name&gt;usn&lt;/param-name&gt;            &lt;param-value&gt;username&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;init-param&gt;            &lt;param-name&gt;psw&lt;/param-name&gt;            &lt;param-value&gt;password&lt;/param-value&gt;        &lt;/init-param&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;ServletConfitTestName&lt;/servlet-name&gt;        &lt;url-pattern&gt;/testConfig&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;/web-app&gt;\n\npublic class ServletConfigTest implements Servlet &#123;    @Override    public void init(ServletConfig config) throws ServletException &#123;        //1、获取当前Servlet的别名，即标签&lt;servlet-name&gt;的值        String name = config.getServletName();        System.out.println(&quot;servlet-name: &quot; + name);        //2、获取初始化参数，即标签&lt;init-param&gt;内配置的键值对        String userName = config.getInitParameter(&quot;usn&quot;);        String passWord = config.getInitParameter(&quot;psw&quot;);        System.out.println(&quot;usn: &quot; + userName);        System.out.println(&quot;psw: &quot; + passWord);                //2.1、获取所有参数名组成的Enumeration 对象        Enumeration&lt;String&gt; names = config.getInitParameterNames();        while(names.hasMoreElements())&#123;            System.out.println(names.nextElement());        &#125;                //3、获取servletContext        ServletContext servletContext = config.getServletContext();        System.out.println(servletContext);    &#125;  //@Override Method...&#125;\n\n&#x2F;&#x2F;打印结果如下servlet-name: ServletConfitTestNameusn: usernamepsw: passwordusnpsworg.apache.catalina.core.ApplicationContextFacade@5a298b72\n\n\n\n\n\n\n\nServletContext基本概念ServletContext称为“servlet上下文”，一个Web应用对应一个ServletContext，封装了Web诸多信息\n\nServletContext对象由**servletConfig.getServletContext();**获取\n\n一个 web 工程，只有一个 ServletContext 对象\n\nServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁\n\n\n作用\n获取当前WEB 应用的初始化参数，即&lt;context-param&gt;的值\n&lt;context-param&gt;可以被所有的Servlet 所获取, 而Servlet的初始化参数&lt;init-param&gt;只有对应的 Serlvet 可获取\n\n\n获取当前 WEB 应用的某一个文件在服务器上部署后的绝对路径\n获取当前WEB 应用的工程路径\n获取当前WEB应用的某一个文件对应的输入流\n作为application域范围的属性(后续补充说明)\n\nAPIjavax.servlet Interface ServletContext\n\nMethod Summary\n\nString getInitParameter(String name) ：获取初始化参数，即标签&lt;context-param&gt;内配置的键值对\nEnumeration getInitParameterNames()：获取所有参数名组成的Enumeration 对象\nString getRealPath(String path)\n获取当前 WEB 应用的某一个文件在服务器上部署后的绝对路径\n输入参数/file.suffix，/对应Web应用的根目录(部署后)\n同时getRealPath(“/”)映射到IDE代码开发目录中的根目录(web或webcontent)\n\n\nString getContextPath() ：获取当前WEB 应用的工程路径\nInputStream getResourceAsStream(String path)\n获取当前WEB应用的某一个文件对应的输入流\n输入参数/file.suffix，/对应Web应用的根目录\n\n\n\n\nAttribute相关方法后续补充\n\nObject getAttribute(String name)\nEnumeration getAttributeNames() \nvoid removeAttribute(String name) \nvoid setAttribute(String name, Object object)\n\n\n\n\nweb.xml\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;         version=&quot;4.0&quot;&gt;    &lt;!-- 配置当前Web应用的初始化参数   --&gt;    &lt;context-param&gt;        &lt;param-name&gt;driver&lt;/param-name&gt;        &lt;param-value&gt;com.mysql.jdbc.Driver&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;context-param&gt;        &lt;param-name&gt;jdbcUrl&lt;/param-name&gt;        &lt;param-value&gt;jdbc:mysql....&lt;/param-value&gt;    &lt;/context-param&gt;        &lt;servlet&gt;        &lt;servlet-name&gt;ServletContextTest&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.test.servlet.ServletContextTest&lt;/servlet-class&gt;    &lt;/servlet&gt;        &lt;servlet-mapping&gt;        &lt;servlet-name&gt;ServletContextTest&lt;/servlet-name&gt;        &lt;url-pattern&gt;/contextTest&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;\n\n\nServletContextTest.java\n\npublic class ServletContextTest implements Servlet&#123;    @Override    public void init(ServletConfig config) throws ServletException &#123;        //获取ServletContext对象        ServletContext servletContext = config.getServletContext();        //1、获取当前Web应用的初始化参数，即&lt;context-param&gt;值        String driver = servletContext.getInitParameter(&quot;driver&quot;);        String jdbcUrl = servletContext.getInitParameter(&quot;jdbcUrl&quot;);        System.out.println(&quot;driver: &quot; + driver);        System.out.println(&quot;jdbcUrl: &quot; + jdbcUrl);        Enumeration&lt;String&gt; names = servletContext.getInitParameterNames();        while(names.hasMoreElements())&#123;            System.out.println(&quot;names&quot; + names.nextElement());        &#125;        //2、获取当前 WEB 应用的某一个文件在服务器上部署后的绝对路径        String realPath = servletContext.getRealPath(&quot;/test.txt&quot;);        System.out.println(&quot;test.txt realPath&quot; + realPath);        //3、获取当前WEB 应用的工程路径        String contextPath = servletContext.getContextPath();        System.out.println(&quot;contextPath: &quot; + contextPath);        //4、获取当前WEB应用的某一个文件对应的输入流        InputStream resourceAsStream = servletContext.getResourceAsStream(&quot;/WEB-INF/jdbc.properties&quot;);        System.out.println(&quot;resourceAsStream: &quot; + resourceAsStream);    &#125;    //@Override Method...&#125;\n\n\n工程目录与打印结果\n\n\n\n\n\nServletRequest基本概念Servlet 的 service方法用于应答请求，每次请求都会调用 service() 方法。服务器并给予ServletRequest与ServletRsponse接口实现，将请求与响应的信息封装到这两个接口中，并在服务器调用 service 方法时传入实现类对象。\n作用\nServletRequest: 封装了请求信息，可以从中获取到任何的请求信息.\n\nAPIjavax.servlet Interface ServletRequest\n\nAll Known Subinterfaces:\nHttpServletRequest/Respone (tips：重要的子接口)\n\nMethod Summary：方法众多，以下为当前常用的方法，有需要查询API\n\nServletRequest获取请求参数相关\nString getParameter(String name)：根据html标签的name属性, 返回value. 若请求参数有多个值(例如 checkbox), 该方法只能获取到第一个提交的值\nString[] getParameterValues(String name)：根据html标签的name属性, 返回对应的值的字符串数组\nEnumeration getParameterNames()：返回所有请求参数名names对的Enumeration 对象\nMap getParameterMap()：返回所有请求参数的键值对, String 数组类型\nAttribute相关的方法，暂时略，后续补充说明\n……\n\n\n\n\n\nHttpServletRequest：以下功能需使用功能更强大的HTTP相关的(扩展)子接口\n\nString getRequestURI()：获取请求的URI(URL除站点外的字符串)\nString getMethod()：获取请求方式\nString getQueryString()**：获取URL中的请求字符串**(如GET请求?后部分)\nString getServletPath()：获取servlet映射路径(web.xml配置的mapping路径)\n……\n\n\n\n\n\n\n\n请求参数相关\n\n\n前端部分\n\n\n\n&lt;form action=&quot;/06_helloweb/login&quot; method=&quot;post&quot;&gt;\t用户名：&lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br/&gt;    密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br/&gt;    interesting:    &lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;java&quot; checked=&quot;checked&quot;&gt;java    &lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;C++&quot;&gt;C++    &lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;C&quot; checked=&quot;checked&quot;&gt;C    &lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;mysql&quot; checked=&quot;checked&quot;&gt;mysql    &lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;php&quot;&gt;php    &lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;go&quot;&gt;go    &lt;br/&gt;    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;\n\n\nweb.xml\n\n&lt;servlet&gt;    &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.test.servlet.LoginServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/login&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;\n\n\nLoginServlet.java\n\npublic class LoginServlet implements Servlet &#123;    @Override    public void service(ServletRequest request, ServletResponse response)            throws ServletException, IOException &#123;        //1、根据请求参数的name, 返回value. 若请求参数        //有多个值(例如 checkbox), 该方法只能获取到第一个提交的值        String user = request.getParameter(&quot;user&quot;);        String password = request.getParameter(&quot;password&quot;);        String interesting_one = request.getParameter(&quot;interesting&quot;);        System.out.println(&quot;user = &quot; + user);        System.out.println(&quot;password = &quot; + password);        System.out.println(&quot;interesting_one = &quot; + interesting_one);        //2、据请求参数的name, 返回对应的值的字符串数组        String[] interesting = request.getParameterValues(&quot;interesting&quot;);        for (int i = 0; i &lt; interesting.length; i++) &#123;            System.out.println(&quot;interest = &quot; + (i + 1) + &quot; &quot; + interesting[i]);        &#125;        //3、返回所有请求参数名names对的Enumeration 对象        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();        while (parameterNames.hasMoreElements()) &#123;            String name = parameterNames.nextElement();            String value = request.getParameter(name);            System.out.println(&quot;name : value = &quot; + name + &quot; : &quot; + value);        &#125;        //4、返回所有请求参数的键值对, Map&lt;String,String&gt; 数组类型        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();        for (Map.Entry&lt;String, String[]&gt; param : parameterMap.entrySet()) &#123;           System.out.println(&quot;name : value = &quot;                   + param.getKey() + &quot; : &quot; + Arrays.asList(param.getValue()));        &#125;    &#125;   // @Override...Method&#125;\n\n\n打印结果如下\n\nuser = testpassword = 123456interesting_one = javainterest = 1 javainterest = 2 Cinterest = 3 mysqlname : value = user : testname : value = password : 123456name : value = interesting : javaname : value = user : [test]name : value = password : [123456]name : value = interesting : [java, C, mysql]\n\n\n\nServletResponse作用ServletResponse: 封装了响应信息, 如果想给用户什么响应, 具体可以使用该接口的方法实现. \nAPIjavax.servlet Interface ServletResponse\n\nAll Known Subinterfaces:\nHttpServletResponse (tips：重要的子接口)\n\nMethod Summary\nServletResponse：\n\nPrintWriter getWriter()\n\n返回 PrintWriter 对象. 调用该对象的 print() 方法, 将把 print() 中的参数直接打印到客户的浏览器上.\nPrintWriter 对象还可配合setContentType响应类型，把内容输入到响应类型文件内\n\n\nvoid setContentType(String type)：\n\n设置响应的内容类型，如pdf类型”application/pdf”，具体其他文件类型type值可打开[tomcat安装路径]]\\conf\\web.xml文件进行查询，例如\n&lt;mime-mapping&gt;\t&lt;extension&gt;pdf&lt;/extension&gt;\t&lt;mime-type&gt;application/pdf&lt;/mime-type&gt;&lt;/mime-mapping&gt;\n\n\n\n…\n\n\n\nHttpServletResponse：\n③. void sendRedirect(String location)：请求的重定向，后续补充\n\n\nGenericServlet需求驱动\n在 web.xml 文件中设置两个 WEB 应用的初始化参数, user, password.\n\n定义一个 login.html, 里边定义两个请求字段: user, password. 发送请求到 loginServlet\n\n获取请求方式\n\n在创建一个 LoginServlet, 在其中获取请求的 user, password. 比对其和 web.xml 文件中定义的请求参数是否一致\n\n若一致，作出基本提示\n\nLoginServlet.java文件\n\n\n/** * 基于实现Servlet接口进行Servlet程序开发 */public class LoginServlet implements Servlet &#123;    //在类内部声明一个ServletConfig属性，    //用于暂存从init方法中获取的servletConfig对象    @Override    public void init(ServletConfig servletConfig) throws ServletException &#123;        this.servletConfig = servletConfig;    &#125;    @Override    public ServletConfig getServletConfig() &#123;        return null;    &#125;    private ServletConfig servletConfig;    @Override    public void service(ServletRequest servletRequest, ServletResponse servletResponse)            throws ServletException, IOException &#123;        //1、获取应用初始化参数username、password        ServletContext servletContext = servletConfig.getServletContext();        String user = servletContext.getInitParameter(&quot;username&quot;);        String psw = servletContext.getInitParameter(&quot;password&quot;);        //2、获取login.html请求参数        String username = servletRequest.getParameter(&quot;username&quot;);        String password = servletRequest.getParameter(&quot;password&quot;);        PrintWriter writer = servletResponse.getWriter();        String mes;        //3、将请求中的参数与web应用初始化参数信息进行比较        if(user.equals(username) &amp;&amp; psw.equals(password))&#123;            mes = &quot;App: login succeed&quot;;        &#125;else&#123;            mes = &quot;App: login failed&quot;;        &#125;        writer.print(mes);    &#125;    @Override    public String getServletInfo() &#123;        return null;    &#125;    @Override    public void destroy() &#123;    &#125;&#125;\n\n\nweb.xml文件\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;         version=&quot;4.0&quot;&gt;    &lt;context-param&gt;        &lt;param-name&gt;username&lt;/param-name&gt;        &lt;param-value&gt;12345&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;context-param&gt;        &lt;param-name&gt;password&lt;/param-name&gt;        &lt;param-value&gt;55555&lt;/param-value&gt;    &lt;/context-param&gt;        &lt;servlet&gt;        &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.test.java.LoginServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;        &lt;servlet-mapping&gt;        &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/login&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;\n\n解决思路由于WEB应用的初始化参数必须通过ServletContext对象获取，而该对象又需要ServletConfig对象获取。ServletConfig则需在init方法才能得到实体引用。因此关键实现步骤如下：\n\n暂存从init方法中获取的ServletConfig引用\n定义一个private ServletConfig servletConfig 属性，用于存储servletConfig的引用\n从init方法中对servletConfig引用赋值\n\n\n通过servletConfig获取ServletContext进而获取WEB应用的初始化参数\n\n问题分析\n存在的问题：\n在完成上述简单功能时候为了实现Servlet接口，出现众多无需使用的空方法\n想使用ServletConfig 或ServletContext每次都需创建一个属性从init方法中暂存引用\n\n\n解决方案：\n自定义一个Servlet实现类、尝试实现里面的方法。\n在后续开发Servlet程序时通过继承的这个实现类的方式开发，以简化开发\n\n\nMyGenericServlet.java\n\n/** * 在后续开发Servlet程序时通过继承的这个实现类的方式开发，以简化开发 */public abstract class MyGenericServlet implements Servlet &#123;    //1、声明一个ServletConfig变量用于暂存init方法中获取到的引用    private ServletConfig servletConfig;    @Override    public void init(ServletConfig servletConfig) throws ServletException &#123;        this.servletConfig = servletConfig;    &#125;    //2、尝试实现方法：可以实现，即返回ServletConfig引用    @Override    public ServletConfig getServletConfig() &#123;        return this.servletConfig;    &#125;    /**     * 3、由于service方法是开发servlet必须使用与实现的方法     * 可以将其定义未抽象方法，即强制继承的子类必须实现这个方法     * 由于该方法定义成abstract，因此MyGenericServlet需改成抽象类     */    @Override    public abstract void service(ServletRequest servletRequest, ServletResponse servletResponse)            throws ServletException, IOException;    //4、尝试实现方法：无法实现    @Override    public String getServletInfo() &#123;        return null;    &#125;    @Override    public void destroy() &#123;    &#125;&#125;\n\n\n通过继承MyGenericServlet.java实现优化后的LoginServlet开发\n无需强制实现Servlet其他不需要的方法\n可通过getServletConfig()，在任意位置获取到ServletConfig()对象\n\n\n\n/* * 基于自实现的GenericServlet——MyGenericServlet进行Servlet开发  */public class LoginServlet2 extends MyGenericServlet &#123;    @Override    public void service(ServletRequest servletRequest, ServletResponse servletResponse)            throws ServletException, IOException &#123;        //1、获取应用初始化参数username、password        ServletContext servletContext = getServletConfig().getServletContext();        String user = servletContext.getInitParameter(&quot;username&quot;);        String psw = servletContext.getInitParameter(&quot;password&quot;);        //2、获取login.html请求参数        String username = servletRequest.getParameter(&quot;username&quot;);        String password = servletRequest.getParameter(&quot;password&quot;);        PrintWriter writer = servletResponse.getWriter();        String mes;        //3、将请求中的参数与web应用初始化参数信息进行比较        if(user.equals(username) &amp;&amp; psw.equals(password))&#123;            mes = &quot;App2: login succeed&quot;;        &#125;else&#123;            mes = &quot;App2: login failed&quot;;        &#125;        writer.print(mes);    &#125;&#125;\n\nGenericServletGenericServlet是实现Servlet的一个抽像类，上述自实现的MyGenericServlet要解决的问题与思路和GenericServlet一致。不过官方的GenericServlet除了实现Servlet接口，还实现了ServletConfig接口，意义使继承GenericServlet的Servlet能够直接调用ServletConfig的所有方法(ServletConfig是对标一个Servlet的)，进而更一步提高了GenericServlet的功能。提高了开发Servlet的效率。GenericServlet一些其他细节如下所示：\n\n源码中ServletConfig接口方法的实现，是使用从init方法中获取的ServletConfig对象直接调用对应方法来间接实现的。\npublic abstract class GenericServlet     implements Servlet, ServletConfig, Serializable &#123;    //.....    public String getInitParameter(String name) &#123;        return this.getServletConfig().getInitParameter(name);//间接实现    &#125;    public Enumeration&lt;String&gt; getInitParameterNames() &#123;        return this.getServletConfig().getInitParameterNames();//间接实现    &#125;    //.....&#125;\n\nGenericServlet在实现的Servlet接口中原生的init(ServletConfig servletConfig)方法的同时调用了一个自定义的**空参init()**方法。作用如下说明：\n\n**空参init()**方法用于给继承GenericServlet开发的子类想通过init方法进行一些初始化操作\n由于GenericServlet关键在于声明了一个ServletConfig类型成员变量，在原生带参的init(ServletConfig)方法中进行了初始化。\n若子类直接重写GenericServlet的带参init(ServletConfig)方法进行初始化操作。则会导GenericServlet对ServletConfig初始化失败，系统默认调用了子类重写的init方法。因此当子类在调用GenericServlet封装好且涉及ServletConfig参与实现的方法时，就会出现空指针异常。\n\n\n\n小结：\n若子类想使用初始化init方法，建议重写空参的init()方法，不建议重写init(ServletConfig)\n若子类有必要重写init(ServletConfig)，则必须在init方法中super.init(ServletConfig)显式调用一下父类的带参init方法，使父类的ServletConfig能顺利被初始化\n因此，严格来说，GenericServlet定义的空参init()方法并非Servlet的生命周期方法，init(ServletConfig)才是。\n\n\n\npublic abstract class GenericServlet     implements Servlet, ServletConfig, Serializable &#123;    //.....    public void init(ServletConfig config) throws ServletException &#123;            this.config = config;            this.init();    &#125;    public void init() throws ServletException &#123;            &#125;    //.....&#125;\n\n\n\nHTTP请求处理HTTP请求GET请求格式\n请求行\n\n请求的方式 GET\n请求的资源路径[+?+请求参数]\n请求的协议的版本号 HTTP/1.1 \n\n\n请求头：key : value 组成多个不同的键值对，表示不同的含义。\n\n\n\n传递参数格式http://www.xxx.com/index.jsp?name=lc&amp;password=123\n\n? 隔开URL与参数列表\n每个参数有键值对 name=value组成\n多个简直对之间用 &amp; 相隔\n\nGET请求类型操作\nform 标签method=get\n超链接 a标签或img标签\n在浏览器地址栏中输入地址后敲回车\n\n\n特点POST请求格式\n请求行 \n\n请求的方式 POST\n请求的资源路径[+?+请求参数]\n请求的协议的版本号 HTTP/1.1 \n\n\n请求头：key : value组成多个不同的请求头，有不同的含义 \n\n空行 \n\n请求体 ：发送给服务器的数据\n\n\n\nPOST请求类型操作\nform 标签 method=post\n\nHTTP响应响应格式\n响应行\n\n响应的协议和版本号\n响应状态码\n响应状态描述符 \n\n\n响应头： key : value 不同的响应头，有其不同含义 \n\n空行 \n\n响应体：回传给客户端的数据\n\n\n\n常用的响应码\n200 表示请求成功 \n302 表示请求重定向\n404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误）\n500 表示服务器已经收到请求，但是服务器内部错误（代码错误）\n\nMIME类型说明\nMIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。\nMIME 是 HTTP 协议中数据类型，用于表示某一种文件的扩展名。\nMIME 类型的格式是“大类型/小类型”\n\n具体可通过网络查询\nHttpServletHttpServletRequest/Response初谈需求驱动\n在通过Servlet去处理HTTP请求时，若想获取请求的方式，进而区分处理两种不同类型的请求(GET/POST)时，服务器给予的ServletRequest/Response实现类是不能满足需求的。\n由于ServletReqeust与ServletResponse是基于请求—响应这个服务机制层面上的封装，严格来说没有指明使用的通信协议。而GET/POST请求时HTTP协议所特有的，因此在使用HTTP协议所涉及的相关功能时，需要使用——HttpServletRequest/Response接口\n\n简介HttpServletRequest/Response分别是ServletRequest/Response接口基于HTTP协议的子接口，在ServletRequest/Response原有功能的基础上，规范定义许多HTTP协议特用的方法。与ServletRequest/Response类似，具体的实现类由HTTP服务器提供\n获取HttpServletRequest/Response由于HttpServletRequest/Response是ServletRequest/Response的子接口。而在开发基于HTTP协议的应用时，HTTP服务器实现的肯定是HttpServletRequest/Response。而通过上层协议规范ServletRequest/Response传入\n\n因此可以在获取ServletRequest/Response实体后通过向下转型(强制转换)**得到HttpServletRequest/Response。具体操作在service**(ServletRequest,ServletResponse)方法中实现\n得到HttpServletRequest/Response实现类后，可调用request.getMethod();获取HTTP请求方式\n\npublic class Test implements Servlet &#123;    @Override    public void service(ServletRequest servletRequest, ServletResponse servletResponse)            throws ServletException, IOException &#123;        //通过向下转型(强制类型转换)获得其实现类        HttpServletRequest request = (HttpServletRequest) servletRequest;        HttpServletResponse response = (HttpServletResponse) servletResponse;        String requestMethod = request.getMethod();    &#125;\t//@Override...method，略&#125;\n\n需求驱动即使通过继承GenericServlet开发Servlet已经方便了许多，但是当处理HTTP请求时还是需要将ServletRequest/Response手动强制转换为HttpServletRequest/Response才能更好的处理HTTP请求。而每次开发Servlet处理HTTP请求都需要书写强制类型转换语句，显然还有优化的空间。\n\n因此，可以在GenericServlet基础上针对HTTP协议再进行优化，创建一个专门用于处理HTTP请求Servlet接口实现类。具备的基本功能如下：\n如封装好将ServletRequest/Response转换为HttpServletRequest/Response的步骤。\n实现GET请求、POST请求的分发处理\n….\n\n\nMyHttpServlet.java\n\n/** * 自定义一个基于GenericServlet，HTTP协议的Servlet接口实现类，基本功能如下： *  1、封装好将ServletRequest/Response转换为HttpServletRequest/Response *  2、实现GET请求、POST请求的分发 */public class MyHttpServlet extends GenericServlet &#123;    @Override    public void service(ServletRequest servletRequest, ServletResponse servletResponse)            throws ServletException, IOException &#123;        //1、封装好将ServletRequest/Response转换为HttpServletRequest/Response        //1.1、通过instanceof检查实现类的实际类型        if(servletRequest instanceof HttpServletRequest)&#123;            HttpServletRequest request = (HttpServletRequest)servletRequest;            if(servletResponse instanceof HttpServletResponse)&#123;                HttpServletResponse response = (HttpServletResponse) servletResponse;                //1.2、创建一个重载service(HttpServletRequest,HttpServletResponse)                //传入转换后的HttpServletRequest/Response 实体引用。                //子类通过重写service(HttpServletRequest,HttpServletResponse)方法                //进而实现直接使用HttpServletRequest/Response                service(request,response);            &#125;        &#125;    &#125;    //1.2、创建一个重载service(HttpServletRequest,HttpServletResponse)    public void service(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException &#123;        //2、实现GET请求、POST请求的分发处理        //2.1、通过HttpServletRequest获取当前HTTP请求类型，并进行判断        String requestMethod = request.getMethod();        if(&quot;GET&quot;.equals(requestMethod))&#123;            doGet(request,response);//2.2、模仿service方法，创建专门处理GET请求的方法doGet        &#125;        if(&quot;POST&quot;.equals(requestMethod))&#123;            doPost(request,response);//2.2、模仿service方法，创建专门处理POST请求的方法doPost        &#125;    &#125;    //开发的时候，可以针对HTTP协议对不同的请求重写对应的doGet或doPost实现更方便的处理    //2.2、模仿service方法，创建专门处理GET请求的方法doGet    public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException &#123;    &#125;    //2.2、模仿service方法，创建专门处理POST请求的方法doPost    public void doPost(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException &#123;    &#125;&#125;\n\n\n基于MyHttpServlet的servlet开发，更加有针对性，简洁，有效\n\n/** * 基于自实现的HttpServlet——MyHttpServlet进行Servlet开发 * @author yhd * @create 2021-04-06 8:10 */public class LoginServlet4 extends MyHttpServlet &#123;    @Override    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        //1、获取应用初始化参数username、password        String user = getServletContext().getInitParameter(&quot;username&quot;);        String psw = getServletContext().getInitParameter(&quot;password&quot;);        //2、获取login.html请求参数        String username = request.getParameter(&quot;username&quot;);        String password = request.getParameter(&quot;password&quot;);        PrintWriter writer = response.getWriter();        String mes;        //3、将请求中的参数与web应用初始化参数信息进行比较        if(user.equals(username) &amp;&amp; psw.equals(password))&#123;            mes = &quot;App4: login succeed&quot;;        &#125;else&#123;            mes = &quot;App4: login failed&quot;;        &#125;        writer.print(mes);    &#125;&#125;\n\nHttpServletHttpServlet继承与GenericServlet，上述自实现的MyHttpServlet要解决的问题思路以及功能与HttpServlet类似。在真正的Servlet开发中，是通过继承HttpServlet方式进行开发，根据请求方式重写doXxx()方法即可。\n\n(了解)其中如果我们对一个请求没有进行任何doXxx()方法的重写，其实源码内部已经对该请求进行了一定程度的受理\n\nServlet体系结构优化Servlet开发层面\n\n请求处理层面\nServletRequest/Response 接口 —— &gt; 针对HTTP协议HttpServletRequest/Response接口\n\n均有服务器提供实现类\n\n\nHttpServletRequesttips：概念介绍请转至标题HttpServlet下的HttpServletRequest/Response初谈\nAPI\ngetRequestURI() ：获取请求的资源路径\ngetRequestURL() ：获取请求的统一资源定位符（绝对路径）\ngetRemoteHost() ：获取客户端的 ip 地址\ngetHeader() ：获取请求头（User-Agent的值）\ngetMethod()： 获取请求的方式 GET 或 POST\n\n\n\n– ServletRequest – 来自父接口的方法\ngetParameter()： 获取请求的参数\ngetParameterValues()： 获取请求的参数（多个值的时候使用）\n\n\n\nsetAttribute(key, value)：设置域数据 \ngetAttribute(key)：获取域数据 \ngetRequestDispatcher()： 获取请求转发对象\n…\n\n请求中文乱码问题GET请求后端获取带中文的请求参数时，打印显示?????，由于传输默认编码为iso-8859-1\n\n方式1：先正确解码，再对应编码\n\n//获取请求参数String username = req.getParameter(&quot;username&quot;);//先以iso8859-1 解码，再以utf-8进行编码username = new String(username.getBytes(&quot;iso-8859-1&quot;), &quot;UTF-8&quot;);\n\n\n方式2：修改tomcat收到请求时url参数的编码方式\n\n打开tomcat安装目录中的conf\\server.xml，修改成如下内容\n\n&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; useBodyEncodingForURI=&quot;true&quot;/&gt; \n\n\n\n\n\nPOST请求//在获取请求参数前设置request.setCharacterEncoding(&quot;UTF-8&quot;);\n\nHttpServletResponseAPIServletResponse接口定义\n\nPrintWriter getWriter()：字符流，常用于回传字符串（常用） \n返回 PrintWriter 对象. 调用该对象的 print() 方法, 将把 print() 中的参数直接打印到客户的浏览器上.\nPrintWriter 对象还可配合setContentType响应类型，把内容输入到响应类型文件内\n\n\nOutputStream getOutputStream()：字节流，常用于下载（传递二进制数据）\n\n注意：两个流同时只能获取一个，否则就会报错。\n响应中文乱码问题当通过字符流PrintWriter getWriter()向浏览器直接传送中文字符时，常见显示?????乱码情况。\n乱码的原因\n乱码问题终归就是：发送方的编码字符集与接收方的编码字符集不兼容导致\n\n\n可通过调用response.getCharacterEncoding();获取当前服务器的默认编码集(ISO-8859-1)\n\n一般浏览器默认是GBK编码，因此服务器与浏览器字符集不匹配因此。这是造成乱码的首要原因\n\n因此最直接的解决方案(不推荐！)：response.setCharacterEncoding(&quot;GBK&quot;);\n\n\n\nGBK编码：一个汉字占用两个字节，此编码为中国专用的汉字编码而形成之解决方案。\n\nUTF-8编码：一个汉字占用3个字节。是全世界统一的编码结构。外国网站看的话不会乱码。\n\nUnicode是「字符集」：为每一个「字符」分配一个唯一的 ID(学名为码位 / 码点 / Code Point）\nUTF-8 是「编码规则」：将「码位」转换为字节序列的规则（编码/解码 可以理解为 加密/解密 的过程）\n\n\n\n\n\n小结：因此在选择中文编码集时，由于国际化问题，优先选用UTF-8。\n\n\n若为了国际化将服务器编码设置为response.setCharacterEncoding(&quot;UTF-8&quot;);又会因为浏览器默认GBK编码而又导致了乱码。此时可以通过将浏览器的编码设置为UTF-8来解决问题，但不推荐，由于不可能让用户每次访问该网页时都手动设置一下编码。而且有些浏览器设置困难\n\n\n推荐解决方案//方式1：设置响应头，告诉浏览器接收到数据时，采用UTF-8解析网页内容response.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset=UTF-8&quot;);//方式2：设置内容类型：同时设置了服务器和客户端都使用UTF-8字符集，还设置了响应头//注意：此方法一定要在获取流对象之前调用才有效resp.setContentType(&quot;text/html; charset=UTF-8&quot;);\n\n\n\nWeb中路径相关问题IDE项目与站点目录http://ip:port/工程路径 == WEB资源根目录(IDEA web，eclipse WebContent)\n绝对与相对路径基本概念\n相对路径：\n\n\n\n符号\n含义\n\n\n\n.\n表示当前目录\n\n\n..\n表示上一级目录\n\n\n资源名\n表示当前目录/资源名\n\n\n\n绝对路径：http://ip:port/工程路径/资源路径\n\n\nWeb路径常见问题场景驱动base标签base标签的作用\ntips：原生javaweb阶段可以使用 base+相对路径 这个解决方案，但涉及框架参与的开发建议使用绝对路径\nbase页面只对当前页面有效\n相对路径工作时默认是参照当前页面路径进行跳转，通过设置base标签可以是相对路径工作时的参照base标签设置的路径进行跳转。base标签默认省略末尾属于资源部分的路径信息，因此末尾是目录的话斜杠不能省，省了就不是目录，而是资源了\n注意：一般设置base后，页面原本使用相对路径引入的资源一般都会失效了，如js、css、图片资源等，需对应的进行引入路径修改,(若之前加载过请清楚缓存后再查看)，或者F12查看Console错误提示\n&lt;base href=&quot;&quot;&gt;\n‘/‘ 斜杠的不同含义在 web 中 / 斜杠是一种绝对路径\n\n/ 若被浏览器解析（前端代码）： http://ip:port/\n&lt;a href=&quot;/&quot;&gt;斜杠&lt;/a&gt;\n\n/ 若被服务器解析（Servlet、web.xml、JSP）： http://ip:port/工程路径\n\n特殊情况，重定向：response.sendRediect(“/”); 把斜杠发送给浏览器解析 http://ip:port\n\n\n\nJSP需求驱动前端想通过发送一个请求返回整个java处理过的HTML页面(动态页面)，而非PrintWriter返回的几个字符串，则传统的方式只能通过PrintWriter逐一打印出整个html代码，如下所示。\n\nReturnHtml.java\n\n/** * @author yhd * @create 2021-04-07 21:33 */public class ReturnHtml extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        StringBuilder result = new StringBuilder();        Date date = new Date();//获取当前时间        result.append(&quot;&lt;form&gt;&quot;);        result.append(&quot;当前时间：&lt;input type=\\&quot;text\\&quot; name=\\&quot;username\\&quot; value=\\&quot; &quot; + date + &quot; \\&quot;&gt;&lt;br/&gt;&quot;);        result.append(&quot;&lt;/form&gt;&quot;);        resp.setContentType(&quot;text/html;charset=UTF-8&quot;);        PrintWriter writer = resp.getWriter();        writer.print(result.toString());    &#125;&#125;\n\n\nindex.html\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;/08_JSP/getHTML&quot; &gt;获取HTML页面&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n最终效果\n\n\n\n小结：只能通过这种方式返回经过java处理过的页面，编写和维护都将非常困难，实在效率太低了\n\nJSP基本概念\n为弥补 Servlet 的缺陷，SUN公司在Servlet的基础上推出了JSP（Java Server Pages）技术作为解决方案。\nJSP是简化Servlet编写的一种技术，它将Java代码和HTML语句混合在同一个文件中编写，只对网页中的要动态产生的内容采用Java代码来编写，而对固定不变的静态内容采用普通静态HTML页面的方式编写。\nJSP文件就像普通的HTML文件一样，可以放置在WEB应用程序中的除了WEB-INF及其子目录外的其他任何目录中，JSP页面的访问路径与普通HTML页面的访问路径形式也完全一样。\n\nHelloWorld\n在IDEA 或 eclipse中右键新建一个JSP文件\n在&lt;body&gt;标签内写入&lt;% %&gt;\n在&lt;% %&gt;内可以编写Java代码\n\n\nindex.jsp\n&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;      我是JSP页面      &lt;%        System.out.println(&quot;JSP：在前端页面编写后台打印语句！&quot;);      %&gt;  &lt;/body&gt;&lt;/html&gt;\n\n最终效果\n\n\n\nJSP运行原理运行原理\nWEB容器（Servlet引擎）收到以.jsp为扩展名的URL的访问请求时，会把该访问请求交给JSP引擎去处理。\n每个JSP页面在第一次被访问时，JSP引擎将它翻译成一个Servlet源程序(.java文件)，\n接着再把这个Servlet源程序编译成Servlet的.class类文件\n然后再由WEB容器（Servlet引擎）像调用普通Servlet程序一样的方式来装载和解释执行这个由JSP页面翻译成的Servlet程序。\n\nJSP的Servlet源程序源程序路径\nIDEA存放位置：C:\\Users\\[用户名]\\AppData\\Local\\JetBrains\\IntelliJIdea2020.3\\tomcat\\[XXXX-XX-标识符-XXXX-XXXX]\\work\\Catalina\\localhost\\[项目名称]\\org\\apache\\jsp目录下\n\n\nJSP本质\n观察JSP源程序：可以发现index_jsp这个类继承了HttpJspBase\n\n通过观察HttpJspBase源码发现HttpJspBase继承HttpServlet\n\n结论：因此可知JSP源程序是间接继承了HttpServlet的，即JSP本质上就是Servlet\n\nindex_jsp.java\n\n  package org.apache.jsp;    import javax.servlet.*;  import javax.servlet.http.*;  import javax.servlet.jsp.*;    public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase      implements org.apache.jasper.runtime.JspSourceDependent,                   org.apache.jasper.runtime.JspSourceImports &#123;    //....省略部分代码....      //类似Servlet的Init方法    public void _jspInit() &#123;    &#125;      //类似Servlet的destroy方法    public void _jspDestroy() &#123;    &#125;                           //类似Servlet的service方法    public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)        throws java.io.IOException, javax.servlet.ServletException &#123;  \t//.....      &#125;        //类似Servlet相关的一些类，ServletContext、ServletCondig等...      //这些其实就是后面所说的JSP隐函对象      final javax.servlet.jsp.PageContext pageContext;      javax.servlet.http.HttpSession session = null;      final javax.servlet.ServletContext application;      final javax.servlet.ServletConfig config;      javax.servlet.jsp.JspWriter out = null;      final java.lang.Object page = this;      javax.servlet.jsp.JspWriter _jspx_out = null;      javax.servlet.jsp.PageContext _jspx_page_context = null;          try &#123;        response.setContentType(&quot;text/html;charset=UTF-8&quot;);        pageContext = _jspxFactory.getPageContext(this, request, response,        \t\t\tnull, true, 8192, true);        _jspx_page_context = pageContext;        application = pageContext.getServletContext();        config = pageContext.getServletConfig();        session = pageContext.getSession();        out = pageContext.getOut();        _jspx_out = out;                out.write(&quot;\\n&quot;);        out.write(&quot;\\n&quot;);        out.write(&quot;&lt;html&gt;\\n&quot;);        out.write(&quot;  &lt;head&gt;\\n&quot;);        out.write(&quot;    &lt;title&gt;$Title$&lt;/title&gt;\\n&quot;);        out.write(&quot;  &lt;/head&gt;\\n&quot;);        out.write(&quot;  &lt;body&gt;\\n&quot;);        out.write(&quot;      我是JSP页面\\n&quot;);//自编写的HTML元素        out.write(&quot;      &quot;);  \t  //自编写的java代码          System.out.println(&quot;JSP：在前端页面编写后台打印语句！&quot;);                out.write(&quot;\\n&quot;);        out.write(&quot;  &lt;/body&gt;\\n&quot;);        out.write(&quot;&lt;/html&gt;\\n&quot;);      &#125; catch (java.lang.Throwable t) &#123;        //....省略部分代码....    \t&#125;    &#125;&#125;\n\n\nHttpJspBase：继承了HttpServlet，里面的init、service等Servlet生命周期方法都对应调用了jsp源程序的相关Servlet生命周期代码\n\n  public abstract class HttpJspBase extends HttpServlet implements HttpJspPage &#123;        private static final long serialVersionUID = 1L;      protected HttpJspBase() &#123;      &#125;        @Override      public final void init(ServletConfig config)          throws ServletException      &#123;          super.init(config);          jspInit();          _jspInit();      &#125;        @Override      public String getServletInfo() &#123;          return Localizer.getMessage(&quot;jsp.engine.info&quot;, Constants.SPEC_VERSION);      &#125;        @Override      public final void destroy() &#123;          jspDestroy();          _jspDestroy();      &#125;        /**       * Entry point into service.       */      @Override      public final void service(HttpServletRequest request, HttpServletResponse response)          throws ServletException, IOException      &#123;          _jspService(request, response);      &#125;        @Override      public void jspInit() &#123;      &#125;        public void _jspInit() &#123;      &#125;        @Override      public void jspDestroy() &#123;      &#125;        protected void _jspDestroy() &#123;      &#125;        @Override      public abstract void _jspService(HttpServletRequest request,                                       HttpServletResponse response)          throws ServletException, IOException;&#125;\n\n\n\n\n9大隐含对象\n从JSP运行原理中看到JSP对应的Servlet源程序时可发现，自编写的java代码在void _jspService()方法内，而该方法的首部，还定义了许多对象。这些便是JSP的隐函对象，可供我们在JSP编写java代码时不用声明(已经帮我们声明)直接使用使用。\n\nJSP的9个隐函对象：request、response、pageContext、session、application、config、out、page、exception\n\n\n\n\nrequest：HttpServletRequest对象.\n\nresponse(了解)：HttpServletResponse 对象(在 JSP 页面中几乎不会调用 response 的任何方法.)\n\npageContext: \n\n页表示面的上下文，PageContext的一个对象封装了当前页面的一切信息(学习自定义标签时使用它) \n可以从该对象中获取到其他 8 个隐含对象. 也可以从中获取到当前\n\n\nsession：代表浏览器和服务器的一次会话, 是 HttpSession 的一个对象. 后面详细学习\n\napplication: 代表当前 WEB 应用，是ServletContext对象.\n\nconfig(了解)：当前 JSP 对应的 Servlet 的 ServletConfig 对象(几乎不使用). 若需要访问当前 JSP页面。配置的初始化参数, 需要配置jsp页面的映射的地址才可以。\n&lt;servlet&gt;    &lt;servlet-name&gt;hellojsp&lt;/servlet-name&gt;    &lt;jsp-file&gt;/hello.jsp&lt;/jsp-file&gt;    &lt;init-param&gt;        &lt;param-name&gt;test&lt;/param-name&gt;        &lt;param-value&gt;testValue&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;hellojsp&lt;/servlet-name&gt;    &lt;url-pattern&gt;/hellojsp&lt;/url-pattern&gt;  \t&lt;/servlet-mapping&gt;\n\nout：JspWriter对象. 调用 out.println() 可以直接把字符串打印到浏览器上\n\npage(几乎不使用))：指向当前 JSP 对应的Servlet 对象的引用, 但为 Object 类型, 只能调用 Object 类的方法\n\nexception：在声明了 page 指令的 &lt;%@ page isErrorPage=&quot;true&quot; %&gt; 时, 才可以使用。\n\n\nJSP基本语法模板元素静态HTML内容称之为JSP模版元素，在静态的HTML内容之中可以嵌套JSP的其他各种元素来产生动态内容和执行业务逻辑。\n注释&lt;!-- html注释：会被翻译导java源代码中，通过out.writer方式输出 --&gt;// 或 /* java注释，也会被翻译导java源代码中 */&lt;%-- JSP注释,真正的注释，不会被翻译 --%&gt;\n\nJSP脚本JSP小脚本语法格式：&lt;%  %&gt;\n&lt;!-- 打印当前时间 --&gt;&lt;%\tDate date = new Date();%&gt;&lt;% System.out.println(date); %&gt;\n\n\n每次访问含小脚本的页面，小脚本都会被重头执行。\n\n只能编写方法内语句。\n\n原理：由于JSP小脚本内编写的代码时直接移植到jsp对应Servlet源程序的_jspService()方法内，因此像声明一个java方法的这些语句是不能够写在JSP小脚本内的(java中方法内不能定义方法)。\npublic final class index_jsp extends org.apache.jasper.runtime.HttpJspBase    implements org.apache.jasper.runtime.JspSourceDependent,                 org.apache.jasper.runtime.JspSourceImports &#123;\tpublic void _jspService(final javax.servlet.http.HttpServletRequest request                            , final javax.servlet.http.HttpServletResponse response)      throws java.io.IOException, javax.servlet.ServletException &#123;      //&lt;% %&gt;JSP小脚本代码移植的位置    &#125;      &#125;\n\n\n\nJSP声明语法格式：&lt;%! %&gt;\n&lt;!-- 声明一个名为date的Date类型变量 --&gt;&lt;%! Date date = null; %&gt;\n\n\n只能编写声明，定义类型的java语句。不能直接编写java代码\n\n使用&lt;%! %&gt;声明变量仅在页面第一次加载时由容器只初始化一次，后续再访问页面不再执行。\n\n若使用&lt;%  %&gt;小脚本声明变量，由于小脚本每次访问页面时都被执行。因此每次都是重新声明变量。\n\n原理：JSP声明的内容是移植到jsp对应Servlet源程序的类中，是属于类的成员的一部分。因此只能编写书写属性、方法声明语句。\n\ntips：几乎不怎么使用\npublic final class index_jsp extends org.apache.jasper.runtime.HttpJspBase    implements org.apache.jasper.runtime.JspSourceDependent,                 org.apache.jasper.runtime.JspSourceImports &#123;    //&lt;%! %&gt;JSP声明代码移植的位置(类成员)    public void _jspService(/*...省略...*/)&#123;      //&lt;% %&gt;JSP小脚本代码移植的位置(方法内)    &#125;&#125;\n\n\n\nJSP表达式语法格式：&lt;%= %&gt;\n&lt;!-- 输出当前时间 --&gt;&lt;%= new Date() %&gt;\n\n\n可直接输出任何对象或任何基本数据类型、表达式、方法调用返回值等\nJSP表达式的百分号%和等号=之间不能有空格\nJSP表达式内的语句不用写分号，原理(out.print(翻译语句**;**));，若加了分号则导致 ));语句多出，语法错误\n原理：与jsp小脚本一样，翻译在_jspService()方法内，通过调用PrintWrite，print方法打印，因此还可以获取request，response对象\n\nJSP与HTML互嵌&lt;%    int i = 10;    if(i &gt; 10)&#123;%&gt;    &lt;a href=&quot;/08_JSP/index.jsp&quot;&gt;大于10&lt;/a&gt;&lt;%    &#125;else&#123;%&gt;\t&lt;a href=&quot;/08_JSP/index.jsp&quot;&gt;小于10&lt;/a&gt;&lt;%\t&#125;%&gt;\n\nJSP指令用于向容器提供关于JSP页面的总体信息，并不产生任何输出，语法格式为&lt;%@ 指令 属性名 = &quot;值&quot; %&gt;。一般写在JSP首部。指令有三种类型：\n\npage\ninclude\ntaglib\n\npage指令\n描述JSP页面的总体特性，如输出内容类型、字符集编码等信息\n配置多个属性可以用空格隔开，或使用多条指令语句单独设置\n\n&lt;!--返回的内容类型及返回内容的编码、翻译后语言、及JSP页面本身编码的字符集--&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot;     pageEncoding=&quot;UTF-8&quot; %&gt;\n\n\n其他属性：常用为加粗表示\n\nlanguage：表示jsp翻译后是什么语言，暂时只支持java\n\nextends=”package.class”：表明当前JSP被翻译成源程序(.java)时继承哪个类\n\nimport=”package.class”：与java一样导包，导类\n\nsession=”true | false”：设置当前页面是否启用session，使用session前必须设置为true\n\nerrorPage=”错误页面路径”：jsp本身代码出错时，自动转发到这个页面。\n\n还可以通过在web.xml中配置&lt;error-page&gt;信息来实现\n&lt;!-- 通过http错误代码配置错误页面 --&gt;&lt;error-page&gt;    &lt;error-code&gt;404&lt;/error-code&gt;    &lt;location&gt;/WEB-INF/error.jsp&lt;/location&gt;&lt;/error-page&gt;&lt;!-- 通过设定的异常类跳转错误页面 --&gt;&lt;error-page&gt;    &lt;exception-type&gt;java.lang.ArithmeticException&lt;/exception-type&gt;    &lt;location&gt;/WEB-INF/error.jsp&lt;/location&gt;&lt;/error-page&gt;\n\n\n\nisErrorPage=”true | false” ：\n\n默认为false，true时可使用exception隐函对象，打印出错信息。\n只有出错时exception才不会null，因此不建议直接访问含该对象时候的网页。\n因此推荐把调用exception对象的错误页面放入WEB-INF中，通过外部请求的转发访问。\n\n\ncontentType=”mimeType [ ;charset=characterSet ]” | “text/html ;charset=ISO-8859-1” ] \n\n指定当前JSP的响应类型，实际调用response.setContentType();\n同理也可以再配置中设置响应类型的字符编码charset\n\n\npageEncoding=”characterSet| ISO-8859-1”] ：指定当前JSP页面编码的字符编码，一般与上述的字符编码设置一致\n\nisELIgnored=”true | false”：指定当前JSP页面是否可以使用EL表达式，通常取值为true\n\n\n\nautoFlush：设置当out输出缓冲区满了之后，是否自动刷新缓冲区。默认true\nbuffer：设置out缓冲区的大小，默认8kb\n\ninclude指令\ninclude指令实现把另一个文件(HTML、JSP等)的内容静态包含到当前页面中。\n\n静态包含\n\n静态包含其实是吧被包含得jsp页面的代码拷贝到包含的位置执行输出(out.write())\n静态包含不会翻译被包含的jsp页面，即只有一个jsp源文件\n\n\n\n&lt;%@ include file = &quot;copyright.html&quot; %&gt;\n\nJSP动作JSP动作JSP页面发给容器的命令，它指示容器在页面执行期间(动态)，完成的某种任务。\n\n基本语法：&lt;前缀: 动作名称 属性列表键值对 /&gt;，如&lt;jsp:include page=&quot;copyright.html&quot;/&gt;\n\n动作类型：JSP标准动作、标准标签库(JSTL)、用户自定义动作\n\n常用动作：\n\njsp:include：在当前页面中动态包含另一个页面\n\n非源码级搬运包含，而是通过内置调用一个方法包含\n\nJspRuntimeLibrary.include(request, response, &quot;/include/footer.jsp&quot;, out, false\n\n生成多个servlet源文件，即包含与被包含数目。\n\n多数使用静态包含\n\njsp:forward page = “”：请求转发到指定页面\n\n可以使用 jsp:param 子标签传入一些参数，响应端可通过getParameter()\n\n\n\n &lt;jsp:forward page=&quot;/include/b.jsp&quot;&gt;&lt;jsp:param value=&quot;abcd&quot; name=&quot;username&quot;/&gt; &lt;/jsp:forward&gt;\t\n\njsp:useBean：查找或创建一个javaBean对象\n\njsp:setProperty：设置JavaBeans对象的属性值\n\njsp:getProperty：返回JavaBeans对象的属性值\n\njsp:plugin：在JSP页面中嵌入一个插件\n\n\n\n\n四大域对象通用方法pageContext，request，session，application对象都含以下方法\n\nvoid setAttribute(String name, Object object)：设置数据内容，键值对key : value\nObject getAttribute(String name)：通过key获取value\nEnumeration getAttributeNames() ：获取所有key组成的Enumeration对象\nvoid removeAttribute(String name) ：删除指定key的数据\n\n属性作用范围范围从小到大：pageContext —&gt; request —&gt; session —&gt; application\n\npageContext：仅限于当前 JSP 页面，因此Servlet或者其他页面都获取不到。\nrequest：仅限于同一个请求.\nsession：限于同一次会话，浏览器打开直到关闭称之为一次会话(前提在此期间会话不失效)\napplication：限于当前WEB 应用，是范围最大的属性作用范围。只要在一处设置属性, 在其他各处的 JSP 或 Servlet 中都可以获取到。\n\n\ntips：由于这些域对象存储数据都是占用资源的，因此在业务使用中，尽量能小作用域完成的工作交给小作用域，使其资源得到最快得释放。\n转发与重定向请求转发基本概念请求转发：服务器收到请求后，从一次资源跳转到另一个资源(Servlet)的操作叫请求转发。\n\n浏览器地址栏没有变化，为初次发出请求的地址。\n只有一次请求，request始终是同一个对象，因此共享Request域中的数据\n可以转发到WEB-INF目录下\n只能转发给当前 WEB 应用的的资源、不可以访问工程以外的资源\n转发地址全程由服务器操作，/ 代表的是当前 WEB 应用的根目录http://ip:port/web应用\n\n实现步骤\n调用HttpServletReques对象getRequestDispatcher()方法并填入转发路径\n通过第1步获取到RequestDispatcher对象\n通过调用RequestDispatcher的forward()方法进行请求的转发\n\npublic class ForwardServlet extends HttpServlet &#123;\tprivate static final long serialVersionUID = 1L;\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) \t\tthrows ServletException, IOException &#123;\t\t//请求的转发.\t\t//1. 调用 HttpServletRequest的getRequestDispatcher()方法,需要传入要转发的地址        //获取RequestDispatcher对象\t\tRequestDispatcher requestDispatcher = request.getRequestDispatcher(&quot;/testServlet&quot;);\t\t\t\t//2、调用 HttpServletRequest 的 forward(request, response) 进行请求的转发. \t\trequestDispatcher.forward(request, response); \t&#125;&#125;\n\n请求的重定向基本概念请求重定向：指客户端给服务器发请求后，服务器告知客户端，去请求另一个地址。\n\n浏览器地址栏会发生变化、初次发出的请求地址，地址栏为最后响应的那个地址 \n两次请求，request不是同一个对象，不能共享request域中的数据\n不能访间WEB-INF下的资源\n可以访问工程外的资源(可以重定向到任何资源，百度，淘宝等)\n地址将被服务器发往浏览器进行解析，因此 / 代表 / 代表的是当前 WEB 站点的根目录. http://ip:port/\n\n实现步骤方式1通过设置响应头\n// 设置响应状态码 302 ，表示重定向，（已搬迁）resp.setStatus(302);// 设置响应头，说明 新的地址在哪里resp.setHeader(&quot;Location&quot;, &quot;http://localhost:8080&quot;);\n\n方式2直接调用HttpServletResponse的sendRedirect()方法\nresponse.sendRedirect(&quot;http://localhost:8080&quot;)\n\nout&amp;getWriter()当JSP页面中所有代码执行完后会做一下两个动作\n\n执行out.flush()操作，会把out缓冲区中得数据追加写入到response缓冲区末尾\n会执行response得刷新操作，吧全部数据响应给客户端\n\n\n\n由于 jsp 翻译之后，底层源代码都是使用 out 来进行输出，所以一般情况下。我们在 jsp 页面中统一使用 out 来进行输出。避免打乱页面输出内容的顺序。 \n\nout.write() 输出字符串没有问题 \n\nout.print() 输出任意数据都没有问题（都转换成为字符串后调用的 write 输出） \n\n深入源码，浅出结论：在 jsp 页面中，任何类型可以统一使用 **out.print()**来进行输出\n\n\nEL表达式基础概念\nEL 表达式的全称是：Expression Language，是表达式语言。 \nEL 表达式的作用：主要是代替jsp表达式脚本 ,负责jsp页面的数据输出。由于EL 表达式在输出数据时比jsp脚本更为简洁、强大、友好。\n\n&lt;body&gt;&lt;% request.setAttribute(&quot;key&quot;,&quot;值&quot;); %&gt;表达式脚本输出key的值是：\t&lt;%=request.getAttribute(&quot;key1&quot;)==null?&quot;&quot;:request.getAttribute(&quot;key1&quot;)%&gt;&lt;br/&gt;EL 表达式输出 key 的值是：$&#123;key1&#125;&lt;/body&gt;\n\n\nEL表达式格式：$&#123;表达式&#125;\nEL表达式直接编写在JSP页面中，无需写在&lt;% %&gt;内\nEL表达式在输出null值时，会自定转换为空串输出。\n\n域数据的搜索顺序输出语法由于EL表达式主要用于在 jsp 页面中输出数据。 且主要是输出域对象中的数据。 \n\n格式：&lt;% request.setAttribute(&quot;key&quot;,&quot;值&quot;); %&gt;  等价于 $&#123;key&#125;\n前提：EL表达式所有语句输出都需要JavaBean的getter()方法支持。\n\n域数据的搜索顺序当四个域中都有相同的key 的数据的时，EL 表达式会按照四个域的从小到大的顺序去进行搜索，优先匹配则输出。\n&lt;%//往四个域中都保存了相同的 key 的数据。    request.setAttribute(&quot;key&quot;, &quot;request&quot;);    session.setAttribute(&quot;key&quot;, &quot;session&quot;);    application.setAttribute(&quot;key&quot;, &quot;application&quot;);    pageContext.setAttribute(&quot;key&quot;, &quot;pageContext&quot;);%&gt;$&#123;key&#125; &lt;%-- 输出：pageContext --&gt;\n\njava类属性输出输出Java类中普通属性，数组属性。list 集合属性和 map 集合属性。\n\nJSP部分\n\n&lt;%    Person person = new Person();    person.setName(&quot;Denny！&quot;);    person.setPhones(new String[]&#123;&quot;18610541354&quot;,&quot;18688886666&quot;,&quot;18699998888&quot;&#125;);    List&lt;String&gt; cities = new ArrayList&lt;String&gt;();    cities.add(&quot;北京&quot;);    cities.add(&quot;上海&quot;);    cities.add(&quot;深圳&quot;);    person.setCities(cities);    Map&lt;String,Object&gt;map = new HashMap&lt;&gt;();    map.put(&quot;key1&quot;,&quot;value1&quot;);    map.put(&quot;key2&quot;,&quot;value2&quot;);    map.put(&quot;key3&quot;,&quot;value3&quot;);    person.setMap(map);pageContext.setAttribute(&quot;p&quot;, person);%&gt;\n\n\nEL表达式部分\n\n输出 Person：$&#123; p &#125;&lt;br&#x2F;&gt;输出 Person 的 name 属性：$&#123;p.name&#125; &lt;br&gt;输出 Person 的 pnones 数组属性值：$&#123;p.phones[2]&#125; &lt;br&gt;输出 Person 的 List 集合：$&#123;p.cities&#125; &lt;br&gt;输出 Person 的 List 集合中个别元素值：$&#123;p.cities[2]&#125; &lt;br&gt;输出 Person 的 Map 集合: $&#123;p.map&#125; &lt;br&gt;输出 Person 的 Map 集合中某个 key 的值: $&#123;p.map.key3&#125; &lt;br&gt;\n\n\n\n运算符关系运算符\n逻辑运算符\n算术运算符\nempty运算empty 运算可以判断一个数据是否为空，若为空输出 true，否则输出 false。 以下几种情况为空：\n\n值为null值\n值为空串\n值是 Object 类型数组，长度为零\nlist、map集合，元素个数为零\n\n三元运算符略\n“.”与[]中括号运算\n.点运算，可以输出 Bean 对象中某个属性的值。 \n\n[]中括号运算\n\n可以输出有序集合中某个元素的值。 \n\n并且[]中括号运算，还可以输出 map 集合中 key 里含有特殊字符的 key 的值\n\n将key值用单引号’’ 包含\n将含特殊字符的key值整个用 [ ] 中括号包含\n\n&lt;%    Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();    map.put(&quot;a.a.a&quot;, &quot;aaaValue&quot;);    map.put(&quot;b+b+b&quot;, &quot;bbbValue&quot;);    map.put(&quot;c-c-c&quot;, &quot;cccValue&quot;);    request.setAttribute(&quot;map&quot;, map);%&gt;&lt;%-- $&#123; map.a.a.a&#125; &lt;br&gt; 输出失败--&gt;$&#123; map[&#x27;a.a.a&#x27;] &#125; &lt;br&gt;$&#123; map[&quot;b+b+b&quot;] &#125; &lt;br&gt;$&#123; map[&#x27;c-c-c&#x27;] &#125; &lt;br&gt;\n\n\n\n\n\n11个隐函对象隐函对象列表\n\n\n隐函对象\n返回类型\n作用\n\n\n\npageContext\nPageContextImpl\n可获取 jsp 中的九大内置对象\n\n\n\n\n\n\n\npageScope\nMap&lt;Strubg,Object&gt;\n获取 pageContext 域中的\n\n\nrequestScope\nMap&lt;Strubg,Object&gt;\n获取 Request 域中的数\n\n\nsessionScope\nMap&lt;Strubg,Object&gt;\n获取 Session 域中的数据\n\n\napplicationScope\nMap&lt;Strubg,Object&gt;\n获取 ServletContext 域中的数据\n\n\n\n\n\n\n\nparam\nMap&lt;Strubg,String&gt;\n获取请求参数的值\n\n\nparamValues\nMap&lt;Strubg,String[]&gt;\n同上，获取多个值的时候使用\n\n\n\n\n\n\n\nheader\nMap&lt;String,String&gt;\n获取请求头的信息\n\n\nheaderValues\nMap&lt;Strubg,String[]&gt;\n同上，获取多个值的情况使用\n\n\n\n\n\n\n\ncookie\nMap&lt;Strubg,Cookie&gt;\n获取当前请求的 Cookie 信息\n\n\ninitParam\nMap&lt;String,String&gt;\n获取web.xml中&lt;context-param&gt;参数\n\n\n域隐函对象\npageScope ——&gt; pageContext 域 \nrequestScope ——&gt; request 域 \nsessionScope ——&gt; Session 域 \napplicationScope ——&gt; ServletContext 域\n\n\n\n示例\n\n&lt;%    pageContext.setAttribute(&quot;key1&quot;, &quot;pageContext1&quot;);    pageContext.setAttribute(&quot;key2&quot;, &quot;pageContext2&quot;);    request.setAttribute(&quot;key2&quot;, &quot;request&quot;);    session.setAttribute(&quot;key2&quot;, &quot;session&quot;);    application.setAttribute(&quot;key2&quot;, &quot;application&quot;);%&gt;$&#123; key2 &#125; &lt;%-- 非指定域搜索数据，默认从小到大 --&gt;&lt;%-- 指定域搜索数据 --&gt;$&#123; requestScope.key2 &#125;$&#123; applicationScope.key2 &#125;\n\npageContextpageContext隐函对象可获取任意9大jsp隐函对象，获取后常用功能如下\n\n协议\n服务器 ip\n服务器端口\n获取工程路径\n获取请求方式\n获取客户端 ip 地址\n获取会话的 id 编号\n\n\n\n示例\n\n&lt;%--    原生方法说明    request.getScheme() 它可以获取请求的协议,如 http、https    request.getServerName() 获取请求的服务器ip或域名，如 127.0.0.1    request.getServerPort() 获取请求的服务器端口号，如 80    getContextPath() 获取当前工程路径，如 /09_EL_JSTL    request.getMethod() 获取请求的方式，如（GET 或 POST）    request.getRemoteHost() 获取客户端的 ip 地址    session.getId() 获取会话的唯一标识--%&gt;1.协议： $&#123; pageContext.request.scheme &#125;&lt;br&gt;2.服务器 ip：$&#123; pageContext.request.serverName &#125;&lt;br&gt;3.服务器端口：$&#123; pageContext.request.serverPort &#125;&lt;br&gt;4.获取工程路径：$&#123; pageContext.request.contextPath &#125;&lt;br&gt;5.获取请求方法：$&#123; pageContext.request.method &#125;&lt;br&gt;6.获取客户端 ip 地址：$&#123; pageContext.request.remoteHost &#125;&lt;br&gt;7.获取会话的 id 编号：$&#123; pageContext.session.id &#125;&lt;br&gt;\n\n\n提高EL表达式简洁度的技巧\n\n&lt;%\t//如需调用request相关方法，则不通pageContext获取request对象\t//而将JSP的request隐函对象存入pageContext域后直接用EL表达式调用    pageContext.setAttribute(&quot;req&quot;, request);%&gt;优化前： $&#123; pageContext.request.scheme &#125;&lt;br&gt;优化后： $&#123; req.scheme &#125;&lt;br&gt;\n\nparam\nparam Map&lt;String,String&gt;：它可以获取请求参数的值 \nparamValues Map&lt;String,String[]&gt;： 它也可以获取请求参数的值，获取多个值的时候使用。\n\n\n\n示例代码\n\n输出请求参数 username 的值：$&#123; param.username &#125; &lt;br&gt;输出请求参数 password 的值：$&#123; param.password &#125; &lt;br&gt;输出请求参数 hobby 的值：$&#123; paramValues.hobby[0] &#125; &lt;br&gt;输出请求参数 hobby 的值：$&#123; paramValues.hobby[1] &#125; &lt;br&gt;\n\nheader\nheader Map&lt;String,String&gt;：它可以获取请求头的信息 \nheaderValues Map&lt;String,String[]&gt;： 它可以获取请求头的信息，它可以获取多个值的情况。\n\n\n\n示例代码：\n\n输出请求头【User-Agent】的值：$&#123; header[&#x27;User-Agent&#x27;] &#125; &lt;br&gt;输出请求头【Connection】的值：$&#123; header.Connection &#125; &lt;br&gt;输出请求头【User-Agent】的值：$&#123; headerValues[&#x27;User-Agent&#x27;][0]&#125; &lt;br&gt;\n\ncookie\ncookie Map&lt;String,Cookie&gt;： 它可以获取当前请求的 Cookie 信息\n\n\n\n示例代码\n\n获取 Cookie 的名称：$&#123; cookie.JSESSIONID.name &#125; &lt;br&gt;获取 Cookie 的值：$&#123; cookie.JSESSIONID.value &#125; &lt;br&gt;\n\ninitParam\ninitParam Map&lt;String,String&gt; ：它可以获取在 web.xml 中配置的上下文参数\n\n\n\nweb.xml\n\n&lt;context-param&gt;    &lt;param-name&gt;username&lt;/param-name&gt;    &lt;param-value&gt;root&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt;    &lt;param-name&gt;url&lt;/param-name&gt;    &lt;param-value&gt;jdbc:mysql:///test&lt;/param-value&gt;&lt;/context-param&gt;\n\n\n示例代码\n\n输出&amp;lt;Context-param&amp;gt;username 的值：$&#123;initParam.username&#125; &lt;br&gt;输出&amp;lt;Context-param&amp;gt;url 的值：$&#123;initParam.url&#125; &lt;br&gt;\n\nJSTLMVC模式基础概念MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。\n\nModel（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。\nView（视图） - 视图代表模型包含的数据的可视化。\nController（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。\n\n\n\n包命名规范\n\n\n层次\n包名\n含义\n\n\n\nweb层\ncom.website.web/servlet/controller\n\n\n\nservice层\ncom.website.service\nservice接口包\n\n\nservice层\ncom.website.service.impl\nservice接口实现类\n\n\ndao持久层\ncom.website.dao\nDao接口包\n\n\ndao持久层\ncom.website.dao.impl\nDao接口实现类\n\n\n实体bean对象\ncom.website.pojo/entity/domain.bean\nJavaBean类\n\n\n测试包\ncom.website.test/junit\n测试类\n\n\n工具类\ncom.website.utils\n工具类\n\n\n后端编码流程tips：这里指编码流程阶段，指后端程序员工作角度，非整个软件的开发流程(需求分析等等)。\n\n建库建表：分析页面需要的数据表与数据库结构\n\n编写JavaBean\n\n后续对应编写test类：以下开始，每编写一个功能类代码类，都需对应测试一遍(XxxTest.class，testMethod())，或通过IDE快速生成junit测试类\n\n注意，测试不仅要测试正确的返回值情况，还要测试错误的返回值情况是否符合预期\n\n\n编写DAO：jdbc.properties、JdbcUtils、BaseDao、定制化业务Dao(Dao接口及、Dao实现类)\n\njdbc.properties：创建存储jdbc连接参数的.properties文件\n导入相关包：最基本数据库连接驱动jar包，其次有可能第三方(连接池、DbUtils等)\nJdbcUtils：编写JdbcUtils工具类，用于获取数据库连接(一般项目经历准备好)\nBaseDao：封装通用的CRUD操作类(可以基于一些工具类实现，如DbUtils)，如含以下主要方法，一般设计为抽象类，提供给别人继承使用。\nint update(String sql,Object…args)：执行insert、update、delete语句\n T queryForOne(Class type,String sql, Object…args)：查询返回一个javaBean对象\n List queryForList(Class type,String sql, Object…args)：查询返回多个JavaBean\nObejct queryForSingleValue(String sql,Object…args)：查询返回单个值\n\n\n定制化DAO类：含interface接口，与对应的implements实现类。对应参与业务操作的JavaBean的Dao操作\n\n\n业务service：含业务(功能)interface接口，与对应的implements实现类，一个业务功能对应一个方法。\n\n\n\n\njdbc.properties (类路径下)\n\nusername=rootpassword=rooturl=jdbc:mysql://localhost:3306/book1driverClassName=com.mysql.jdbc.DriverinitialSize=5maxActive=10\n\n\ncom.website.utils.JdbcUtils.java\n\npackage com.website.utils;import com.alibaba.druid.pool.DruidDataSourceFactory;import javax.sql.DataSource;import java.io.InputStream;import java.sql.Connection;import java.util.Properties;/** * 用于获取数据库连接，通过druid数据库连接池实现 * 1、导包 *  - druid-1.1.9.jar 数据库连接池 *  - mysql-connector-java * @author yhd * @create 2021-04-11 11:21 */public class JdbcUtils &#123;    private JdbcUtils()&#123;&#125;//私有化构造器    private static DataSource dataSource = null;//可多态，也可DruidDataSource    //0、JdbcUtils均为静态方法，私有化构造器后通过static代码块实现初始化操作    static&#123;        //6、处理编译异常问题        try &#123;            //2、创建Properties对象，            Properties properties = new Properties();            //4、获取配置文件的输入流对象            InputStream inputStream = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);            //3、已知Properties核心需调用load方法加载配置文件数据，得知需输入流            properties.load(inputStream);            //1、创建通过DruidDataSourceFactory获取数据库连接池对象，得知需Properties对象            dataSource = DruidDataSourceFactory.createDataSource(properties);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    /**     * 获取数据库连接对象，若获取失败返回null     * @return     */    public static Connection getConnection()&#123;        //3、因处理异常而声明对象        Connection con = null;        //2、处理异常问题        try &#123;            //1、直接从数据库连接池获取连接对象并返回            con = dataSource.getConnection();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;        return con;    &#125;    /**     * 释放数据库连接，回收到数据库连接池     * @param connection     */    public static void close(Connection connection)&#123;        try &#123;            if(dataSource != null)&#123;                connection.close();            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;\n\n\ncom.website.dao.BaseDao.java\n\npackage com.website.dao;import com.website.utils.JdbcUtils;import org.apache.commons.dbutils.QueryRunner;import org.apache.commons.dbutils.handlers.BeanHandler;import org.apache.commons.dbutils.handlers.BeanListHandler;import org.apache.commons.dbutils.handlers.ScalarHandler;import java.sql.Connection;import java.util.List;/** * 封装通用的数据库操作：update、query * 基于DbUtils实现(commons-dbutils-1.3) * @author yhd * @create 2021-04-11 14:48 */public abstract class BaseDao &#123;    //使用DbUtils    private QueryRunner queryRunner = new QueryRunner();    /**     * 查询返回一个值     * @param sql   执行的sql语句     * @param args  sql语句填入的参数     * @return  执行成功返回Object，否则返回null     */    public Object queryForValue(String sql,Object...args)&#123;        Connection con = JdbcUtils.getConnection();        try &#123;            return queryRunner.query(con,sql,new ScalarHandler(),args);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.close(con);        &#125;        return null;    &#125;    /**     * 查询返回javaBean的List集合     * @param type  返回javaBean类型     * @param sql   执行的sql语句     * @param args  sql语句填充的参数     * @param &lt;T&gt;   返回类型的泛型     * @return  执行成功返回List，否则返回null     */    public &lt;T&gt; List&lt;T&gt; queryForList(Class&lt;T&gt; type, String sql, Object...args)&#123;        Connection con = JdbcUtils.getConnection();        try &#123;            return queryRunner.query(con,sql,new BeanListHandler&lt;T&gt;(type),args);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.close(con);        &#125;        return null;    &#125;    /**     * 查询返回一个javaBean     * @param type  返回的对象类型     * @param sql   执行的sql语句     * @param args  sql对应参数值     * @param &lt;T&gt;   返回类型的泛型     * @return  执行成功返回JavaBean，否则返回null     */    public &lt;T&gt; T queryForOne(Class&lt;T&gt; type,String sql,Object...args)&#123;        Connection con = JdbcUtils.getConnection();        try &#123;            return queryRunner.query(con,sql,new BeanHandler&lt;T&gt;(type),args);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.close(con);        &#125;        return null;    &#125;    /**     * 用于执行：Insert/Update/Delete操作     * @param sql 执行的sql语句     * @param args sql语句中填入参数     * @return 若成则返回受影响的行数，失败返回-1     */    public int update(String sql,Object...args)&#123;        Connection con = JdbcUtils.getConnection();        try &#123;            return queryRunner.update(con, sql, args);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.close(con);        &#125;        return -1;    &#125;&#125;\n\n\n\nListener监听器什么是监听器？监听器就是实时监视一些事物状态的程序，我们称为监听器。\n\nListener 监听器它是 JavaWeb 的三大组件之一：Servlet 程序、Filter 过滤器、Listener监听器。 \nListener它是 JavaEE 的规范，就是接口 \n监听器的作用是监听某种事物的变化。然后通过回调函数，反馈给客户(程序)去做一些相应的处理。\n\nServletContextListener随之技术的变革，绝大多数类型的监听器已经用不上了，剩下ServletContextListener有较高的使用频率。\n功能\nServletContextListener它可以监听 ServletContext 对象的创建和销毁\n\nServletContext对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁\n\n监听到创建和销毁之后都会分别调用ServletContextListener监听器的方法反馈。\npublic interface ServletContextListener extends EventListener &#123;    /**    * 在 ServletContext 对象创建之后马上调用，做初始化    */    public void contextInitialized(ServletContextEvent sce);    /**    * 在 ServletContext 对象销毁之后调用    */    public void contextDestroyed(ServletContextEvent sce);&#125;\n\n\n\n操作步骤\n编写一个类去实现ServletContextListener接口\n实现其两个回调方法\n到 web.xml中去配置监听器\n\n\nServletContextListenerTest.java\n由于接口中用的时default作为修饰符，且方法体已空实现（有大括号），所以不会提示有熟悉的红色下划线 快捷实现接口中的抽象方法 的操作，需自己在IDE中编写方法，提示重写。\n\n\npublic class ServletContextListenerTest implements ServletContextListener &#123;    @Override    public void contextInitialized(ServletContextEvent sce) &#123;        System.out.println(&quot;servletContext对象已被创建&quot;);    &#125;    @Override    public void contextDestroyed(ServletContextEvent sce) &#123;        System.out.println(&quot;servletContext对象已被销毁&quot;);    &#125;&#125;\n\n\nweb.xml\n\n&lt;listener&gt;    &lt;listener-class&gt;com.website.test.ServletContextListenerTest&lt;/listener-class&gt;&lt;/listener&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDom4j解析技术dom4j 是优秀的第三方解析XML类库。需要使用 dom4j 就需要到 dom4j 官网下载 dom4j 的 jar 包。具体操作可以查看官方文档，或者下载离线jar包后查看离线帮助文档，如下\n\nDom4j编程步骤\n添加jar包，如 dom4j-1.6.1.jar\n通过创建SAXReader对象调用read方法加载xml文件获取Document对象\n通过Document对象获取对应的xml对象的根元素\n通过根元素调用element(标签名)或elements(标签名)方法获取对应的xml标签对象或集合\n获得标签对象后通过调用对应方法获取属性，或子标签。具体演示如下\n\n\n\n创建实例XML文件\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;books&gt;    &lt;book sn=&quot;SN12341232&quot;&gt;        &lt;name&gt;effective of java&lt;/name&gt;        &lt;price&gt;9.9&lt;/price&gt;        &lt;author&gt;刘德华&lt;/author&gt;    &lt;/book&gt;    &lt;book sn=&quot;SN12341231&quot;&gt;        &lt;name&gt;深入了解虚拟机&lt;/name&gt;        &lt;price&gt;99.99&lt;/price&gt;        &lt;author&gt;陈慧娴&lt;/author&gt;    &lt;/book&gt;&lt;/books&gt;\n\n编写标签对应的java类，并封装成java类，输出所有属性。\npublic class Book &#123;    private String book;    private String name;    private Double price;    private String author;    //....建立构造，重写toString等基操&#125;\n\n@Testpublic void test() throws DocumentException &#123;    //1、通过创建SAXReader对象调用read方法加载xml文件获取Document对象    SAXReader reader = new SAXReader();    Document read = reader.read(&quot;src/books.xml&quot;);    //2、通过Document对象获取对应的xml对象的根元素    Element rootElement = read.getRootElement();    //3、通过根元素获取对应的xml标签对象,主要使用element()与elements()方法    List&lt;Element&gt; books = rootElement.elements(&quot;book&quot;);    for(Element book : books)&#123;        //1、获取当前标签属性        String sn = book.attributeValue(&quot;sn&quot;);        //2、获取book标签下name、price、author标签的值        //方式1：通过再获取子标签的element对象,再调用getText()        String name = book.element(&quot;name&quot;).getText();        //方式2：直接通过        String author = book.elementText(&quot;author&quot;);        Double price = Double.parseDouble(book.elementText(&quot;price&quot;));        System.out.println(new Book(sn,name,price,author));    &#125;&#125;/*输出如下Book&#123;book=&#x27;SN12341232&#x27;, name=&#x27;effective of java&#x27;, price=9.9, author=&#x27;刘德华&#x27;&#125;Book&#123;book=&#x27;SN12341231&#x27;, name=&#x27;深入了解虚拟机&#x27;, price=99.99, author=&#x27;陈慧娴&#x27;&#125;*/\n\n\n\n","tags":["JavaWeb"]}]